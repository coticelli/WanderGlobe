@page
@model WanderGlobe.Pages.TimelineModel
@{
    ViewData["Title"] = "La Tua Timeline di Viaggio";
}

<div class="universe-container">
    <!-- Stelle animate di sfondo -->
    <div id="stars-container"></div>

    <div class="timeline-container">
        <div class="timeline-header">
            <div class="timeline-title animated-element">
                <div class="title-icon-wrapper">
                    <i class="fas fa-route"></i>
                    <div class="pulse-effect"></div>
                </div>
                <div>
                    <h1>Il Tuo Viaggio nel Tempo</h1>
                    <p>Scopri la storia dei tuoi viaggi in ordine cronologico</p>
                </div>
            </div>

            <div class="timeline-controls animated-element">
                <div class="control-item dropdown">
                    <button class="btn btn-glass dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-filter"></i> Filtra per
                    </button>
                    <ul class="dropdown-menu glass-menu dropdown-menu-end" aria-labelledby="filterDropdown">
                        <li><a class="dropdown-item filter-option active" href="#" data-filter="all">
                            <i class="fas fa-globe-americas"></i> Tutte le destinazioni
                        </a></li>
                        <div class="dropdown-divider"></div>
                        @foreach (var continent in Model.Continents)
                        {
                            <li><a class="dropdown-item filter-option" href="#" data-filter="@continent.ToLower()">
                                <i class="@GetContinentIcon(continent)"></i> @continent
                            </a></li>
                        }
                    </ul>
                </div>

                <div class="control-item dropdown">
                    <button class="btn btn-glass dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-sort"></i> Ordinamento
                    </button>
                    <ul class="dropdown-menu glass-menu dropdown-menu-end" aria-labelledby="sortDropdown">
                        <li><a class="dropdown-item sort-option active" href="#" data-sort="newest">
                            <i class="fas fa-arrow-down"></i> Più recenti prima
                        </a></li>
                        <li><a class="dropdown-item sort-option" href="#" data-sort="oldest">
                            <i class="fas fa-arrow-up"></i> Più vecchi prima
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Anno tabs - con effetto parallasse -->
        <div class="timeline-year-tabs animated-element">
            <div id="floating-compass">
                <img src="/images/compass.svg" alt="Compass" onerror="this.src='/images/compass.png';">
            </div>
            <div class="timeline-scroller">
                @foreach (var year in Model.VisitYears)
                {
                    <a href="#year-@year" class="year-tab" data-year="@year">
                        <span class="year-text">@year</span>
                        <div class="year-glow"></div>
                    </a>
                }
            </div>
        </div>

        <!-- Timeline continua con tutti gli anni -->
        <div class="timeline-content">
            <!-- Aereo volante che segue lo scroll -->
            <div id="flying-plane">
                <i class="fas fa-plane"></i>
            </div>
            
            <!-- Path decorativo con mappa puntinata -->
            <div class="dotted-path-container">
                <div class="dotted-path"></div>
            </div>
            
            @if (!Model.GroupedVisits.Any())
            {
                <div class="empty-timeline animated-element">
                    <div class="empty-globe">
                        <div class="globe">
                            <div class="globe-sphere">
                                <div class="globe-worldmap"></div>
                                <div class="globe-outer-shadow"></div>
                                <div class="globe-inner-shadow"></div>
                            </div>
                            <div class="globe-stand"></div>
                        </div>
                        <div class="pin-container">
                            <div class="pin"></div>
                            <div class="pin-shadow"></div>
                        </div>
                    </div>
                    <h3>Nessun viaggio ancora!</h3>
                    <p>Inizia ad aggiungere le città che hai visitato per costruire la tua timeline di viaggio.</p>
                    <a href="/Globe?tab=add" class="btn btn-neo-primary">
                        <i class="fas fa-plus-circle me-2"></i> Aggiungi una città
                    </a>
                </div>
            }
            else
            {
                @foreach (var yearGroup in Model.GroupedVisits.OrderByDescending(g => g.Key))
                {
                    <div class="timeline-year animated-section" id="year-@yearGroup.Key">
                        <div class="year-marker">
                            <div class="year-line"></div>
                            <div class="year-bubble">
                                <span>@yearGroup.Key</span>
                                <div class="ring"></div>
                                <div class="ring-pulse"></div>
                            </div>
                        </div>
                        
                        <div class="timeline-events-wrapper">
                            <div class="timeline-events">
                                @foreach (var monthGroup in yearGroup.Value.GroupBy(v => v.VisitDate.Month).OrderBy(g => g.Key))
                                {
                                    <div class="timeline-month" data-month="@monthGroup.Key">
                                        <div class="month-marker">
                                            <div class="month-dot"></div>
                                            <span class="month-name">@(new DateTime(yearGroup.Key, monthGroup.Key, 1).ToString("MMMM"))</span>
                                        </div>
                                        
                                        @foreach (var visit in monthGroup.OrderBy(v => v.VisitDate.Day))
                                        {
                                            <div class="timeline-event animated-card" 
                                                 data-continent="@visit.Country.Continent?.ToLower()" 
                                                 data-visit-id="@visit.CountryId"
                                                 data-aos="fade-up">
                                                <div class="event-date">
                                                    <span>@visit.VisitDate.Day @(new DateTime(yearGroup.Key, monthGroup.Key, 1).ToString("MMMM"))</span>
                                                </div>
                                                
                                                <div class="event-card">
                                                    <div class="card-glare"></div>
                                                    <div class="event-image">
                                                        <div class="image-wrapper">
                                                            <img src="~/images/cities/@(visit.Country.Code.ToLower())-city.jpg" 
                                                                alt="@Model.GetCapital(visit.Country.Code)" 
                                                                loading="lazy"
                                                                onerror="this.onerror=null; this.src='/images/default-city.jpg';">
                                                        </div>
                                                        <div class="country-flag">
                                                            <img src="~/images/flags/@(visit.Country.Code.ToLower()).png" 
                                                                alt="@visit.Country.Name" 
                                                                onerror="this.onerror=null; this.src='/images/flags/unknown.png';">
                                                        </div>
                                                        <div class="geo-tag">
                                                            <i class="fas fa-map-marker-alt"></i>
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="event-content">
                                                        <h3>@Model.GetCapital(visit.Country.Code)</h3>
                                                        <div class="event-meta">
                                                            <span class="country-name">
                                                                <i class="fas fa-map"></i> @visit.Country.Name
                                                            </span>
                                                            <span class="continent-badge" data-continent="@visit.Country.Continent?.ToLower()">
                                                                <i class="@GetContinentIcon(visit.Country.Continent)"></i> @visit.Country.Continent
                                                            </span>
                                                        </div>
                                                        
                                                        <div class="travel-metrics">
                                                            <div class="metric">
                                                                <i class="fas fa-temperature-high"></i>
                                                                <span>22°C</span>
                                                            </div>
                                                            <div class="metric">
                                                                <i class="fas fa-cloud-sun"></i>
                                                                <span>Soleggiato</span>
                                                            </div>
                                                            <div class="metric">
                                                                <i class="fas fa-tachometer-alt"></i>
                                                                <span>8,543 km</span>
                                                            </div>
                                                        </div>
                                                        
                                                        <div class="event-actions">
                                                            <a href="/Globe?highlight=@visit.CountryId" class="btn btn-neo-primary hover-float">
                                                                <i class="fas fa-globe"></i>
                                                                <span>Visualizza sul globo</span>
                                                            </a>
                                                            <button type="button" class="btn btn-neo-secondary hover-float" data-bs-toggle="modal" data-bs-target="#visitModal@(visit.CountryId)">
                                                                <i class="fas fa-edit"></i>
                                                                <span>Modifica</span>
                                                            </button>
                                                            <button type="button" class="btn btn-circle memory-btn" title="Aggiungi ricordo">
                                                                <i class="fas fa-camera"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <!-- Modal per modifica visita -->
                                            <div class="modal fade custom-modal" id="visitModal@(visit.CountryId)" tabindex="-1" aria-hidden="true">
                                                <div class="modal-dialog modal-dialog-centered">
                                                    <div class="modal-content glass-effect">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title">
                                                                <i class="fas fa-edit me-2"></i>
                                                                Modifica visita a @Model.GetCapital(visit.Country.Code)
                                                            </h5>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <form method="post" asp-page-handler="EditVisit">
                                                            <div class="modal-body">
                                                                <input type="hidden" name="visitId" value="@visit.CountryId">

                                                                <div class="city-info">
                                                                    <div class="city-image">
                                                                        <img src="~/images/cities/@(visit.Country.Code.ToLower())-city.jpg"
                                                             alt="@Model.GetCapital(visit.Country.Code)"
                                                             onerror="this.onerror=null; this.src='/images/default-city.jpg';">
                                                                    </div>
                                                                    <div class="city-details">
                                                                        <h6>@Model.GetCapital(visit.Country.Code)</h6>
                                                                        <p>@visit.Country.Name</p>
                                                                    </div>
                                                                </div>

                                                                <div class="mb-4">
                                                                    <label for="visitDate@(visit.CountryId)" class="form-label">
                                                                        <i class="far fa-calendar-alt me-2"></i>
                                                                        Data visita
                                                                    </label>
                                                                    <div class="date-input-wrapper">
                                                                        <input type="date" class="form-control neo-input"
                                                               id="visitDate@(visit.CountryId)"
                                                               name="visitDate"
                                                               value="@visit.VisitDate.ToString("yyyy-MM-dd")">
                                                                    </div>
                                                                </div>

                                                                <div class="mb-4">
                                                                    <label for="visitNotes@(visit.CountryId)" class="form-label">
                                                                        <i class="far fa-sticky-note me-2"></i>
                                                                        Note e ricordi
                                                                    </label>
                                                                    <textarea class="form-control neo-input"
                                                              id="visitNotes@(visit.CountryId)"
                                                              name="visitNotes"
                                                              rows="3"
                                                              placeholder="Scrivi i tuoi ricordi più belli...">@(visit.Notes ?? "")</textarea>
                                                                </div>

                                                                <div class="memory-gallery">
                                                                    <div class="gallery-title">
                                                                        <i class="fas fa-images me-2"></i>
                                                                        I tuoi ricordi
                                                                    </div>
                                                                    <div class="memory-photos">
                                                                        <div class="add-photo">
                                                                            <i class="fas fa-plus"></i>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                                                                <button type="submit" class="btn btn-neo-primary">
                                                                    <i class="fas fa-check me-1"></i>
                                                                    Salva modifiche
                                                                </button>
                                                            </div>
                                                        </form>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            
            <!-- Progress indicator animato -->
            <div class="journey-progress">
                <div class="journey-indicator">
                    <div class="compass-rose">
                        <div class="compass-face">
                            <div class="compass-needle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css">
    <style>
        /* ===== VARIABILI E IMPOSTAZIONI GLOBALI ===== */
        :root {
            /* Colori principali con una palette più vivace e profonda */
            --primary: #1e88e5;
            --primary-dark: #1565c0;
            --primary-light: #64b5f6;
            --primary-gradient: linear-gradient(135deg, #42a5f5, #1976d2);
            
            /* Colori secondari */
            --accent: #ff6d00;
            --accent-light: #ff9e40;
            --accent-dark: #c43c00;
            --accent-gradient: linear-gradient(135deg, #ff9800, #f57c00);
            
            /* Colori neutri */
            --background: #111a2b;
            --background-light: #1c2940;
            --surface: #253555;
            --surface-light: #324369;
            
            /* Colori testo */
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.85);
            --text-hint: rgba(255, 255, 255, 0.6);
            --text-disabled: rgba(255, 255, 255, 0.38);
            
            /* Colori continenti personalizzati */
            --europa: #42a5f5;
            --asia: #ec407a;
            --africa: #ab47bc;
            --nord-america: #66bb6a;
            --sud-america: #ffb74d;
            --oceania: #4dd0e1;
            
            /* Effetti e dimensioni */
            --border-radius: 16px;
            --card-border-radius: 20px;
            --box-shadow-light: 0 8px 24px rgba(0,0,0,0.15);
            --box-shadow-strong: 0 10px 30px rgba(0,0,0,0.25);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --glow-effect: 0 0 20px rgba(100, 181, 246, 0.6);
            
            /* Glass effect */
            --glass-background: rgba(37, 53, 85, 0.25);
            --glass-border: 1px solid rgba(255, 255, 255, 0.18);
            --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            --glass-backdrop: blur(12px);
        }
        
        /* ===== STILI BASE ===== */
        body {
            background-color: var(--background);
            color: var(--text-primary);
            font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            perspective: 1000px;
        }
        
        /* ===== CONTAINER UNIVERSO ===== */
        .universe-container {
            position: relative;
            min-height: 100vh;
            overflow: hidden;
            padding-bottom: 30px;
        }
        
        /* ===== ANIMAZIONE STELLE ===== */
        #stars-container {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: transparent;
            z-index: -1;
            overflow: hidden;
        }
        
        .star {
            position: absolute;
            background-color: white;
            border-radius: 50%;
            opacity: 0.6;
            animation: twinkle 4s infinite ease-in-out;
            pointer-events: none;
        }
        
        @@keyframes twinkle {
            0% { opacity: 0.2; }
            50% { opacity: 0.8; }
            100% { opacity: 0.2; }
        }
        
                // Effetto turbulenza dell'aereo
        @@keyframes turbulence {
            0% { transform: translateY(0) rotate(0deg); }
            25% { transform: translateY(2px) rotate(1deg); }
            75% { transform: translateY(-2px) rotate(-1deg); }
            100% { transform: translateY(0) rotate(0deg); }
        }

        /* ===== CONTAINER PRINCIPALE ===== */
        .timeline-container {
            max-width: 1200px;
            margin: 1.5rem auto;
            padding: 0 20px;
            position: relative;
        }
        
        /* ===== HEADER TIMELINE ===== */
        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 20px;
            padding: 10px 0;
        }
        
        .timeline-title {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            opacity: 0;
            animation: fadeInUp 0.8s ease-out forwards;
        }
        
        .title-icon-wrapper {
            position: relative;
            width: 80px;
            height: 80px;
            background: var(--primary-gradient);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--box-shadow-strong);
            z-index: 1;
        }
        
        .title-icon-wrapper i {
            font-size: 2.5rem;
            color: white;
            z-index: 2;
        }
        
        .pulse-effect {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: var(--primary-light);
            opacity: 0.4;
            animation: pulse 2s infinite;
        }
        
        @@keyframes pulse {
            0% { transform: scale(1); opacity: 0.4; }
            50% { transform: scale(1.15); opacity: 0.2; }
            100% { transform: scale(1); opacity: 0.4; }
        }
        
        .timeline-title h1 {
            font-size: 2.2rem;
            font-weight: 800;
            margin-bottom: 0.3rem;
            color: var(--text-primary);
            letter-spacing: -0.5px;
            text-shadow: 0 2px 12px rgba(0,0,0,0.2);
        }
        
        .timeline-title p {
            margin: 0;
            color: var(--text-secondary);
            font-size: 1.1rem;
            font-weight: 400;
        }
        
        .timeline-controls {
            display: flex;
            gap: 1rem;
            opacity: 0;
            animation: fadeInRight 0.8s ease-out 0.3s forwards;
        }
        
        /* Bottoni di controllo con effetto glass */
        .btn-glass {
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            border-radius: var(--border-radius);
            color: var(--text-primary);
            padding: 10px 20px;
            font-weight: 500;
            box-shadow: var(--glass-shadow);
            transition: var(--transition);
        }
        
        .btn-glass:hover {
            background: rgba(70, 90, 126, 0.35);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            color: white;
            transform: translateY(-2px);
        }
        
        .glass-menu {
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            border-radius: 12px;
            box-shadow: var(--glass-shadow);
            padding: 8px 0;
            margin-top: 10px;
        }
        
        .glass-menu .dropdown-item {
            color: var(--text-secondary);
            padding: 10px 20px;
            transition: var(--transition);
        }
        
        .glass-menu .dropdown-item:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-primary);
        }
        
        .glass-menu .dropdown-item.active {
            background: rgba(30, 136, 229, 0.3);
            color: var(--text-primary);
        }
        
        .glass-menu .dropdown-divider {
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            margin: 6px 0;
        }
        
        /* ===== NAVIGATION A SCHEDE ANNUALI ===== */
        .timeline-year-tabs {
            position: relative;
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            border-radius: var(--border-radius);
            box-shadow: var(--glass-shadow);
            margin-bottom: 2.5rem;
            padding: 0.8rem;
            opacity: 0;
            animation: fadeInUp 0.8s ease-out 0.5s forwards;
            overflow: hidden;
        }
        
        #floating-compass {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            width: 30px;
            height: 30px;
            z-index: 1;
            animation: rotateSlowly 15s infinite linear;
        }
        
        #floating-compass img {
            width: 100%;
            height: 100%;
            opacity: 0.5;
            filter: brightness(1.5);
        }
        
        @@keyframes rotateSlowly {
            from { transform: translateY(-50%) rotate(0deg); }
            to { transform: translateY(-50%) rotate(360deg); }
        }
        
        .timeline-scroller {
            display: flex;
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--primary) var(--surface);
            padding: 0.5rem 0.5rem;
            gap: 14px;
        }
        
        .timeline-scroller::-webkit-scrollbar {
            height: 5px;
        }
        
        .timeline-scroller::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }
        
        .timeline-scroller::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 10px;
        }
        
        .year-tab {
            position: relative;
            background: var(--surface-light);
            border: none;
            font-size: 1.15rem;
            padding: 0.8rem 2rem;
            margin-right: 0.25rem;
            border-radius: 50px;
            color: var(--text-secondary);
            font-weight: 600;
            transition: var(--transition);
            white-space: nowrap;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.2), 0 4px 10px rgba(0, 0, 0, 0.15);
            overflow: hidden;
        }
        
        .year-tab:hover {
            color: white;
            background: var(--surface);
            transform: translateY(-3px);
        }
        
        .year-tab.active {
            background: var(--primary-gradient);
            color: white;
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
        }
        
        .year-tab .year-text {
            position: relative;
            z-index: 2;
        }
        
        .year-tab .year-glow {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 70%);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .year-tab:hover .year-glow,
        .year-tab.active .year-glow {
            opacity: 1;
        }
        
        /* ===== CONTENUTO TIMELINE ===== */
        /* Modifica al contenitore principale per rimuovere il background bianco */
        .timeline-content {
            position: relative;
            padding: 2rem 0;
            background: transparent; /* Rimuove sfondo bianco */
            border-radius: var(--card-border-radius);
            backdrop-filter: none; /* Rimuove l'effetto blur */
            border: none; /* Rimuove il bordo */
        }

        /* Aggiustamento ai colori del testo per renderli leggibili su sfondo scuro */
        .timeline-event:before {
            background-color: var(--primary-light); /* Punto più luminoso */
            box-shadow: 0 0 10px var(--primary-light); /* Effetto glow */
        }

        .event-date span {
            background: var(--glass-background); /* Sfondo vetro */
            color: var(--text-primary); /* Testo bianco */
        }

        .month-name {
            color: var(--text-primary); /* Testo bianco */
        }

        /* Adattamento agli elementi della timeline per sfondo scuro */
        .year-bubble {
            box-shadow: 0 10px 25px rgba(26, 115, 232, 0.6); /* Glow più intenso */
        }

        .timeline-line {
            background: linear-gradient(to bottom, var(--primary), rgba(30, 136, 229, 0.2));
        }

        .dotted-path:before {
            background-image: linear-gradient(to bottom, var(--primary-light) 50%, transparent 0%); /* Punti più luminosi */
            opacity: 0.8;
        }

        /* Miglioramento dell'effetto glassmorphism su sfondo scuro */
        .glass-effect,
        .btn-glass,
        .glass-menu,
        .timeline-year-tabs,
        .month-marker .month-name {
            background: rgba(37, 53, 85, 0.4) !important; /* Più scuro e trasparente */
            backdrop-filter: blur(12px) !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
        }

        /* Rimozione sfondo bianco dai contenitori principali */
        .timeline-year,
        .timeline-month,
        .timeline-event,
        .timeline-events {
            background: transparent;
        }

        /* Stile card evento con effetto glassmorphism */
        .event-card {
            background: rgba(37, 53, 85, 0.5); /* Semitrasparente */
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Adattamento bottoni e controlli per sfondo scuro */
        .btn-neo-primary {
            box-shadow: 0 8px 20px rgba(25, 118, 210, 0.5);
        }

        .btn-neo-secondary {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Effetto glow per indicatori temporali */
        .month-dot {
            box-shadow: 0 0 15px var(--primary-light);
        }

        /* Effetto di transizione più morbido tra anni */
        .timeline-year {
            margin-bottom: 3rem;
            padding: 1rem;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        /* Effetto vignette per migliorare la profondità */
        .universe-container:after {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient( circle at center, transparent 40%, rgba(0, 0, 0, 0.4) 100% );
            pointer-events: none;
            z-index: -1;
        }


        
        /* Aereo volante */
        #flying-plane {
            position: absolute;
            top: 0;
            right: 20px;
            z-index: 1;
            color: var(--accent-light);
            font-size: 1.8rem;
            text-shadow: 0 0 10px var(--accent);
            opacity: 0.8;
        }
        
        #flying-plane i {
            transform: rotate(45deg);
        }
        
        /* Percorso puntinato */
        .dotted-path-container {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 40px;
            width: 4px;
            z-index: 1;
        }
        
        .dotted-path {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            width: 100%;
            background: transparent;
            overflow: hidden;
        }
        
        .dotted-path:before {
            content: "";
            position: absolute;
            top: 0;
            left: calc(50% - 2px);
            width: 4px;
            height: 100%;
            background-image: linear-gradient(to bottom, 
                var(--primary) 50%, transparent 0%);
            background-position: right;
            background-size: 4px 32px;
            background-repeat: repeat-y;
        }
        
        /* Anno bubble e marker */
        .timeline-year {
            position: relative;
            margin-bottom: 4rem;
        }
        
        .year-marker {
            position: relative;
            margin-bottom: 2.5rem;
            z-index: 2;
        }
        
        .year-line {
            position: absolute;
            top: 50%;
            left: -9999px;
            right: 40px;
            height: 2px;
            background: linear-gradient(to right, transparent, rgba(255,255,255,0.2));
            z-index: 1;
        }
        
        .year-bubble {
            position: relative;
            width: 80px;
            height: 80px;
            margin-left: 0;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 10px 25px rgba(26, 115, 232, 0.5);
            z-index: 3;
        }
        
        .year-bubble span {
            color: white;
            font-size: 1.4rem;
            font-weight: 700;
            letter-spacing: -0.5px;
            text-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 4;
        }
        
        .ring {
            position: absolute;
            top: -8px;
            left: -8px;
            width: calc(100% + 16px);
            height: calc(100% + 16px);
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
            box-sizing: border-box;
        }
        
        .ring-pulse {
            position: absolute;
            top: -16px;
            left: -16px;
            width: calc(100% + 32px);
            height: calc(100% + 32px);
            border-radius: 50%;
            border: 1px solid rgba(255, 255, 255, 0.15);
            box-sizing: border-box;
            animation: pulse-ring 2s infinite;
        }
        
        @@keyframes pulse-ring {
            0% { transform: scale(1); opacity: 0.15; }
            50% { transform: scale(1.1); opacity: 0.3; }
            100% { transform: scale(1); opacity: 0.15; }
        }
        
        /* Eventi timeline */
        .timeline-events-wrapper {
            perspective: 1000px;
        }
        
        .timeline-events {
            position: relative;
            padding-left: 80px;
        }
        
        .timeline-month {
            position: relative;
            margin-bottom: 3rem;
        }
        
        .month-marker {
            position: relative;
            margin-bottom: 1.5rem;
        }
        
        .month-dot {
            position: absolute;
            width: 12px;
            height: 12px;
            left: -46px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--primary-light);
            border: 2px solid white;
            border-radius: 50%;
            box-shadow: 0 0 10px rgba(100, 181, 246, 0.6);
            z-index: 2;
        }
        
        .month-name {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--text-primary);
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            padding: 6px 20px;
            border-radius: 50px;
            border: var(--glass-border);
            box-shadow: var(--glass-shadow);
            display: inline-block;
        }
        
        /* Evento singolo */
        .timeline-event {
            position: relative;
            margin-bottom: 2.5rem;
            perspective: 1000px;
        }
        
        .timeline-event:before {
            content: '';
            position: absolute;
            left: -40px;
            top: 30px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: white;
            box-shadow: 0 0 8px rgba(255,255,255,0.8);
            z-index: 2;
            opacity: 0.6;
        }
        
        .event-date {
            margin-bottom: 0.8rem;
            display: flex;
            align-items: center;
        }
        
        .event-date span {
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--text-secondary);
            border: var(--glass-border);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            letter-spacing: 0.5px;
        }
        
        .event-card {
            position: relative;
            background: var(--surface);
            border-radius: var(--card-border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow-strong);
            transition: var(--transition);
            display: flex;
            min-height: 200px;
            transform-origin: center left;
            transform-style: preserve-3d;
        }
        
        .event-card:hover {
            transform: translateY(-5px) rotateX(2deg) rotateY(2deg);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);
        }
        
        .card-glare {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(
                circle at var(--mouse-x, 0) var(--mouse-y, 0),
                rgba(255, 255, 255, 0.06) 0%,
                rgba(255, 255, 255, 0) 60%
            );
            pointer-events: none;
            z-index: 10;
            transition: opacity 0.2s;
            opacity: 0;
        }
        
        .event-card:hover .card-glare {
            opacity: 1;
        }
        
        .event-image {
            width: 200px;
            min-width: 200px;
            position: relative;
            overflow: hidden;
        }
        
        .image-wrapper {
            width: 100%;
            height: 100%;
            overflow: hidden;
            transform: scale(1);
            transition: transform 1s ease;
        }
        
        .event-card:hover .image-wrapper {
            transform: scale(1.1);
        }
        
        .event-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            filter: brightness(0.85);
            transition: filter 0.5s ease;
        }
        
        .event-card:hover .event-image img {
            filter: brightness(1);
        }
        
        .country-flag {
            position: absolute;
            top: 12px;
            left: 12px;
            width: 32px;
            height: 22px;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: var(--box-shadow-light);
            border: 2px solid rgba(255, 255, 255, 0.8);
            z-index: 2;
        }
        
        .country-flag img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .geo-tag {
            position: absolute;
            right: 10px;
            bottom: 10px;
            color: var(--accent);
            font-size: 1.5rem;
            text-shadow: 0 0 8px rgba(255, 109, 0, 0.7);
            animation: pulse 2s infinite;
        }
        
        .event-content {
            flex: 1;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
        }
        
        .event-content h3 {
            font-size: 1.6rem;
            margin-bottom: 0.7rem;
            color: var(--text-primary);
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        
        .event-meta {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1.2rem;
        }
        
        .country-name {
            color: var(--text-hint);
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        /* Badge continente con colori personalizzati */
        .continent-badge {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            font-size: 0.85rem;
            padding: 4px 12px;
            border-radius: 50px;
            font-weight: 500;
            background-color: var(--surface-light);
            color: var(--text-secondary);
        }
        
        .continent-badge[data-continent="europa"] {
            background-color: rgba(66, 165, 245, 0.2);
            color: var(--europa);
        }
        
        .continent-badge[data-continent="asia"] {
            background-color: rgba(236, 64, 122, 0.2);
            color: var(--asia);
        }
        
        .continent-badge[data-continent="africa"] {
            background-color: rgba(171, 71, 188, 0.2);
            color: var(--africa);
        }
        
        .continent-badge[data-continent="nord america"] {
            background-color: rgba(102, 187, 106, 0.2);
            color: var(--nord-america);
        }
        
        .continent-badge[data-continent="sud america"] {
            background-color: rgba(255, 183, 77, 0.2);
            color: var(--sud-america);
        }
        
        .continent-badge[data-continent="oceania"] {
            background-color: rgba(77, 208, 225, 0.2);
            color: var(--oceania);
        }
        
        /* Travel metrics section */
        .travel-metrics {
            display: flex;
            gap: 20px;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }
        
        .metric {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(255,255,255,0.05);
            padding: 8px 16px;
            border-radius: 10px;
            min-width: 80px;
        }
        
        .metric i {
            color: var(--accent-light);
            font-size: 1rem;
            margin-bottom: 4px;
        }
        
        .metric span {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        
        /* Bottoni azioni */
        .event-actions {
            display: flex;
            gap: 10px;
            margin-top: auto;
            flex-wrap: wrap;
        }
        
        .btn-neo-primary {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 8px 15px rgba(25, 118, 210, 0.3);
            transition: var(--transition);
            text-decoration: none;
        }
        
        .btn-neo-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 20px rgba(25, 118, 210, 0.4);
            color: white;
        }
        
        .btn-neo-secondary {
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            color: var(--text-primary);
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            box-shadow: var(--glass-shadow);
            transition: var(--transition);
        }
        
        .btn-neo-secondary:hover {
            background: rgba(255, 255, 255, 0.15);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 12px 20px rgba(0, 0, 0, 0.25);
        }
        
        .btn-circle {
            width: 40px;
            height: 40px;
            padding: 0;
            border-radius: 50%;
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            color: var(--text-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--glass-shadow);
            transition: var(--transition);
        }
        
        .btn-circle:hover {
            background: var(--accent-gradient);
            color: white;
            transform: rotate(15deg);
            box-shadow: 0 8px 15px rgba(255, 109, 0, 0.3);
        }
        
        .hover-float:hover {
            transform: translateY(-5px);
        }
        
        /* Modal personalizzato */
        .custom-modal .modal-content {
            border-radius: 20px;
            border: none;
            box-shadow: 0 25px 50px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        
        .glass-effect {
            background-color: var(--surface);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
        }
        
        .modal-header {
            border-bottom-color: rgba(255,255,255,0.1);
            padding: 1.5rem;
        }
        
        .modal-footer {
            border-top-color: rgba(255,255,255,0.1);
            padding: 1.5rem;
        }
        
        .city-info {
            display: flex;
            gap: 15px;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .city-image {
            width: 70px;
            height: 70px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .city-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .city-details h6 {
            font-size: 1.2rem;
            margin-bottom: 0.3rem;
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .city-details p {
            color: var(--text-hint);
            margin-bottom: 0;
        }
        
        .neo-input {
            background-color: var(--background-light);
            border: 1px solid rgba(255,255,255,0.1);
            color: var(--text-primary);
            border-radius: 10px;
            padding: 12px;
            transition: var(--transition);
        }
        
        .neo-input:focus {
            background-color: var(--background-light);
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(30, 136, 229, 0.25);
            color: var(--text-primary);
        }
        
        .form-label {
            color: var(--text-secondary);
            font-weight: 500;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }
        
        .date-input-wrapper {
            position: relative;
        }
        
        .memory-gallery {
            margin-top: 1rem;
            border-top: 1px solid rgba(255,255,255,0.1);
            padding-top: 1rem;
        }
        
        .gallery-title {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }
        
        .memory-photos {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .add-photo {
            width: 80px;
            height: 80px;
            border-radius: 10px;
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .add-photo:hover {
            background: rgba(255,255,255,0.15);
            transform: scale(1.05);
        }
        
        .add-photo i {
            font-size: 1.8rem;
            color: var(--text-hint);
        }
        
        /* ===== STATO VUOTO ===== */
        .empty-timeline {
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            border-radius: var(--border-radius);
            box-shadow: var(--glass-shadow);
            padding: 4rem 2rem;
            text-align: center;
            opacity: 0;
            animation: fadeIn 1s ease-out 0.5s forwards;
        }
        
        .empty-globe {
            position: relative;
            width: 180px;
            height: 180px;
            margin: 0 auto 2rem;
        }
        
        .globe {
            position: absolute;
            width: 100%;
            height: 100%;
            margin: 0 auto;
            perspective: 800px;
        }

        .globe-sphere {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle at 30% 30%, #1976d2, #101a34);
            background-size: cover;
            box-shadow: inset 0 0 40px rgba(0,0,0,0.6), 0 0 20px rgba(30, 136, 229, 0.4);
            transform-style: preserve-3d;
            animation: rotateGlobe 20s linear infinite;
        }
        
        @@keyframes rotateGlobe {
            0% { transform: rotateY(0deg); }
            100% { transform: rotateY(360deg); }
        }
        
        .globe-worldmap {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: url('/images/world-map-dots.png');
            background-size: 400px;
            opacity: 0.3;
            mix-blend-mode: screen;
        }
        
        .globe-outer-shadow {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            box-shadow: -5px 5px 15px rgba(0,0,0,0.3);
        }
        
        .globe-inner-shadow {
            position: absolute;
            width: 100%; 
            height: 100%;
            border-radius: 50%;
            box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
        }
        
        .globe-stand {
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 40%;
            height: 10px;
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
        }
        
        .pin-container {
            position: absolute;
            top: 40%;
            left: 60%;
            animation: pinPulse 3s infinite;
        }
        
        .pin {
            width: 10px;
            height: 10px;
            background-color: var(--accent);
            border-radius: 50%;
            position: relative;
            box-shadow: 0 0 10px var(--accent);
        }
        
        .pin:after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            width: 10px;
            height: 10px;
            background-color: var(--accent);
            clip-path: polygon(50% 100%, 0 0, 100% 0);
        }
        
        .pin-shadow {
            position: absolute;
            top: 110%;
            left: 50%;
            transform: translateX(-50%);
            width: 8px;
            height: 3px;
            background: rgba(0,0,0,0.3);
            border-radius: 50%;
            filter: blur(1px);
        }
        
        @@keyframes pinPulse {
            0%, 100% { transform: scale(1) translateY(0); }
            50% { transform: scale(1.2) translateY(-3px); }
        }
        
        .empty-timeline h3 {
            color: var(--text-primary);
            font-size: 2rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        
        .empty-timeline p {
            color: var(--text-hint);
            margin-bottom: 2rem;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
            font-size: 1.1rem;
        }
        
        /* Progress indicator animato */
        .journey-progress {
            position: fixed;
            right: 30px;
            bottom: 30px;
            z-index: 10;
        }
        
        .journey-indicator {
            width: 60px;
            height: 60px;
            background: var(--glass-background);
            backdrop-filter: var(--glass-backdrop);
            -webkit-backdrop-filter: var(--glass-backdrop);
            border: var(--glass-border);
            border-radius: 50%;
            box-shadow: var(--glass-shadow);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .journey-indicator:hover {
            transform: scale(1.1);
            box-shadow: 0 10px 20px rgba(0,0,0,0.3);
        }
        
        .compass-rose {
            width: 40px;
            height: 40px;
            position: relative;
        }
        
        .compass-face {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle at center, var(--surface-light), var(--surface));
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        
        .compass-needle {
            position: absolute;
            width: 2px;
            height: 25px;
            background: linear-gradient(to bottom, var(--accent), var(--primary));
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            transform-origin: center bottom;
            animation: compassRotate 4s ease-in-out infinite alternate;
        }
        
        .compass-needle:after {
            content: '';
            position: absolute;
            width: 6px;
            height: 6px;
            background: var(--accent);
            border-radius: 50%;
            top: -2px;
            left: -2px;
        }
        
        @@keyframes compassRotate {
            0% { transform: translate(-50%, -50%) rotate(-20deg); }
            100% { transform: translate(-50%, -50%) rotate(20deg); }
        }
        
        /* ===== ANIMAZIONI ===== */
        .animated-element {
            opacity: 0;
        }
        
        .animated-section {
            opacity: 0;
            transform: translateY(30px);
        }
        
        .animated-card {
            opacity: 0;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @@keyframes fadeInUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @@keyframes fadeInRight {
            from { opacity: 0; transform: translateX(30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        /* ===== RESPONSIVE ===== */
        @@media (max-width: 992px) {
            .timeline-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1.5rem;
            }
            
            .timeline-controls {
                width: 100%;
                justify-content: flex-end;
            }
            
            .dotted-path-container {
                left: 30px;
            }
            
            .timeline-events {
                padding-left: 50px;
            }
            
            .year-bubble {
                width: 70px;
                height: 70px;
            }
            
            .month-dot {
                left: -36px;
            }
            
            .timeline-event:before {
                left: -30px;
            }
            
            .journey-progress {
                bottom: 20px;
                right: 20px;
            }
        }
        
        @@media (max-width: 768px) {
            .event-card {
                flex-direction: column;
            }
            
            .event-image {
                width: 100%;
                min-width: 100%;
                height: 200px;
            }
            
            .dotted-path-container {
                left: 20px;
            }
            
            .timeline-events {
                padding-left: 30px;
            }
            
            .month-dot {
                left: -26px;
            }
            
            .timeline-event:before {
                left: -20px;
            }
            
            .travel-metrics {
                gap: 10px;
            }
            
            .metric {
                padding: 6px 12px;
            }
        }
        
        @@media (max-width: 576px) {
            .timeline-title {
                gap: 1rem;
            }
            
            .title-icon-wrapper {
                width: 60px;
                height: 60px;
            }
            
            .title-icon-wrapper i {
                font-size: 1.8rem;
            }
            
            .timeline-title h1 {
                font-size: 1.8rem;
            }
            
            .timeline-controls {
                gap: 0.5rem;
            }
            
            .btn-glass {
                padding: 8px 12px;
                font-size: 0.9rem;
            }
            
            .dotted-path-container {
                left: 15px;
            }
            
            .timeline-events {
                padding-left: 25px;
            }
            
            .year-bubble {
                width: 60px;
                height: 60px;
            }
            
            .year-bubble span {
                font-size: 1.2rem;
            }
            
            .month-dot {
                left: -21px;
            }
            
            .timeline-event:before {
                left: -15px;
            }
            
            .event-content h3 {
                font-size: 1.4rem;
            }
            
            .event-actions {
                flex-direction: column;
                gap: 8px;
                align-items: flex-start;
            }
            
            .btn-neo-primary,
            .btn-neo-secondary {
                width: 100%;
                justify-content: center;
            }
            
            .journey-progress {
                bottom: 15px;
                right: 15px;
            }
            
            .journey-indicator {
                width: 50px;
                height: 50px;
            }
            
            .compass-rose {
                width: 30px;
                height: 30px;
            }
        }
    </style>
}


            

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Inizializza AOS (Animate On Scroll)
            AOS.init({
                duration: 800,
                offset: 100,
                once: false,
                mirror: true,
                easing: 'ease-out-cubic'
            });
            
            // Genera stelle animate casuali
            createStars();
            
            // Attiva il primo anno per default
            setTimeout(() => {
                const firstYearTab = document.querySelector('.year-tab');
                if (firstYearTab) {
                    firstYearTab.classList.add('active');
                    scrollToYear(firstYearTab.getAttribute('data-year'));
                }
            }, 500);
            
            // Gestione effetto glare sulle card
            document.querySelectorAll('.event-card').forEach(card => {
                card.addEventListener('mousemove', handleGlareEffect);
                card.addEventListener('mouseleave', function(e) {
                    const glare = this.querySelector('.card-glare');
                    if (glare) glare.style.opacity = "0";
                });
            });
            
            // Aereo volante che segue lo scroll
            window.addEventListener('scroll', handleFlyingPlane);
            
            // Gestione tab degli anni
            document.querySelectorAll('.year-tab').forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Rimuovi classe active da tutti i tab
                    document.querySelectorAll('.year-tab').forEach(t => t.classList.remove('active'));
                    
                    // Aggiungi classe active a questo tab
                    this.classList.add('active');
                    
                    // Scorri alla sezione dell'anno
                    const year = this.getAttribute('data-year');
                    scrollToYear(year);
                });
            });
            
            // Gestione filtro continenti
            document.querySelectorAll('.filter-option').forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Rimuovi active da tutte le opzioni
                    document.querySelectorAll('.filter-option').forEach(o => o.classList.remove('active'));
                    
                    // Aggiungi active a questa opzione
                    this.classList.add('active');
                    
                    // Applica il filtro
                    const filter = this.getAttribute('data-filter');
                    filterEvents(filter);
                    
                    // Aggiorna il testo del dropdown
                    const dropdownButton = document.getElementById('filterDropdown');
                    if (dropdownButton) {
                        dropdownButton.innerHTML = `<i class="fas fa-filter"></i> ${this.textContent.trim()}`;
                    }
                });
            });
            


            // Assicura che i dropdown siano posizionati correttamente
document.addEventListener('DOMContentLoaded', function() {
  const dropdowns = document.querySelectorAll('.dropdown');
  
  dropdowns.forEach(dropdown => {
    const button = dropdown.querySelector('.dropdown-toggle');
    const menu = dropdown.querySelector('.dropdown-menu');
    
    if (button && menu) {
      button.addEventListener('click', function() {
        // Forza il ricalcolo della posizione
        setTimeout(() => {
          const buttonRect = button.getBoundingClientRect();
          menu.style.top = (buttonRect.bottom + window.scrollY) + 'px';
          menu.style.left = (buttonRect.left + window.scrollX) + 'px';
          menu.style.minWidth = buttonRect.width + 'px';
          menu.style.zIndex = '1100';
        }, 0);
      });
    }
  });
});


            // Gestione ordinamento
            document.querySelectorAll('.sort-option').forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Rimuovi active da tutte le opzioni
                    document.querySelectorAll('.sort-option').forEach(o => o.classList.remove('active'));
                    
                    // Aggiungi active a questa opzione
                    this.classList.add('active');
                    
                    // Applica l'ordinamento
                    const sort = this.getAttribute('data-sort');
                    sortEvents(sort);
                    
                    // Aggiorna il testo del dropdown
                    const dropdownButton = document.getElementById('sortDropdown');
                    if (dropdownButton) {
                        dropdownButton.innerHTML = `<i class="fas fa-sort"></i> ${this.textContent.trim()}`;
                    }
                });
            });
            
            // Gestione progress indicator
            const progressIndicator = document.querySelector('.journey-indicator');
            if (progressIndicator) {
                progressIndicator.addEventListener('click', function() {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            }
            
            // Animazioni sezioni all'entrata nel viewport
            animateSections();
            
            // Evidenzia elemento se presente nell'URL
            highlightFromUrl();
        });
        
        // ===== FUNZIONI HELPER =====
        
        // Creazione stelle animate
        function createStars() {
            const starsContainer = document.getElementById('stars-container');
            if (!starsContainer) return;
            
            const starsCount = Math.floor(window.innerWidth / 4);
            
            for (let i = 0; i < starsCount; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                
                // Posizione casuale
                const x = Math.random() * 100;
                const y = Math.random() * 100;
                star.style.left = x + '%';
                star.style.top = y + '%';
                
                // Dimensione casuale
                const size = Math.random() * 2.5;
                star.style.width = size + 'px';
                star.style.height = size + 'px';
                
                // Luminosità casuale
                const opacity = Math.random() * 0.8 + 0.2;
                star.style.opacity = opacity;
                
                // Ritardo animazione casuale
                const delay = Math.random() * 4;
                star.style.animationDelay = delay + 's';
                
                starsContainer.appendChild(star);
            }
        }
        
        // Gestione effetto glare sulle card
        function handleGlareEffect(e) {
            const card = this;
            const glare = card.querySelector('.card-glare');
            if (!glare) return;
            
            const rect = card.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const mouseX = Math.floor((x / rect.width) * 100);
            const mouseY = Math.floor((y / rect.height) * 100);
            
            glare.style.setProperty('--mouse-x', mouseX + '%');
            glare.style.setProperty('--mouse-y', mouseY + '%');
            glare.style.opacity = "1";
        }
        
        // Aereo volante che segue lo scroll
        function handleFlyingPlane() {
            const plane = document.getElementById('flying-plane');
            if (!plane) return;
            
            const scrollY = window.scrollY || window.pageYOffset;
            const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
            const scrollPercentage = (scrollY / documentHeight) * 100;
            
            // Posiziona l'aereo in base allo scroll
            const planeY = Math.min(Math.max(scrollPercentage, 5), 95);
            plane.style.top = planeY + '%';
            
            // Effetto oscillazione
            const oscillation = Math.sin(scrollY * 0.01) * 15;
            plane.style.transform = `translateX(${oscillation}px)`;
            
            // Effetto turbulenza
            if (scrollY > lastScrollPosition) {
                plane.style.animation = 'turbulence 0.2s ease-in-out';
                setTimeout(() => {
                    plane.style.animation = '';
                }, 200);
            }
            
            lastScrollPosition = scrollY;
        }
        let lastScrollPosition = 0;
        
        // Scroll to year section
        function scrollToYear(year) {
            const yearSection = document.getElementById(`year-${year}`);
            if (yearSection) {
                yearSection.scrollIntoView({ behavior: 'smooth' });
            }
        }
        
        // Filtra eventi per continente
        function filterEvents(filter) {
            const events = document.querySelectorAll('.timeline-event');
            events.forEach(event => {
                if (filter === 'all') {
                    event.style.display = 'block';
                    setTimeout(() => {
                        event.style.opacity = '1';
                    }, 100);
                } else {
                    const continent = event.getAttribute('data-continent');
                    if (continent === filter) {
                        event.style.display = 'block';
                        setTimeout(() => {
                            event.style.opacity = '1';
                        }, 100);
                    } else {
                        event.style.opacity = '0';
                        setTimeout(() => {
                            event.style.display = 'none';
                        }, 300);
                    }
                }
            });
            
            // Re-inizializza AOS
            setTimeout(() => {
                AOS.refresh();
            }, 500);
        }
        
        // Ordina eventi
        function sortEvents(sort) {
            const yearSections = document.querySelectorAll('.timeline-year');
            const yearsContainer = document.querySelector('.timeline-content');
            
            const yearsArray = Array.from(yearSections);
            
            if (sort === 'newest') {
                yearsArray.sort((a, b) => {
                    const yearA = parseInt(a.id.replace('year-', ''));
                    const yearB = parseInt(b.id.replace('year-', ''));
                    return yearB - yearA;
                });
            } else {
                yearsArray.sort((a, b) => {
                    const yearA = parseInt(a.id.replace('year-', ''));
                    const yearB = parseInt(b.id.replace('year-', ''));
                    return yearA - yearB;
                });
            }
            
            // Rimuovi elementi esistenti
            yearSections.forEach(section => section.remove());
            
            // Aggiungi elementi ordinati
            yearsArray.forEach(section => {
                yearsContainer.appendChild(section);
            });
            
            // Re-inizializza AOS
            setTimeout(() => {
                AOS.refresh();
            }, 500);
        }
        
        // Animazioni sezioni
        function animateSections() {
            const sections = document.querySelectorAll('.animated-section');
            
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                        observer.unobserve(entry.target);
                    }
                });
            }, {
                threshold: 0.1
            });
            
            sections.forEach(section => {
                section.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
                observer.observe(section);
            });
        }
        
        // Evidenzia elemento da URL
        function highlightFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            const highlightId = urlParams.get('highlight');
            
            if (highlightId) {
                const eventToHighlight = document.querySelector(`.timeline-event[data-visit-id="${highlightId}"]`);
                if (eventToHighlight) {
                    setTimeout(() => {
                        eventToHighlight.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        eventToHighlight.classList.add('highlight-event');
                        
                        // Nascondi l'evidenziazione dopo un po'
                        setTimeout(() => {
                            eventToHighlight.classList.remove('highlight-event');
                        }, 3000);
                    }, 1000);
                }
            }
        }
        

        document.addEventListener('DOMContentLoaded', function() {
            // Attiva tab dell'anno quando viene scrollato in vista
            const yearTabs = document.querySelectorAll('.year-tab');
            const yearSections = document.querySelectorAll('.timeline-year');
            
            // Smooth scroll quando si clicca su un anno
            yearTabs.forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('href');
                    const targetElement = document.querySelector(targetId);
                    
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 100,
                            behavior: 'smooth'
                        });
                        
                        // Evidenzia il tab
                        yearTabs.forEach(t => t.classList.remove('active'));
                        this.classList.add('active');
                    }
                });
            });
            
            // Scroll spy per evidenziare l'anno corrente durante lo scorrimento
            window.addEventListener('scroll', function() {
                const scrollPosition = window.scrollY + 150;
                
                // Trova la sezione anno visibile
                let activeYear = null;
                yearSections.forEach(section => {
                    if (section.offsetTop <= scrollPosition && 
                        section.offsetTop + section.offsetHeight > scrollPosition) {
                        activeYear = section.getAttribute('id');
                    }
                });
                
                if (activeYear) {
                    // Aggiorna il tab attivo
                    yearTabs.forEach(tab => {
                        tab.classList.remove('active');
                        if (tab.getAttribute('href') === '#' + activeYear) {
                            tab.classList.add('active');
                        }
                    });
                }
            });
            
            // Filtri
            const filterOptions = document.querySelectorAll('.filter-option');
            filterOptions.forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    filterOptions.forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                    
                    const filter = this.dataset.filter;
                    filterEvents(filter);
                });
            });
            
            // Ordinamento
            const sortOptions = document.querySelectorAll('.sort-option');
            sortOptions.forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    sortOptions.forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                    
                    const sortBy = this.dataset.sort;
                    sortEvents(sortBy);
                });
            });
            
            // Funzioni
            function filterEvents(filter) {
                const events = document.querySelectorAll('.timeline-event');
                
                events.forEach(event => {
                    if (filter === 'all' || event.dataset.continent === filter) {
                        event.style.display = '';
                    } else {
                        event.style.display = 'none';
                    }
                });
                
                // Nascondi i mesi senza eventi visibili
                document.querySelectorAll('.timeline-month').forEach(month => {
                    const hasVisibleEvents = Array.from(month.querySelectorAll('.timeline-event'))
                        .some(event => event.style.display !== 'none');
                    
                    month.style.display = hasVisibleEvents ? '' : 'none';
                });
                
                // Se non ci sono eventi visibili in un anno, mostra un messaggio
                document.querySelectorAll('.timeline-year').forEach(year => {
                    const hasVisibleEvents = Array.from(year.querySelectorAll('.timeline-event'))
                        .some(event => event.style.display !== 'none');
                    
                    if (!hasVisibleEvents) {
                        // Aggiungi messaggio "Nessun evento" se non esiste già
                        if (!year.querySelector('.empty-year-message')) {
                            const emptyMessage = document.createElement('div');
                            emptyMessage.className = 'empty-year-message';
                            emptyMessage.style.padding = '20px';
                            emptyMessage.style.textAlign = 'center';
                            emptyMessage.style.backgroundColor = '#f8f9fa';
                            emptyMessage.style.borderRadius = '8px';
                            emptyMessage.style.margin = '20px 0';
                            emptyMessage.innerHTML = '<p>Nessun viaggio in questo anno con i filtri applicati</p>';
                            year.querySelector('.timeline-events').appendChild(emptyMessage);
                        }
                    } else {
                        // Rimuovi messaggio "Nessun evento" se esiste
                        const emptyMessage = year.querySelector('.empty-year-message');
                        if (emptyMessage) {
                            emptyMessage.remove();
                        }
                    }
                });
            }
            
            function sortEvents(sortBy) {
                const yearSections = document.querySelectorAll('.timeline-year');
                
                if (sortBy === 'oldest') {
                    // Riordina gli anni (dal più vecchio al più recente)
                    const timelineContent = document.querySelector('.timeline-content');
                    const years = Array.from(yearSections);
                    
                    years.sort((a, b) => {
                        const aYear = parseInt(a.id.replace('year-', ''));
                        const bYear = parseInt(b.id.replace('year-', ''));
                        return aYear - bYear;
                    });
                    
                    // Rimuovi la linea verticale durante il riordinamento
                    const timelineLine = document.querySelector('.timeline-line');
                    if (timelineLine) timelineLine.remove();
                    
                    // Riappendi gli anni ordinati
                    years.forEach(year => {
                        timelineContent.appendChild(year);
                    });
                    
                    // Ricrea la linea verticale
                    const newLine = document.createElement('div');
                    newLine.className = 'timeline-line';
                    timelineContent.insertBefore(newLine, timelineContent.firstChild);
                    
                } else {
                    // Riordina gli anni (dal più recente al più vecchio)
                    const timelineContent = document.querySelector('.timeline-content');
                    const years = Array.from(yearSections);
                    
                    years.sort((a, b) => {
                        const aYear = parseInt(a.id.replace('year-', ''));
                        const bYear = parseInt(b.id.replace('year-', ''));
                        return bYear - aYear;
                    });
                    
                    // Rimuovi la linea verticale durante il riordinamento
                    const timelineLine = document.querySelector('.timeline-line');
                    if (timelineLine) timelineLine.remove();
                    
                    // Riappendi gli anni ordinati
                    years.forEach(year => {
                        timelineContent.appendChild(year);
                    });
                    
                    // Ricrea la linea verticale
                    const newLine = document.createElement('div');
                    newLine.className = 'timeline-line';
                    timelineContent.insertBefore(newLine, timelineContent.firstChild);
                }
                
                // Riordina anche i mesi all'interno di ogni anno
                yearSections.forEach(yearSection => {
                    const months = Array.from(yearSection.querySelectorAll('.timeline-month'));
                    const events = yearSection.querySelector('.timeline-events');
                    
                    if (sortBy === 'oldest') {
                        months.sort((a, b) => {
                            return parseInt(a.dataset.month) - parseInt(b.dataset.month);
                        });
                    } else {
                        months.sort((a, b) => {
                            return parseInt(b.dataset.month) - parseInt(a.dataset.month);
                        });
                    }
                    
                    // Riappendi i mesi ordinati
                    months.forEach(month => {
                        events.appendChild(month);
                    });
                });
            }
            
            // Controlla se c'è un parametro "highlight" nell'URL
            const urlParams = new URLSearchParams(window.location.search);
            const highlightParam = urlParams.get('highlight');
            if (highlightParam) {
                setTimeout(() => {
                    const highlightElement = document.querySelector(`[data-visit-id="${highlightParam}"]`);
                    if (highlightElement) {
                        highlightElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        highlightElement.classList.add('highlight-event');
                        
                        // Evidenzia anche il tab dell'anno corrispondente
                        const yearSection = highlightElement.closest('.timeline-year');
                        if (yearSection) {
                            const yearId = yearSection.id;
                            const yearTab = document.querySelector(`[href="#${yearId}"]`);
                            if (yearTab) {
                                yearTabs.forEach(t => t.classList.remove('active'));
                                yearTab.classList.add('active');
                            }
                        }
                    }
                }, 500);
            }
        });
    </script>
    }
    @functions {
    string GetContinentIcon(string continent) {
        if (string.IsNullOrEmpty(continent)) return "fas fa-globe";
        
        switch (continent.ToLower()) {
            case "europa": return "fas fa-landmark";
            case "asia": return "fas fa-dragon";
            case "africa": return "fas fa-tree";
            case "nord america": return "fas fa-mountain";
            case "sud america": return "fas fa-umbrella-beach";
            case "oceania": return "fas fa-water";
            default: return "fas fa-globe";
        }
    }
}