@page
@model DreamMapModel
@{
    ViewData["Title"] = "La Mappa dei Tuoi Sogni";
}
@{
    // Questo è necessario per far funzionare le chiamate AJAX ai handler
}
@Html.AntiForgeryToken()

<script>
    // Aggiungi questa funzione globale per ottenere il token
    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
</script>

<!-- resto del contenuto HTML -->
<div class="dreammap-container">
    <div class="dreammap-sidebar">
        <div class="dreammap-header">
            <h2><i class="far fa-star"></i> I Tuoi Sogni di Viaggio</h2>
            <p>Pianifica e visualizza le tue future destinazioni</p>
        </div>
        <ul class="nav nav-tabs mb-3" id="dreamTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="wishlist-tab" data-bs-toggle="tab" data-bs-target="#wishlist" type="button" role="tab">
                    <i class="fas fa-heart"></i> Wishlist
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="planning-tab" data-bs-toggle="tab" data-bs-target="#planning" type="button" role="tab">
                    <i class="fas fa-calendar-alt"></i> In Pianificazione
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="discover-tab" data-bs-toggle="tab" data-bs-target="#discover" type="button" role="tab">
                    <i class="fas fa-compass"></i> Scopri
                </button>
            </li>
        </ul>

        <div class="tab-content" id="dreamTabsContent">
            <!-- TAB WISHLIST -->
            <div class="tab-pane fade show active" id="wishlist" role="tabpanel">
                <div class="search-container mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Cerca nei tuoi desideri..." id="wishlistSearch">
                    </div>
                </div>

                <div class="dreammap-list" id="wishlistItems">
                    @foreach (var dream in Model.Wishlist)
                    {
                        <div class="dream-item" data-city="@dream.CityName.ToLower()" data-country="@dream.CountryName.ToLower()"
                         data-id="@dream.Id" data-lat="@dream.Latitude" data-lng="@dream.Longitude"
                         onclick="flyToDestination(@dream.Latitude, @dream.Longitude)">
                            <div class="dream-item-image">
                                <img src="@dream.ImageUrl" alt="@dream.CityName">
                                <div class="dream-flag">
                                    <img src="/images/flags/@(dream.CountryCode.ToLower()).png" alt="@dream.CountryName">
                                </div>
                            </div>
                            <div class="dream-item-content">
                                <div class="dream-priority @dream.Priority.ToString().ToLower()">
                                    @for (int i = 0; i < (int)dream.Priority; i++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                </div>
                                <h3 class="dream-name">@dream.CityName</h3>
                                <p class="dream-country">@dream.CountryName</p>
                                <div class="dream-tags">
                                    @foreach (var tag in dream.Tags)
                                    {
                                        <span class="dream-tag">@tag</span>
                                    }
                                </div>
                                <div class="dream-note">@(dream.Note?.Length > 100 ? dream.Note.Substring(0, 100) + "..." : dream.Note)</div>
                            </div>
                            <div class="dream-item-actions">
                                <!-- MODIFICATO: Aggiunta classe show-details-btn e data-id -->
                                <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="@dream.Id">
                                    <i class="fas fa-info-circle"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" onclick="moveToPlanningPhase('@dream.Id')">
                                    <i class="fas fa-calendar-plus"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('@dream.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    }

                    @if (!Model.Wishlist.Any())
                    {
                        <div class="empty-state">
                            <img src="/images/empty-wishlist.svg" alt="Wishlist vuota" class="empty-state-icon">
                            <p>La tua lista dei desideri è vuota</p>
                            <p class="text-muted">Aggiungi le destinazioni dei tuoi sogni con il pulsante qui sotto</p>
                        </div>
                    }
                </div>

                <button type="button" class="btn btn-primary add-dream-btn" data-bs-toggle="modal" data-bs-target="#addDreamModal">
                    <i class="fas fa-plus"></i> Aggiungi Destinazione
                </button>
            </div>

            <!-- TAB IN PIANIFICAZIONE -->
            <div class="tab-pane fade" id="planning" role="tabpanel">
                <div class="search-container mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Cerca nei viaggi pianificati..." id="planningSearch">
                    </div>
                </div>

                <div class="dreammap-list" id="planningItems">
                    @foreach (var plan in Model.PlannedTrips)
                    {
                        <div class="plan-item" data-city="@plan.CityName.ToLower()" data-country="@plan.CountryName.ToLower()"
                         data-id="@plan.Id" data-lat="@plan.Latitude" data-lng="@plan.Longitude"
                         onclick="flyToDestination(@plan.Latitude, @plan.Longitude)">
                            <div class="plan-item-image">
                                <img src="@plan.ImageUrl" alt="@plan.CityName">
                                <div class="plan-flag">
                                    <img src="/images/flags/@(plan.CountryCode.ToLower()).png" alt="@plan.CountryName">
                                </div>
                                <div class="plan-dates">
                                    <div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div>
                                    <div class="plan-date-range">@plan.StartDate.ToString("dd/MM/yyyy")</div>
                                </div>
                            </div>
                            <div class="plan-item-content">
                                <h3 class="plan-name">@plan.CityName</h3>
                                <p class="plan-country">@plan.CountryName</p>
                                <div class="plan-countdown">
                                    <i class="far fa-calendar-alt"></i>
                                    <strong>@((plan.StartDate - DateTime.Today).Days)</strong>
                                    giorni rimanenti
                                </div>
                                <div class="plan-progress">
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar"
                                         style="width: @plan.CompletionPercentage%"
                                         aria-valuenow="@plan.CompletionPercentage"
                                         aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <span class="plan-progress-text">@plan.CompletionPercentage% completato</span>
                                </div>
                                <ul class="plan-checklist">
                                    @foreach (var item in plan.Checklist.Take(3))
                                    {
                                        <li class="@(item.IsCompleted ? "completed" : "")">
                                            <i class="@(item.IsCompleted ? "fas fa-check-circle" : "far fa-circle")"></i>
                                            @item.Title
                                        </li>
                                    }
                                    @if (plan.Checklist.Count > 3)
                                    {
                                        <li class="more">+ altri @(plan.Checklist.Count - 3) elementi</li>
                                    }
                                </ul>
                            </div>
                            <div class="plan-item-actions">
                                <!-- MODIFICATO: Aggiunta classe show-details-btn e data-id -->
                                <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="@plan.Id">
                                    <i class="fas fa-info-circle"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('@plan.Id')">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('@plan.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    }

                    @if (!Model.PlannedTrips.Any())
                    {
                        <div class="empty-state">
                            <img src="/images/empty-planning.svg" alt="Nessun viaggio pianificato" class="empty-state-icon">
                            <p>Non hai ancora pianificato viaggi</p>
                            <p class="text-muted">Sposta un sogno dalla tua wishlist qui per iniziare a pianificarlo</p>
                        </div>
                    }
                </div>
            </div>

            <!-- TAB SCOPRI -->
            <div class="tab-pane fade" id="discover" role="tabpanel">
                <div class="discover-header">
                    <h3>Destinazioni consigliate per te</h3>
                    <p>Basate sui tuoi interessi e destinazioni visitate</p>
                </div>

                <div class="recommendation-filters">
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="recommendationType" id="recType1" autocomplete="off" checked>
                        <label class="btn btn-outline-primary" for="recType1">Tutte</label>

                        <input type="radio" class="btn-check" name="recommendationType" id="recType2" autocomplete="off">
                        <label class="btn btn-outline-primary" for="recType2">Simili</label>

                        <input type="radio" class="btn-check" name="recommendationType" id="recType3" autocomplete="off">
                        <label class="btn btn-outline-primary" for="recType3">Popolari</label>

                        <input type="radio" class="btn-check" name="recommendationType" id="recType4" autocomplete="off">
                        <label class="btn btn-outline-primary" for="recType4">Nuove</label>
                    </div>
                </div>
                <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken().ToString()">
                <div class="discover-grid">
                    @foreach (var recommendation in Model.Recommendations)
                    {
                        <div class="discover-card" data-lat="@recommendation.Latitude" data-lng="@recommendation.Longitude">
                            <div class="discover-image">
                                <img src="@recommendation.ImageUrl" alt="@recommendation.CityName">
                                <div class="discover-flag">
                                    <img src="/images/flags/@(recommendation.CountryCode.ToLower()).png" alt="@recommendation.CountryName">
                                </div>
                                <div class="discover-match">
                                    <span>@recommendation.MatchPercentage%</span>
                                    <small>Match</small>
                                </div>
                            </div>
                            <div class="discover-content">
                                <h4>@recommendation.CityName</h4>
                                <p>@recommendation.CountryName</p>
                                <div class="discover-tags">
                                    @foreach (var tag in recommendation.Tags.Take(3))
                                    {
                                        <span class="discover-tag">@tag</span>
                                    }
                                </div>
                                <div class="discover-highlights">
                                    <div class="discover-highlight">
                                        <i class="fas fa-temperature-high"></i> @recommendation.Weather
                                    </div>
                                    <div class="discover-highlight">
                                        <i class="fas fa-euro-sign"></i> @recommendation.CostLevel
                                    </div>
                                    <div class="discover-highlight">
                                        <i class="fas fa-hotel"></i> @recommendation.Accommodations
                                    </div>
                                </div>
                            </div>
                            <div class="discover-actions">
                                <button class="btn btn-sm btn-outline-info" onclick="flyToDestination(@recommendation.Latitude, @recommendation.Longitude)">
                                    <i class="fas fa-map-marker-alt"></i>
                                </button>
                                <button class="btn btn-primary" onclick="addToWishlist('@recommendation.Id')">
                                    <i class="fas fa-heart"></i> Aggiungi
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <div class="discover-more">
                    <button class="btn btn-outline-primary">
                        <i class="fas fa-sync-alt"></i> Carica altri suggerimenti
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="dreamMap" class="dreammap-main">
        <!-- La mappa sarà renderizzata qui -->
    </div>
</div>

<!-- Modal per aggiungere un nuovo sogno - AGGIORNATO con dropdown città -->
<div class="modal fade" id="addDreamModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Aggiungi una nuova destinazione dei sogni</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="SaveToWishlist" enctype="multipart/form-data" id="dreamForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="WishlistForm_City" class="form-label">Città</label>
                                <select class="form-select" id="WishlistForm_City" name="WishlistForm.City" required>
                                    <option value="">Seleziona una città</option>
                                    @foreach (var city in Model.WishlistForm.AvailableCities)
                                    {
                                        <option value="@city.Name"
                                            data-country="@city.Country"
                                            data-country-code="@city.CountryCode">
                                            @city.Name
                                        </option>
                                    }
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="WishlistForm_Country" class="form-label">Paese</label>
                                <input type="text" class="form-control" id="WishlistForm_Country" name="WishlistForm.Country" readonly>
                                <input type="hidden" id="WishlistForm_CountryCode" name="WishlistForm.CountryCode">
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Priorità</label>
                                <div class="priority-selector">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="WishlistForm.Priority" id="priorityLow" value="Bassa">
                                        <label class="form-check-label" for="priorityLow">
                                            <i class="fas fa-star"></i>
                                            <span>Bassa</span>
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="WishlistForm.Priority" id="priorityMedium" value="Media" checked>
                                        <label class="form-check-label" for="priorityMedium">
                                            <i class="fas fa-star"></i><i class="fas fa-star"></i>
                                            <span>Media</span>
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="WishlistForm.Priority" id="priorityHigh" value="Alta">
                                        <label class="form-check-label" for="priorityHigh">
                                            <i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i>
                                            <span>Alta</span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="WishlistForm_Tags" class="form-label">Tag</label>
                                <input type="text" class="form-control" id="WishlistForm_Tags" name="WishlistForm.Tags"
                                       placeholder="es: spiagge, montagna, cultura (separati da virgola)">
                                <div class="form-text">Aggiungi tag per categorizzare il tuo sogno</div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Immagine della destinazione</label>
                                <div class="destination-image-preview">
                                    <img src="/images/placeholder-destination.jpg" id="destinationImagePreview" alt="Anteprima immagine">
                                    <div class="image-overlay">
                                        <input type="file" id="WishlistForm_ImageFile" name="WishlistForm.ImageFile" class="d-none" accept="image/*">
                                        <button type="button" class="btn btn-light btn-sm" id="selectImageBtn">
                                            <i class="fas fa-camera"></i> Scegli immagine
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="WishlistForm_Notes" class="form-label">Note</label>
                                <textarea class="form-control" id="WishlistForm_Notes" name="WishlistForm.Notes" rows="5"
                                          placeholder="Scrivi qui i motivi per cui vuoi visitare questa destinazione"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-heart me-1"></i> Salva nella Wishlist
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal per dettagli di un sogno -->
<div class="modal fade" id="dreamDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header dream-details-header">
                <h5 class="modal-title">Dettagli Destinazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="dream-details-banner">
                    <img src="" id="detailsBannerImg" alt="Immagine destinazione">
                    <div class="dream-details-overlay">
                        <h2 id="detailsCityName"></h2>
                        <p id="detailsCountryName"></p>
                    </div>
                </div>
                <div class="dream-details-content">
                    <div class="dream-details-info">
                        <div class="detail-item">
                            <div class="detail-icon">
                                <i class="fas fa-heart"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Priorità</h6>
                                <div class="dream-priority" id="detailsPriority"></div>
                            </div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-icon">
                                <i class="fas fa-tags"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Tag</h6>
                                <div id="detailsTags" class="dream-tags"></div>
                            </div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-icon">
                                <i class="fas fa-calendar-alt"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Aggiunto il</h6>
                                <p id="detailsDate"></p>
                            </div>
                        </div>

                        <div class="detail-item full-width">
                            <div class="detail-icon">
                                <i class="fas fa-sticky-note"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Note</h6>
                                <div class="dream-note" id="detailsNote"></div>
                            </div>
                        </div>
                    </div>

                    <div class="dream-ai-suggestions">
                        <h5><i class="fas fa-lightbulb"></i> Informazioni sulla destinazione</h5>
                        <div class="suggestion-tabs">
                            <div class="suggestion-tab" data-tab="attractions">
                                <i class="fas fa-camera"></i> Attrazioni
                            </div>
                            <div class="suggestion-tab" data-tab="gastronomy">
                                <i class="fas fa-utensils"></i> Gastronomia
                            </div>
                            <div class="suggestion-tab" data-tab="history">
                                <i class="fas fa-landmark"></i> Storia
                            </div>
                            <div class="suggestion-tab" data-tab="tips">
                                <i class="fas fa-info-circle"></i> Consigli
                            </div>
                        </div>

                        <div class="suggestion-content">
                            <div class="suggestion-pane" data-pane="attractions" id="suggestionsAttractions">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                            <div class="suggestion-pane" data-pane="gastronomy" id="suggestionsGastronomy">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                            <div class="suggestion-pane" data-pane="history" id="suggestionsHistory">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                            <div class="suggestion-pane" data-pane="tips" id="suggestionsTips">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                <button type="button" class="btn btn-warning" id="planTripBtn">
                    <i class="fas fa-calendar-plus me-1"></i> Pianifica Viaggio
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal per dettagli di un viaggio pianificato -->
<div class="modal fade" id="planDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header plan-details-header">
                <h5 class="modal-title"><i class="fas fa-plane"></i> Il Tuo Viaggio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="plan-details-banner">
                    <img src="" id="planBannerImg" alt="Immagine destinazione">
                    <div class="plan-details-overlay">
                        <div class="plan-details-info">
                            <h2 id="planCityName"></h2>
                            <p id="planCountryName"></p>
                            <div class="plan-date-range" id="planDateRange">
                                <i class="fas fa-calendar-alt"></i> <span></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="plan-details-content">
                    <div class="row">
                        <div class="col-md-7">
                            <div class="plan-details-section">
                                <h5><i class="fas fa-list-check"></i> Pianificazione del Viaggio</h5>
                                <div class="plan-progress-bar">
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" id="planProgressBar"
                                             style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                        </div>
                                    </div>
                                    <span class="progress-text">Completato: <span id="progressPercentage">0</span>%</span>
                                </div>

                                <div class="plan-checklist-container">
                                    <div class="checklist-header">
                                        <h6>Lista di controllo</h6>
                                        <button class="btn btn-sm btn-outline-primary" id="addChecklistItem">
                                            <i class="fas fa-plus"></i> Aggiungi elemento
                                        </button>
                                    </div>

                                    <ul class="plan-detailed-checklist" id="planChecklist">
                                        <!-- Elementi della checklist generati dinamicamente -->
                                    </ul>
                                </div>
                            </div>

                            <div class="plan-details-section">
                                <h5><i class="fas fa-sticky-note"></i> Note di Viaggio</h5>
                                <div class="plan-notes-container">
                                    <div class="form-floating">
                                        <textarea class="form-control" placeholder="Scrivi qui le tue note di viaggio"
                                                  id="planNotes" style="height: 150px"></textarea>
                                        <label for="planNotes">Appunti e dettagli del viaggio</label>
                                    </div>
                                    <div class="text-end mt-2">
                                        <button class="btn btn-primary btn-sm" id="saveNotesBtn">
                                            <i class="fas fa-save"></i> Salva note
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-5">
                            <div class="plan-details-section">
                                <h5><i class="fas fa-info-circle"></i> Informazioni Utili</h5>
                                <div class="info-cards">
                                    <div class="info-card" id="weatherCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-cloud-sun"></i> Meteo
                                        </div>
                                        <div class="info-card-content">
                                            <div class="weather-info">
                                                <div class="weather-icon">
                                                    <i class="fas fa-sun"></i>
                                                </div>
                                                <div class="weather-details">
                                                    <div class="weather-temp">22°C - 28°C</div>
                                                    <div class="weather-desc">Soleggiato</div>
                                                </div>
                                            </div>
                                            <div class="weather-forecast">
                                                Media di stagione per il periodo selezionato.
                                            </div>
                                        </div>
                                    </div>

                                    <div class="info-card" id="currencyCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-money-bill-wave"></i> Valuta
                                        </div>
                                        <div class="info-card-content" id="currencyInfo">
                                            <!-- Contenuto generato dinamicamente -->
                                        </div>
                                    </div>

                                    <div class="info-card" id="languageCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-language"></i> Lingua
                                        </div>
                                        <div class="info-card-content" id="languageInfo">
                                            <!-- Contenuto generato dinamicamente -->
                                        </div>
                                    </div>

                                    <div class="info-card" id="timeCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-clock"></i> Fuso Orario
                                        </div>
                                        <div class="info-card-content" id="timeInfo">
                                            <!-- Contenuto generato dinamicamente -->
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="plan-details-section">
                                <h5><i class="fas fa-map-marked-alt"></i> Esplora</h5>
                                <div class="explore-buttons">
                                    <!-- MODIFICATO: Aggiunta classe per facilitare la selezione e l'inizializzazione -->
                                    <a href="#" class="btn btn-outline-primary external-link" id="googleMapsBtn" data-type="maps">
                                        <i class="fas fa-map"></i> Google Maps
                                    </a>
                                    <a href="#" class="btn btn-outline-primary external-link" id="bookingBtn" data-type="booking">
                                        <i class="fas fa-hotel"></i> Booking.com
                                    </a>
                                    <a href="#" class="btn btn-outline-primary external-link" id="tripAdvisorBtn" data-type="tripadvisor">
                                        <i class="fas fa-thumbs-up"></i> TripAdvisor
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <!-- MODIFICATO: Aggiunta degli attributi onclick per collegare le funzioni -->
                <div>
                    <button type="button" class="btn btn-danger" id="removePlanBtn">
                        <i class="fas fa-trash-alt"></i> Elimina Piano
                    </button>
                </div>
                <div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                    <button type="button" class="btn btn-primary" id="updatePlanBtn">
                        <i class="fas fa-save"></i> Salva Modifiche
                    </button>
                    <button type="button" class="btn btn-success" id="markVisitedBtn">
                        <i class="fas fa-check"></i> Segna come Visitato
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Form invisibile per aggiungere un nuovo elemento alla checklist -->
<div class="modal fade" id="addChecklistItemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Aggiungi elemento alla checklist</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="checklistItemTitle" class="form-label">Titolo</label>
                    <input type="text" class="form-control" id="checklistItemTitle" placeholder="Es: Prenotare volo">
                </div>
                <div class="mb-3">
                    <label for="checklistItemCategory" class="form-label">Categoria</label>
                    <select class="form-select" id="checklistItemCategory">
                        <option value="travel">Viaggio</option>
                        <option value="accommodation">Alloggio</option>
                        <option value="documents">Documenti</option>
                        <option value="activities">Attività</option>
                        <option value="other">Altro</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="checklistItemDueDate" class="form-label">Data di scadenza (opzionale)</label>
                    <input type="date" class="form-control" id="checklistItemDueDate">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="saveChecklistItemBtn">Aggiungi</button>
            </div>
        </div>
    </div>
</div>

<!-- Script per gestire l'aggiornamento del paese in base alla città selezionata -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const cityDropdown = document.getElementById('WishlistForm_City');
        const countryInput = document.getElementById('WishlistForm_Country');
        const countryCodeInput = document.getElementById('WishlistForm_CountryCode');
        const imageInput = document.getElementById('WishlistForm_ImageFile');
        const imagePreview = document.getElementById('destinationImagePreview');
        const selectImageBtn = document.getElementById('selectImageBtn');

        // Aggiorna il campo del paese quando viene selezionata una città
        if (cityDropdown && countryInput && countryCodeInput) {
            cityDropdown.addEventListener('change', function () {
                const selectedOption = this.options[this.selectedIndex];
                const country = selectedOption.getAttribute('data-country');
                const countryCode = selectedOption.getAttribute('data-country-code');

                if (country) {
                    countryInput.value = country;
                }

                if (countryCode) {
                    countryCodeInput.value = countryCode;
                }
            });
        }

        // Gestisce la selezione dell'immagine e la sua anteprima
        if (selectImageBtn && imageInput) {
            selectImageBtn.addEventListener('click', function () {
                imageInput.click();
            });
        }

        if (imageInput && imagePreview) {
            imageInput.addEventListener('change', function () {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        imagePreview.src = e.target.result;
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });
        }
    });
</script>

<!-- Aggiungere questo script per inizializzare i pulsanti dopo il caricamento del DOM -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Aggiungi gestori eventi per i pulsanti dettagli
    document.querySelectorAll('.show-details-btn').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            event.stopPropagation();
            
            const id = this.getAttribute('data-id');
            if (!id) {
                console.error("ID non trovato sul pulsante");
                return;
            }
            
            // Determina il tipo di elemento in base al genitore
            if (this.closest('.dream-item')) {
                console.log("Click su dettagli sogno:", id);
                showDreamDetails(id);
            } else if (this.closest('.plan-item')) {
                console.log("Click su dettagli piano:", id);
                showPlanDetails(id);
            }
        });
    });
    
    // Configura i pulsanti nel footer del modal dei piani
    const removePlanBtn = document.getElementById('removePlanBtn');
    const updatePlanBtn = document.getElementById('updatePlanBtn');
    const markVisitedBtn = document.getElementById('markVisitedBtn');
    
    if (removePlanBtn) {
        removePlanBtn.addEventListener('click', function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) removePlan(planId);
        });
    }
    
    if (updatePlanBtn) {
        updatePlanBtn.addEventListener('click', function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) updatePlanDetails(planId);
        });
    }
    
    if (markVisitedBtn) {
        markVisitedBtn.addEventListener('click', function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) markAsVisited(planId);
        });
    }
    
    console.log("Inizializzazione pulsanti dettagli completata");
});
</script>

<script>
        let map;
        let markers = [];
        let markerClusters;
        
        // Dati delle destinazioni
        const destinations = @Html.Raw(Json.Serialize(Model.AllDestinations));
        
      document.addEventListener('DOMContentLoaded', function() {
    // Inizializza la mappa
    initMap();
    
    // Inizializza i form e gli eventi
    setupEventListeners();
    
    // Carica i marker sulla mappa
    loadMapMarkers();
    
    // Sincronizza lo stato dell'app
    sincronizzaStatoApp();
    
    console.log('App DreamMap inizializzata con successo.');
});

        function initMap() {
    try {
        console.log('Initializing map...');
        
        // Make sure the container exists and is visible
        const mapContainer = document.getElementById('dreamMap');
        if (!mapContainer) {
            console.error('Map container not found!');
            return;
        }
        
        // If a map already exists, destroy it to prevent duplicates
        if (map) {
            map.remove();
        }
        
        // Create the map with explicit dimensions for the container
        mapContainer.style.height = '100vh';
        
        // Initialize the Leaflet map
        map = L.map('dreamMap', {
            center: [20, 0],
            zoom: 2,
            minZoom: 2,
            maxBounds: [[-90, -180], [90, 180]],
            maxBoundsViscosity: 1.0,
            worldCopyJump: true,
        });
        
        // Add the tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19,
            noWrap: true
        }).addTo(map);
        
        // Initialize marker clusters
        markerClusters = L.markerClusterGroup({
            showCoverageOnHover: false,
            maxClusterRadius: 50,
            iconCreateFunction: function(cluster) {
                return L.divIcon({
                    html: '<div class="cluster-icon">' + cluster.getChildCount() + '</div>',
                    className: 'custom-cluster-icon',
                    iconSize: L.point(40, 40)
                });
            }
        });
        map.addLayer(markerClusters);
        
        console.log('Map initialized successfully');
    } catch (error) {
        console.error('Error initializing map:', error);
    }
}

        function loadMapMarkers() {
    console.log('Aggiornamento marker sulla mappa');
    
    // Pulisci i marker esistenti
    if (markerClusters) {
        markerClusters.clearLayers();
    }
    markers = [];

    // Verifica i dati delle destinazioni
    if (!destinations) {
        console.error('Dati delle destinazioni non disponibili');
        destinations = { wishlist: [], plannedTrips: [], visitedCities: [] };
    }

    // Inizializza gli array se non esistono
    if (!Array.isArray(destinations.wishlist)) destinations.wishlist = [];
    if (!Array.isArray(destinations.plannedTrips)) destinations.plannedTrips = [];
    if (!Array.isArray(destinations.visitedCities)) destinations.visitedCities = [];

    console.log('Dati wishlist:', destinations.wishlist);
    console.log('Dati piani:', destinations.plannedTrips);
    console.log('Dati visite:', destinations.visitedCities);

    // Aggiungi i marker per i sogni
    destinations.wishlist.forEach(function (dream) {
        if (!isValidLatitude(dream.latitude) || !isValidLongitude(dream.longitude)) {
            console.error(`Coordinate non valide per ${dream.cityName}: lat=${dream.latitude}, lng=${dream.longitude}`);
            return;
        }

        const marker = createMarker(
            dream.latitude,
            dream.longitude,
            dream.cityName,
            dream.countryName,
            'dream',
            dream.priority,
            dream.id
        );
        markers.push(marker);
        markerClusters.addLayer(marker);
    });

    // Aggiungi i marker per i piani
    destinations.plannedTrips.forEach(function(plan) {
        if (!isValidLatitude(plan.latitude) || !isValidLongitude(plan.longitude)) {
            console.error(`Coordinate non valide per ${plan.cityName}: lat=${plan.latitude}, lng=${plan.longitude}`);
            return;
        }

        const marker = createMarker(
            plan.latitude, 
            plan.longitude, 
            plan.cityName, 
            plan.countryName, 
            'plan', 
            plan.completionPercentage || 0,
            plan.id
        );
        markers.push(marker);
        markerClusters.addLayer(marker);
    });
    
    // Aggiungi i marker per le città visitate
    destinations.visitedCities.forEach(function(visit) {
        if (!isValidLatitude(visit.latitude) || !isValidLongitude(visit.longitude)) {
            console.error(`Coordinate non valide per ${visit.cityName}: lat=${visit.latitude}, lng=${visit.longitude}`);
            return;
        }

        const marker = createMarker(
            visit.latitude, 
            visit.longitude, 
            visit.cityName, 
            visit.countryName, 
            'visited',
            null,
            visit.id
        );
        markers.push(marker);
        markerClusters.addLayer(marker);
    });
}
        
        function createMarker(lat, lng, city, country, type, detail, id) {
    // Determina il colore e l'icona in base al tipo
    let color, icon;
    
    switch (type) {
        case 'dream':
            color = '#ff9800';
            icon = 'star';
            break;
        case 'plan':
            color = '#4a90e2';
            icon = 'plane-departure';
            break;
        case 'visited':
            color = '#4caf50';
            icon = 'check-circle';
            break;
        default:
            color = '#607d8b';
            icon = 'map-marker-alt';
    }
    
    // Crea un'icona personalizzata
    const customIcon = L.divIcon({
        html: `<div style="background-color: ${color}"><i class="fas fa-${icon}"></i></div>`,
        className: 'custom-marker-icon',
        iconSize: [30, 30]
    });
    
    // Crea il marker con l'icona personalizzata
    const marker = L.marker([lat, lng], { icon: customIcon });
    
    // Aggiungi informazioni sul marker
    marker.itemId = id;
    marker.itemType = type;
    
    // Crea il popup con funzioni di callback corrette in base al tipo
    let popupContent = `
        <div class="custom-popup">
            <h3>${city}</h3>
            <p>${country}</p>
    `;
    
    // Aggiungi dettagli specifici in base al tipo
    if (type === 'dream') {
        const stars = '⭐'.repeat(detail || 1);
        popupContent += `<p>Priorità: ${stars}</p>`;
        popupContent += `<button class="btn btn-sm btn-primary" onclick="showDreamDetails('${id}')">Dettagli</button>`;
    } else if (type === 'plan') {
        popupContent += `<p>Completamento: ${detail || 0}%</p>`;
        popupContent += `<div class="progress mb-2" style="height: 5px">
            <div class="progress-bar" style="width: ${detail || 0}%"></div>
        </div>`;
        popupContent += `<button class="btn btn-sm btn-primary" onclick="showPlanDetails('${id}')">Dettagli</button>`;
    } else {
        popupContent += `<p>Già visitata</p>`;
        popupContent += `<button class="btn btn-sm btn-primary" onclick="showVisitDetails('${id}')">Ricordi</button>`;
    }
    
    popupContent += `</div>`;
    
    marker.bindPopup(popupContent);
    
    return marker;
}
        
        function flyToDestination(lat, lng) {
            if (!map) {
                console.error("Mappa non inizializzata");
                return;
            }
            
            // Verifica che le coordinate siano valide
            if (!isValidLatitude(lat) || !isValidLongitude(lng)) {
                console.error(`Coordinate non valide: lat=${lat}, lng=${lng}`);
                return;
            }
            
            console.log(`Spostamento della mappa a: lat=${lat}, lng=${lng}`);
            
            // Assicurati che le coordinate siano numeri
            lat = parseFloat(lat);
            lng = parseFloat(lng);
            
            // Limita le coordinate all'intervallo valido per evitare aree grigie
            lat = Math.max(-85, Math.min(85, lat)); // Limita la latitudine tra -85 e 85
            
            // Normalizza la longitudine tra -180 e 180
            lng = ((lng + 540) % 360) - 180;
            
            // Esegui lo spostamento della mappa
            map.flyTo([lat, lng], 10, {
                duration: 1.5,
                easeLinearity: 0.25,
                animate: true
            });
            
            // Trova e apri il popup del marker corrispondente
            let foundMarker = null;
            
            markers.forEach(function(marker) {
                const markerLat = marker.getLatLng().lat;
                const markerLng = marker.getLatLng().lng;
                
                // Confronta con una piccola tolleranza per problemi di precisione
                if (Math.abs(markerLat - lat) < 0.1 && Math.abs(markerLng - lng) < 0.1) {
                    foundMarker = marker;
                }
            });
            
            // Se abbiamo trovato un marker, apri il suo popup dopo un breve ritardo
            if (foundMarker) {
                setTimeout(function() {
                    foundMarker.openPopup();
                }, 1600);
            }
        }

        // Funzioni helper per validare le coordinate
        function isValidLatitude(lat) {
            return typeof lat === 'number' && !isNaN(lat) && lat >= -90 && lat <= 90;
        }

        function isValidLongitude(lng) {
            return typeof lng === 'number' && !isNaN(lng) && lng >= -180 && lng <= 180;
        }

        function normalizeLongitude(lng) {
            // Normalizza la longitudine nell'intervallo -180 a 180
            lng = ((lng + 180) % 360) - 180;
            if (lng === -180) lng = 180;
            return lng;
        }
        
        function setupEventListeners() {
    // Eventi già esistenti
    
    // Aggiungi questo nuovo gestore per la sincronizzazione delle viste
    // Aggiorna i gestori eventi per le schede
    document.querySelectorAll('[role="tab"]').forEach(tab => {
        tab.addEventListener('shown.bs.tab', function(e) {
            // Quando cambia tab, aggiorna la vista corrente
            setTimeout(() => {
                if (map) {
                    map.invalidateSize();
                }
            }, 100);
        });
    });
    
    // Listener per i click sulle destinazioni (delega eventi)
    document.addEventListener('click', function(e) {
        // Trova l'elemento dream-item o plan-item più vicino
        const dreamItem = e.target.closest('.dream-item');
        const planItem = e.target.closest('.plan-item');
        
        // Se è un bottone o un elemento dentro un bottone, ignora
        if (e.target.tagName === 'BUTTON' || e.target.closest('button') || 
            e.target.tagName === 'A' || e.target.closest('a')) {
            return;
        }
        
        if (dreamItem) {
            const lat = parseFloat(dreamItem.getAttribute('data-lat'));
            const lng = parseFloat(dreamItem.getAttribute('data-lng'));
            if (isValidLatitude(lat) && isValidLongitude(lng)) {
                flyToDestination(lat, lng);
            }
        } else if (planItem) {
            const lat = parseFloat(planItem.getAttribute('data-lat'));
            const lng = parseFloat(planItem.getAttribute('data-lng'));
            if (isValidLatitude(lat) && isValidLongitude(lng)) {
                flyToDestination(lat, lng);
            }
        }
    });
}


        
        function filterItems(containerId, searchText) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            const items = container.querySelectorAll('.dream-item, .plan-item');
            
            items.forEach(item => {
                const cityName = (item.dataset.city || '').toLowerCase();
                const countryName = (item.dataset.country || '').toLowerCase();
                
                if (cityName.includes(searchText) || countryName.includes(searchText)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        }






        // Mostra un overlay di caricamento
function showLoadingOverlay(message = 'Caricamento...') {
    const overlay = document.createElement('div');
    overlay.id = 'loadingOverlay';
    overlay.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    overlay.style.zIndex = '9999';
    
    overlay.innerHTML = `
        <div class="bg-white p-4 rounded shadow">
            <div class="d-flex align-items-center">
                <div class="spinner-border text-primary me-3" role="status"></div>
                <span>${message}</span>
            </div>
        </div>
    `;
    
    document.body.appendChild(overlay);
}

// Nascondi l'overlay di caricamento
function hideLoadingOverlay() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        document.body.removeChild(overlay);
    }
}

// Ottieni l'Anti-Forgery Token dal DOM
function getAntiForgeryToken() {
    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
    return tokenElement ? tokenElement.value : '';
}

// Funzione per formattare la data per gli input HTML
function formatDateForInput(date) {
    if (!date) return '';
    
    if (typeof date === 'string') {
        date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
        return '';
    }
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
}





function showDreamDetails(dreamId) {
    try {
        console.log('Mostra dettagli sogno:', dreamId);
        
        if (!dreamId) {
            console.error('ID non valido passato a showDreamDetails');
            showToast('Errore', 'ID destinazione non valido', 'danger');
            return;
        }
        
        // Cerca prima nei dati in memoria
        let dreamData = null;
        let dataSource = '';
        
        if (destinations && destinations.wishlist) {
            dreamData = destinations.wishlist.find(d => d.id && d.id.toString() === dreamId.toString());
            if (dreamData) dataSource = 'wishlist';
        }
        
        // Se non trovato nella wishlist, cerca nei piani
        if (!dreamData && destinations && destinations.plannedTrips) {
            dreamData = destinations.plannedTrips.find(p => p.id && p.id.toString() === dreamId.toString());
            if (dreamData) {
                dataSource = 'plans';
                // Se l'elemento è nei piani, mostra i dettagli del piano invece
                showPlanDetails(dreamId);
                return;
            }
        }
        
        // Se non trovato nei piani, cerca nelle visite
        if (!dreamData && destinations && destinations.visitedCities) {
            dreamData = destinations.visitedCities.find(v => v.id && v.id.toString() === dreamId.toString());
            if (dreamData) {
                dataSource = 'visits';
                // Se l'elemento è nelle visite, mostra i dettagli della visita invece
                showVisitDetails(dreamId);
                return;
            }
        }
        
        // Se ancora non trovato, cerca nel DOM
        if (!dreamData) {
            const element = document.querySelector(`.dream-item[data-id="${dreamId}"]`);
            if (element) {
                dreamData = {
                    id: dreamId,
                    cityName: element.querySelector('.dream-name')?.textContent || 'Città sconosciuta',
                    countryName: element.querySelector('.dream-country')?.textContent || 'Paese sconosciuto',
                    imageUrl: element.querySelector('img')?.src || '/images/placeholder-city.jpg',
                    notes: '',
                    latitude: parseFloat(element.getAttribute('data-lat')),
                    longitude: parseFloat(element.getAttribute('data-lng')),
                    priority: element.querySelector('.dream-priority')?.classList.contains('high') ? 3 :
                             element.querySelector('.dream-priority')?.classList.contains('medium') ? 2 : 1,
                    tags: ['viaggio'],
                    addedOn: new Date().toLocaleDateString()
                };
                dataSource = 'dom';
            }
        }
        
        // Se ancora non trovato, usa un fallback
        if (!dreamData) {
            dreamData = {
                id: dreamId,
                cityName: 'Città sconosciuta',
                countryName: 'Paese sconosciuto',
                imageUrl: '/images/placeholder-city.jpg',
                notes: '',
                latitude: 0,
                longitude: 0,
                priority: 1,
                tags: ['viaggio'],
                addedOn: new Date().toLocaleDateString()
            };
            dataSource = 'fallback';
        }
        
        console.log(`Dati sogno trovati in ${dataSource}:`, dreamData);
        
        // Memorizza l'ID corrente nel modal per i pulsanti di azione
        const modal = document.getElementById('dreamDetailsModal');
        if (modal) {
            modal.setAttribute('data-dream-id', dreamId);
        }
        
        // Popola il modal con i dati
        document.getElementById('detailsCityName').textContent = dreamData.cityName;
        document.getElementById('detailsCountryName').textContent = dreamData.countryName;
        
        // Gestione dell'immagine
        const bannerImg = document.getElementById('detailsBannerImg');
        if (bannerImg) {
            bannerImg.onerror = function() {
                this.src = '/images/placeholder-city.jpg';
            };
            bannerImg.src = dreamData.imageUrl;
        }
        
        // Data aggiunta
        const dateElement = document.getElementById('detailsDate');
        if (dateElement) {
            const formattedDate = dreamData.addedOn ? 
                (typeof dreamData.addedOn === 'string' ? dreamData.addedOn : new Date(dreamData.addedOn).toLocaleDateString()) : 
                'Data sconosciuta';
            dateElement.textContent = formattedDate;
        }
        
        // Note
        const noteElement = document.getElementById('detailsNote');
        if (noteElement) {
            noteElement.textContent = dreamData.notes || 'Nessuna nota aggiunta.';
            noteElement.style.fontStyle = dreamData.notes ? 'normal' : 'italic';
            noteElement.style.color = dreamData.notes ? '#333' : '#777';
        }
        
        // Priorità - stelle gialle
        const priorityDiv = document.getElementById('detailsPriority');
        if (priorityDiv) {
            priorityDiv.innerHTML = '';
            for (let i = 0; i < (dreamData.priority || 1); i++) {
                const star = document.createElement('i');
                star.className = 'fas fa-star';
                star.style.color = '#FFD700'; // Colore giallo per le stelle
                priorityDiv.appendChild(star);
            }
        }
        
        // Tag
        const tagsDiv = document.getElementById('detailsTags');
        if (tagsDiv) {
            tagsDiv.innerHTML = '';
            (dreamData.tags || ['viaggio']).forEach(tag => {
                const tagSpan = document.createElement('span');
                tagSpan.className = 'dream-tag';
                tagSpan.textContent = tag;
                tagSpan.style.backgroundColor = '#e9ecef';
                tagSpan.style.color = '#495057';
                tagSpan.style.padding = '2px 8px';
                tagSpan.style.borderRadius = '15px';
                tagSpan.style.margin = '0 4px 4px 0';
                tagSpan.style.display = 'inline-block';
                tagSpan.style.fontSize = '0.9rem';
                tagsDiv.appendChild(tagSpan);
            });
        }

        // Configura i link esterni per l'esplorazione
        setupExternalLinks(dreamData.cityName, dreamData.countryName);

        // Carica le informazioni AI per i vari tab
        loadAISuggestions('attractions', dreamData.cityName);
        loadAISuggestions('gastronomy', dreamData.cityName);
        loadAISuggestions('history', dreamData.cityName);
        loadAISuggestions('tips', dreamData.cityName);

         setTimeout(initializeSuggestionTabs, 100);
        
        // Mostra o nascondi il bottone "Pianifica" in base alla posizione
        const planTripBtn = document.getElementById('planTripBtn');
        if (planTripBtn) {
            if (dataSource === 'wishlist') {
                planTripBtn.style.display = 'block';
                planTripBtn.onclick = function() {
                    moveToPlanningPhase(dreamId);
                };
            } else {
                planTripBtn.style.display = 'none';
            }
        }
        
        // Centra la mappa sulla destinazione
        if (isValidLatitude(dreamData.latitude) && isValidLongitude(dreamData.longitude)) {
            flyToDestination(dreamData.latitude, dreamData.longitude);
        }
        
        // Mostra il modal
        const bsModal = new bootstrap.Modal(document.getElementById('dreamDetailsModal'));
        bsModal.show();
    } catch (error) {
        console.error('Errore in showDreamDetails:', error);
        showToast('Errore', 'Si è verificato un errore durante il caricamento dei dettagli', 'danger');
    }
}






// Funzione per inizializzare correttamente tutti i pulsanti dettagli
function initializeDetailButtons() {
    console.log("Inizializzazione di tutti i pulsanti dettagli");
    
    // Rimuove tutti i listener precedenti per evitare duplicazioni
    document.querySelectorAll('.btn-outline-info[onclick*="showDreamDetails"], .btn-outline-info[onclick*="showPlanDetails"]').forEach(button => {
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
    });
    
    // Gestori per i pulsanti dettagli nella wishlist
    document.querySelectorAll('.dream-item .btn-outline-info').forEach(button => {
        button.addEventListener('click', function(event) {
            // Ferma la propagazione per evitare che altri handler catturino l'evento
            event.stopPropagation();
            
            // Ottieni l'ID dalla dream-item parent
            const dreamItem = this.closest('.dream-item');
            if (dreamItem) {
                const dreamId = dreamItem.getAttribute('data-id');
                console.log("Clic su dettagli dream:", dreamId);
                if (dreamId) {
                    showDreamDetails(dreamId);
                } else {
                    console.error("ID dream non trovato");
                }
            }
        });
    });
    
    // Gestori per i pulsanti dettagli nella pianificazione
    document.querySelectorAll('.plan-item .btn-outline-info').forEach(button => {
        button.addEventListener('click', function(event) {
            // Ferma la propagazione per evitare che altri handler catturino l'evento
            event.stopPropagation();
            
            // Ottieni l'ID dalla plan-item parent
            const planItem = this.closest('.plan-item');
            if (planItem) {
                const planId = planItem.getAttribute('data-id');
                console.log("Clic su dettagli plan:", planId);
                if (planId) {
                    showPlanDetails(planId);
                } else {
                    console.error("ID piano non trovato");
                }
            }
        });
    });
    
    console.log("Inizializzazione pulsanti dettagli completata");
}






function handleDetailsButtonClick(event) {
    event.preventDefault();
    event.stopPropagation();
    
    console.log("Click su pulsante dettagli");
    
    const button = event.currentTarget;
    const id = button.getAttribute('data-id');
    
    // Se l'ID non è nell'attributo data-id, cerca nel parent
    if (!id) {
        const parent = button.closest('.dream-item, .plan-item');
        if (parent) {
            const parentId = parent.getAttribute('data-id');
            if (parentId) {
                if (parent.classList.contains('dream-item')) {
                    showDreamDetails(parentId);
                } else {
                    showPlanDetails(parentId);
                }
                return;
            }
        }
        console.error("Impossibile trovare l'ID");
        return;
    }
    
    // Se abbiamo l'ID direttamente dal pulsante
    const isDream = button.closest('.dream-item');
    const isPlan = button.closest('.plan-item');
    
    if (isDream) {
        showDreamDetails(id);
    } else if (isPlan) {
        showPlanDetails(id);
    } else {
        console.error("Tipo di elemento non identificato");
    }
}





        function loadAISuggestions(type, cityName) {
    console.log(`Caricamento suggerimenti ${type} per ${cityName}`);

    const suggestionPane = document.getElementById(`suggestions${type.charAt(0).toUpperCase() + type.slice(1)}`);
    if (!suggestionPane) {
        console.error('Elemento DOM non trovato per i suggerimenti:', `suggestions${type.charAt(0).toUpperCase() + type.slice(1)}`);
        return;
    }

    // Mostra indicatore di caricamento
    suggestionPane.innerHTML = `
        <div class="ai-loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento...</span>
            </div>
            <p>Generando suggerimenti con AI...</p>
        </div>
    `;

    // Chiama l'handler per ottenere i suggerimenti
    fetch(`/DreamMap?handler=Travelsuggestions&cityName=${encodeURIComponent(cityName)}&suggestionType=${encodeURIComponent(type)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Errore HTTP: ${response.status} ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log("Risposta API ricevuta:", data);

            // Gestisci il nuovo formato di risposta semplificato
            if (data.success && data.html) {
                // Pulizia lato client di eventuali delimitatori residui
                let cleanedHtml = data.html;

                // Rimuovi ```html all'inizio e ``` alla fine
                cleanedHtml = cleanedHtml.replace(/^\s*```(?:html|HTML)?\s*\n?/i, '');
                cleanedHtml = cleanedHtml.replace(/\s*```\s*$/, '');

                // Rimuovi eventuali <pre> e </pre> indesiderati
                cleanedHtml = cleanedHtml.replace(/^\s*<pre>\s*|\s*<\/pre>\s*$/g, '');

                // Controlla se il contenuto è vuoto dopo la pulizia
                if (!cleanedHtml.trim()) {
                    throw new Error("Contenuto ricevuto vuoto dopo la pulizia");
                }

                // Usa l'HTML pulito
                suggestionPane.innerHTML = cleanedHtml;

                // Assicurati che il tab sia correttamente selezionato se questo è il primo contenuto caricato
                if (type === 'attractions') {
                    const attractionsTab = document.querySelector('.suggestion-tab[data-tab="attractions"]');
                    if (attractionsTab && !attractionsTab.classList.contains('active')) {
                        attractionsTab.click();
                    }
                }

                // Aggiungi classe per animazione di fade-in
                suggestionPane.classList.add('content-loaded');
            }
            // In caso di errore dal backend
            else if (data.error) {
                console.error("Errore server:", data.error);

                // Mostra messaggio di errore all'utente
                suggestionPane.innerHTML = `
                <div class="ai-error">
                    <p>Non è stato possibile generare suggerimenti per ${cityName}.</p>
                    <p>Errore: ${data.error}</p>
                    <p>Riprova più tardi o cerca informazioni su
                       <a href="https://www.google.com/search?q=cosa+vedere+a+${encodeURIComponent(cityName)}"
                       target="_blank" rel="noopener noreferrer">Google</a>.</p>
                </div>
            `;
            }
            // Fallback se nessun formato è riconosciuto
            else {
                console.error("Formato risposta API non riconosciuto:", data);
                throw new Error("Formato risposta non valido");
            }
        })
        .catch(error => {
            console.error("Errore chiamata API:", error);

            // Mostra un messaggio di errore chiaro all'utente
            suggestionPane.innerHTML = `
            <div class="ai-error">
                <p>Errore durante il caricamento delle informazioni su ${cityName}.</p>
                <p>Problema tecnico: ${error.message}</p>
                <p>Riprova più tardi o visita
                   <a href="https://www.lonelyplanet.com/search?q=${encodeURIComponent(cityName)}"
                   target="_blank" rel="noopener noreferrer">Lonely Planet</a> per informazioni.</p>
                <button class="btn btn-sm btn-outline-primary mt-3" onclick="loadAISuggestions('${type}', '${cityName}')">
                    Riprova
                </button>
            </div>
        `;
        });
}


       function showPlanDetails(planId) {
    try {
        console.log('Mostra dettagli piano:', planId);
        
        if (!planId) {
            console.error('ID non valido passato a showPlanDetails');
            showToast('Errore', 'ID piano non valido', 'danger');
            return;
        }
        
        // Cerca il piano nei dati in memoria
        let planData = null;
        let dataSource = '';
        
        // Cerca nei piani pianificati
        if (destinations && destinations.plannedTrips) {
            planData = destinations.plannedTrips.find(p => p.id && p.id.toString() === planId.toString());
            if (planData) dataSource = 'plans';
        }
        
        // Se non trovato nei piani, cerca nella wishlist
        if (!planData && destinations && destinations.wishlist) {
            planData = destinations.wishlist.find(d => d.id && d.id.toString() === planId.toString());
            if (planData) {
                dataSource = 'wishlist';
                // Se l'elemento è nella wishlist, mostra i dettagli del sogno invece
                showDreamDetails(planId);
                return;
            }
        }
        
        // Se non trovato nella wishlist, cerca nelle visite
        if (!planData && destinations && destinations.visitedCities) {
            planData = destinations.visitedCities.find(v => v.id && v.id.toString() === planId.toString());
            if (planData) {
                dataSource = 'visits';
                // Se l'elemento è nelle visite, mostra i dettagli della visita invece
                showVisitDetails(planId);
                return;
            }
        }
        
        // Se ancora non trovato, cerca nel DOM
        if (!planData) {
            const element = document.querySelector(`.plan-item[data-id="${planId}"]`);
            if (element) {
                // Estrai i dati dal DOM
                const cityName = element.querySelector('.plan-name')?.textContent || 'Città sconosciuta';
                const countryName = element.querySelector('.plan-country')?.textContent || 'Paese sconosciuto';
                const imageUrl = element.querySelector('img')?.src || '/images/placeholder-city.jpg';
                const lat = parseFloat(element.getAttribute('data-lat'));
                const lng = parseFloat(element.getAttribute('data-lng'));
                
                // Crea un oggetto dai dati estratti
                planData = {
                    id: planId,
                    cityName: cityName,
                    countryName: countryName,
                    imageUrl: imageUrl,
                    startDate: new Date(),
                    endDate: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
                    completionPercentage: 0,
                    notes: '',
                    latitude: lat,
                    longitude: lng,
                    checklist: []
                };
                dataSource = 'dom';
            }
        }
        
        // Se ancora non trovato, usa un fallback generico
        if (!planData) {
            planData = {
                id: planId,
                cityName: 'Destinazione',
                countryName: 'Paese non specificato',
                imageUrl: '/images/placeholder-city.jpg',
                startDate: new Date(),
                endDate: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
                completionPercentage: 0,
                notes: 'Nessuna nota disponibile',
                latitude: 0,
                longitude: 0,
                checklist: []
            };
            dataSource = 'fallback';
        }
        
        console.log(`Dati piano trovati in ${dataSource}:`, planData);
        
        // Memorizza l'ID corrente nel modal per i pulsanti di azione
        const modal = document.getElementById('planDetailsModal');
        if (modal) {
            modal.setAttribute('data-plan-id', planId);
        }
        
        // Popola il modal con i dati
        document.getElementById('planCityName').textContent = planData.cityName;
        document.getElementById('planCountryName').textContent = planData.countryName;

        // Gestione sicura dell'immagine
        const bannerImg = document.getElementById('planBannerImg');
        if (bannerImg) {
            bannerImg.onerror = function () {
                this.src = '/images/placeholder-city.jpg';
            };
            bannerImg.src = planData.imageUrl;
        }

        // Formatta e imposta date
        const startDate = planData.startDate ? new Date(planData.startDate) : new Date();
        const endDate = planData.endDate ? new Date(planData.endDate) : new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);

        const dateRangeText = `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
        const planDateRange = document.getElementById('planDateRange');
        if (planDateRange && planDateRange.querySelector('span')) {
            planDateRange.querySelector('span').textContent = dateRangeText;
        }

        // Imposta i valori per i campi di modifica
        const planStartDate = document.getElementById('planStartDate');
        if (planStartDate) {
            planStartDate.value = formatDateForInput(startDate);
        }
        
        const planEndDate = document.getElementById('planEndDate');
        if (planEndDate) {
            planEndDate.value = formatDateForInput(endDate);
        }

        // Percentuale di completamento
        const planProgressBar = document.getElementById('planProgressBar');
        if (planProgressBar) {
            planProgressBar.style.width = `${planData.completionPercentage || 0}%`;
        }
        
        const progressPercentage = document.getElementById('progressPercentage');
        if (progressPercentage) {
            progressPercentage.textContent = planData.completionPercentage || 0;
        }

        // Note
        const planNotes = document.getElementById('planNotes');
        if (planNotes) {
            planNotes.value = planData.notes || '';
        }

        // Configura i pulsanti di azione nel footer
        const removePlanBtn = document.getElementById('removePlanBtn');
        const updatePlanBtn = document.getElementById('updatePlanBtn');
        const markVisitedBtn = document.getElementById('markVisitedBtn');
        
        if (removePlanBtn) {
            removePlanBtn.onclick = function() {
                removePlan(planId);
            };
        }
        
        if (updatePlanBtn) {
            updatePlanBtn.onclick = function() {
                updatePlanDetails(planId);
            };
        }
        
        if (markVisitedBtn) {
            markVisitedBtn.onclick = function() {
                markAsVisited(planId);
            };
        }

        // Popola la checklist
        const checklistContainer = document.getElementById('planChecklist');
        if (checklistContainer) {
            checklistContainer.innerHTML = '';
            
            if (planData.checklist && planData.checklist.length > 0) {
                planData.checklist.forEach(item => {
                    const listItem = document.createElement('li');
                    listItem.className = item.isCompleted ? 'completed' : '';
                    listItem.dataset.id = item.id;

                    const checkIcon = document.createElement('i');
                    checkIcon.className = item.isCompleted ? 'fas fa-check-circle' : 'far fa-circle';
                    checkIcon.style.cursor = 'pointer';
                    checkIcon.onclick = () => toggleChecklistItem(item.id);

                    const textDiv = document.createElement('div');
                    textDiv.className = 'checklist-text';
                    textDiv.textContent = item.title;

                    const categorySpan = document.createElement('span');
                    categorySpan.className = 'checklist-category';
                    categorySpan.textContent = getCategoryLabel(item.category);

                    const dueSpan = document.createElement('span');
                    dueSpan.className = 'checklist-due';
                    if (item.dueDate) {
                        dueSpan.innerHTML = `<i class="far fa-calendar-alt"></i> ${new Date(item.dueDate).toLocaleDateString()}`;
                    }

                    listItem.appendChild(checkIcon);
                    listItem.appendChild(textDiv);
                    listItem.appendChild(categorySpan);
                    listItem.appendChild(dueSpan);
                    checklistContainer.appendChild(listItem);
                });
            } else {
                // Se non ci sono elementi nella checklist, mostra un messaggio
                const emptyItem = document.createElement('li');
                emptyItem.textContent = 'Nessun elemento nella checklist';
                checklistContainer.appendChild(emptyItem);
            }
        }

        // Popola le informazioni sul paese
        populateCountryInfo(planData.countryName);

        // Configura i pulsanti esterni
        setupExternalLinks(planData.cityName, planData.countryName);

        // Sposta la mappa alla destinazione se le coordinate sono valide
        if (planData.latitude && planData.longitude &&
            isValidLatitude(planData.latitude) && isValidLongitude(planData.longitude)) {
            console.log(`Spostamento mappa a: ${planData.latitude}, ${planData.longitude}`);
            flyToDestination(planData.latitude, planData.longitude);
        }

        // Mostra il modal
        const bsModal = new bootstrap.Modal(document.getElementById('planDetailsModal'));
        bsModal.show();
    } catch (error) {
        console.error('Errore in showPlanDetails:', error);
        showToast('Errore', 'Si è verificato un errore durante il caricamento dei dettagli del piano', 'danger');
    }
}

// Helper per formatData
function formatDateForInput(date) {
    if (!date) return '';
    
    if (typeof date === 'string') {
        date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
        return '';
    }
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
}

// Helper per ottenere l'etichetta della categoria
function getCategoryLabel(category) {
    const labels = {
        'travel': 'Viaggio',
        'accommodation': 'Alloggio',
        'documents': 'Documenti',
        'activities': 'Attività',
        'other': 'Altro'
    };
    return labels[category] || category;
}




// Funzione che sincronizza completamente l'intero stato dell'app
function sincronizzaStatoApp() {
    console.log('Sincronizzazione stato app con wishlist items:', destinations.wishlist ? destinations.wishlist.length : 0);
    
    // Ensure all arrays exist to prevent "cannot read properties of undefined" errors
    if (!destinations) destinations = {};
    if (!destinations.wishlist) destinations.wishlist = [];
    if (!destinations.plannedTrips) destinations.plannedTrips = [];
    if (!destinations.visitedCities) destinations.visitedCities = [];
    
    // Ricostruisci la sidebar con i dati attuali
    ricostruisciSidebar();
    
    // Aggiorna i marker sulla mappa
    if (map) {
        setTimeout(() => {
            loadMapMarkers();
            map.invalidateSize();
        }, 200);
    }
}

// Helper per configurare i pulsanti nei modal
function configuraPulsantiModal() {
    // Configura i pulsanti nel footer del modal dei piani
    const removePlanBtn = document.getElementById('removePlanBtn');
    const updatePlanBtn = document.getElementById('updatePlanBtn');
    const markVisitedBtn = document.getElementById('markVisitedBtn');
    
    if (removePlanBtn) {
        removePlanBtn.onclick = function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) removePlan(planId);
        };
    }
    
    if (updatePlanBtn) {
        updatePlanBtn.onclick = function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) updatePlanDetails(planId);
        };
    }
    
    if (markVisitedBtn) {
        markVisitedBtn.onclick = function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) markAsVisited(planId);
        };
    }
    
    // Configura il pulsante planTripBtn nel modal dei dettagli
    const planTripBtn = document.getElementById('planTripBtn');
    if (planTripBtn) {
        planTripBtn.onclick = function() {
            const modal = document.getElementById('dreamDetailsModal');
            const dreamId = modal.getAttribute('data-dream-id');
            if (dreamId) moveToPlanningPhase(dreamId);
        };
    }
}

// Funzione per ricostruire la sidebar
function ricostruisciSidebar() {
    // Ricostruisci wishlist
    const wishlistContainer = document.getElementById('wishlistItems');
    if (wishlistContainer && destinations.wishlist) {
        wishlistContainer.innerHTML = '';
        
        destinations.wishlist.forEach(dream => {
            const priorityClass = dream.priority === 3 ? 'high' : 
                                 dream.priority === 2 ? 'medium' : 'low';
            
            wishlistContainer.innerHTML += `
                <div class="dream-item" data-city="${dream.cityName.toLowerCase()}" data-country="${dream.countryName.toLowerCase()}"
                     data-id="${dream.id}" data-lat="${dream.latitude}" data-lng="${dream.longitude}"
                     onclick="flyToDestination(${dream.latitude}, ${dream.longitude})">
                    <div class="dream-item-image">
                        <img src="${dream.imageUrl || '/images/placeholder-city.jpg'}" alt="${dream.cityName}">
                        <div class="dream-flag">
                            <img src="/images/flags/${getCountryCode(dream.countryName).toLowerCase()}.png" alt="${dream.countryName}">
                        </div>
                        <div class="dream-priority ${priorityClass}">
                            <i class="fas fa-star"></i>
                            ${priorityClass === 'high' ? '<i class="fas fa-star"></i><i class="fas fa-star"></i>' : 
                              priorityClass === 'medium' ? '<i class="fas fa-star"></i>' : ''}
                        </div>
                    </div>
                    <div class="dream-item-content">
                        <h3 class="dream-name">${dream.cityName}</h3>
                        <p class="dream-country">${dream.countryName}</p>
                        <div class="dream-tags">
                            ${(dream.tags || ['viaggio']).map(tag => `<span class="dream-tag">${tag}</span>`).join('')}
                        </div>
                        <div class="dream-note">${dream.notes ? (dream.notes.length > 100 ? dream.notes.substring(0, 100) + '...' : dream.notes) : ''}</div>
                    </div>
                    <div class="dream-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="${dream.id}">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-warning" onclick="moveToPlanningPhase('${dream.id}')">
                            <i class="fas fa-calendar-plus"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('${dream.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
        
        if (destinations.wishlist.length === 0) {
            wishlistContainer.innerHTML = `
                <div class="empty-state">
                    <img src="/images/empty-wishlist.svg" alt="Wishlist vuota" class="empty-state-icon">
                    <p>La tua lista dei desideri è vuota</p>
                    <p class="text-muted">Aggiungi le destinazioni dei tuoi sogni con il pulsante qui sotto</p>
                </div>
            `;
        }
    }
    
    // Ricostruisci pianificazione
    const planningContainer = document.getElementById('planningItems');
    if (planningContainer && destinations.plannedTrips) {
        planningContainer.innerHTML = '';
        
        destinations.plannedTrips.forEach(plan => {
            const today = new Date();
            const startDate = plan.startDate ? new Date(plan.startDate) : today;
            const daysRemaining = Math.round((startDate - today) / (1000 * 60 * 60 * 24));
            
            planningContainer.innerHTML += `
                <div class="plan-item" data-city="${plan.cityName.toLowerCase()}" data-country="${plan.countryName.toLowerCase()}"
                     data-id="${plan.id}" data-lat="${plan.latitude}" data-lng="${plan.longitude}"
                     onclick="flyToDestination(${plan.latitude}, ${plan.longitude})">
                    <div class="plan-item-image">
                        <img src="${plan.imageUrl || '/images/placeholder-city.jpg'}" alt="${plan.cityName}">
                        <div class="plan-flag">
                            <img src="/images/flags/${getCountryCode(plan.countryName).toLowerCase()}.png" alt="${plan.countryName}">
                        </div>
                        <div class="plan-dates">
                            <div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div>
                            <div class="plan-date-range">${startDate.toLocaleDateString()}</div>
                        </div>
                    </div>
                    <div class="plan-item-content">
                        <h3 class="plan-name">${plan.cityName}</h3>
                        <p class="plan-country">${plan.countryName}</p>
                        <div class="plan-countdown">
                            <i class="far fa-calendar-alt"></i>
                            <strong>${daysRemaining}</strong>
                            giorni rimanenti
                        </div>
                        <div class="plan-progress">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: ${plan.completionPercentage || 0}%"
                                    aria-valuenow="${plan.completionPercentage || 0}" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <div class="plan-progress-text">Completamento: ${plan.completionPercentage || 0}%</div>
                        </div>
                        <ul class="plan-checklist">
                            ${plan.checklist && plan.checklist.length > 0 ? 
                              plan.checklist.slice(0, 3).map(item => `
                                <li class="${item.isCompleted ? 'completed' : ''}">
                                    <i class="${item.isCompleted ? 'fas fa-check-circle' : 'far fa-circle'}"></i>
                                    ${item.title}
                                </li>
                              `).join('') :
                              '<li>Nessun elemento nella checklist</li>'}
                            ${plan.checklist && plan.checklist.length > 3 ? 
                              `<li class="more">+ altri ${plan.checklist.length - 3} elementi</li>` : ''}
                        </ul>
                    </div>
                    <div class="plan-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="${plan.id}">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('${plan.id}')">
                            <i class="fas fa-check"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('${plan.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
        
        if (destinations.plannedTrips.length === 0) {
            planningContainer.innerHTML = `
                <div class="empty-state">
                    <img src="/images/empty-planning.svg" alt="Nessun viaggio pianificato" class="empty-state-icon">
                    <p>Non hai ancora pianificato viaggi</p>
                    <p class="text-muted">Sposta un sogno dalla tua wishlist qui per iniziare a pianificarlo</p>
                </div>
            `;
        }
    }
}

// Helper per ottenere codice paese
function getCountryCode(countryName) {
    const countryMap = {
        'Italia': 'it',
        'Francia': 'fr',
        'Germania': 'de',
        'Spagna': 'es',
        'Regno Unito': 'gb',
        'Stati Uniti': 'us',
        'Giappone': 'jp',
        // Aggiungi altri paesi se necessario
    };
    
    return countryMap[countryName] || 'unknown';
}

// Funzione che ricostruisce completamente le liste nella sidebar
function ricostruisciSidebar() {
    // Ricostruisci wishlist
    const wishlistContainer = document.getElementById('wishlistItems');
    if (wishlistContainer && destinations.wishlist) {
        wishlistContainer.innerHTML = '';
        
        destinations.wishlist.forEach(dream => {
            const priorityClass = dream.priority === 3 ? 'high' : 
                                 dream.priority === 2 ? 'medium' : 'low';
            
            wishlistContainer.innerHTML += `
                <div class="dream-item" data-city="${dream.cityName.toLowerCase()}" data-country="${dream.countryName.toLowerCase()}"
                     data-id="${dream.id}" data-lat="${dream.latitude}" data-lng="${dream.longitude}"
                     onclick="flyToDestination(${dream.latitude}, ${dream.longitude})">
                    <div class="dream-item-image">
                        <img src="${dream.imageUrl || '/images/placeholder-city.jpg'}" alt="${dream.cityName}">
                        <div class="dream-flag">
                            <img src="/images/flags/${getCountryCode(dream.countryName).toLowerCase()}.png" alt="${dream.countryName}">
                        </div>
                        <div class="dream-priority ${priorityClass}">
                            <i class="fas fa-star"></i>
                            ${priorityClass === 'high' ? '<i class="fas fa-star"></i><i class="fas fa-star"></i>' : 
                              priorityClass === 'medium' ? '<i class="fas fa-star"></i>' : ''}
                        </div>
                    </div>
                    <div class="dream-item-content">
                        <h3 class="dream-name">${dream.cityName}</h3>
                        <p class="dream-country">${dream.countryName}</p>
                    </div>
                    <div class="dream-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="showDreamDetails('${dream.id}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="moveToPlanningPhase('${dream.id}')">
                            <i class="fas fa-calendar-alt"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('${dream.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
    }
    
    // Ricostruisci pianificazione
    const planningContainer = document.getElementById('planningItems');
    if (planningContainer && destinations.plannedTrips) {
        planningContainer.innerHTML = '';
        
        destinations.plannedTrips.forEach(plan => {
            const today = new Date();
            const startDate = plan.startDate ? new Date(plan.startDate) : today;
            const daysRemaining = Math.round((startDate - today) / (1000 * 60 * 60 * 24));
            
            planningContainer.innerHTML += `
                <div class="plan-item" data-city="${plan.cityName.toLowerCase()}" data-country="${plan.countryName.toLowerCase()}"
                     data-id="${plan.id}" data-lat="${plan.latitude}" data-lng="${plan.longitude}"
                     onclick="flyToDestination(${plan.latitude}, ${plan.longitude})">
                    <div class="plan-item-image">
                        <img src="${plan.imageUrl || '/images/placeholder-city.jpg'}" alt="${plan.cityName}">
                        <div class="plan-flag">
                            <img src="/images/flags/${getCountryCode(plan.countryName).toLowerCase()}.png" alt="${plan.countryName}">
                        </div>
                        <div class="plan-dates">
                            <div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div>
                            <div class="plan-date-range">${startDate.toLocaleDateString()}</div>
                        </div>
                    </div>
                    <div class="plan-item-content">
                        <h3 class="plan-name">${plan.cityName}</h3>
                        <p class="plan-country">${plan.countryName}</p>
                        <div class="plan-countdown">
                            <i class="far fa-calendar-alt"></i>
                            <strong>${daysRemaining}</strong>
                            giorni rimanenti
                        </div>
                        <div class="plan-progress">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: ${plan.completionPercentage || 0}%"
                                    aria-valuenow="${plan.completionPercentage || 0}" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <div class="plan-progress-text">Completamento: ${plan.completionPercentage || 0}%</div>
                        </div>
                        <ul class="plan-checklist">
                            ${plan.checklist && plan.checklist.length > 0 ? 
                              plan.checklist.map(item => `<li>${item.title}</li>`).join('') :
                              '<li>Nessun elemento nella checklist</li>'}
                        </ul>
                    </div>
                    <div class="plan-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="showPlanDetails('${plan.id}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('${plan.id}')">
                            <i class="fas fa-check"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('${plan.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
    }
}

// Helper per ottenere codice paese (semplificato)
function getCountryCode(countryName) {
    const countryMap = {
        'Italia': 'it',
        'Francia': 'fr',
        'Germania': 'de',
        'Spagna': 'es',
        'Regno Unito': 'gb',
        'Stati Uniti': 'us',
        'Giappone': 'jp',
        // Aggiungi altri paesi qui
    };
    
    return countryMap[countryName] || 'unknown';
}



function getDestinationType(itemId) {
    // Verifica in quale collezione si trova l'ID
    if (destinations && destinations.wishlist) {
        const inWishlist = destinations.wishlist.some(item => 
            item.id && item.id.toString() === itemId.toString());
        if (inWishlist) return "wishlist";
    }
    
    if (destinations && destinations.plannedTrips) {
        const inPlanned = destinations.plannedTrips.some(item => 
            item.id && item.id.toString() === itemId.toString());
        if (inPlanned) return "plannedTrips";
    }
    
    if (destinations && destinations.visitedCities) {
        const inVisited = destinations.visitedCities.some(item => 
            item.id && item.id.toString() === itemId.toString());
        if (inVisited) return "visitedCities";
    }
    
    // Se non è stato trovato in nessuna collezione
    return "unknown";
}

        // Helper per formattare date per input
        function formatDateForInput(date) {
            const d = new Date(date);
            const month = '' + (d.getMonth() + 1);
            const day = '' + d.getDate();
            const year = d.getFullYear();

            return [year, month.padStart(2, '0'), day.padStart(2, '0')].join('-');
        }




        // Funzione per impostare i link esterni
        function setupExternalLinks(cityName, countryName) {
    console.log(`Configurazione link esterni per ${cityName}, ${countryName}`);
    
    if (!cityName || !countryName) {
        console.error('Nome città o paese mancante');
        return;
    }
    
    // Prepara una query di ricerca
    const searchQuery = `${cityName}, ${countryName}`;
    const encodedQuery = encodeURIComponent(searchQuery);
    
    // Google Maps - usa ID invece di :contains
    const googleMapsBtn = document.getElementById('googleMapsBtn');
    if (googleMapsBtn) {
        googleMapsBtn.onclick = function(e) {
            e.preventDefault();
            window.open(`https://www.google.com/maps/search/${encodedQuery}`, '_blank');
            return false;
        };
        googleMapsBtn.href = `https://www.google.com/maps/search/${encodedQuery}`;
    }
    
    // Booking.com
    const bookingBtn = document.getElementById('bookingBtn');
    if (bookingBtn) {
        bookingBtn.onclick = function(e) {
            e.preventDefault();
            window.open(`https://www.booking.com/searchresults.html?ss=${encodedQuery}`, '_blank');
            return false;
        };
        bookingBtn.href = `https://www.booking.com/searchresults.html?ss=${encodedQuery}`;
    }
    
    // TripAdvisor
    const tripAdvisorBtn = document.getElementById('tripAdvisorBtn');
    if (tripAdvisorBtn) {
        tripAdvisorBtn.onclick = function(e) {
            e.preventDefault();
            window.open(`https://www.tripadvisor.com/Search?q=${encodedQuery}`, '_blank');
            return false;
        };
        tripAdvisorBtn.href = `https://www.tripadvisor.com/Search?q=${encodedQuery}`;
    }
}




        // Funzione per visualizzare i dettagli di una città visitata
        function showVisitDetails(visitId) {
            alert("Funzionalità in sviluppo - Ricordi per ID: " + visitId);
            // Qui implementerai la visualizzazione dei ricordi di viaggio
        }

        function removePlan(planId) {
    if (!confirm('Sei sicuro di voler eliminare questo piano di viaggio?')) return;

    // Mostra indicatore di caricamento
    showLoadingOverlay('Eliminazione in corso...');

    fetch('/DreamMap?handler=RemovePlan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify({ planId })
    })
    .then(response => response.json())
    .then(data => {
        // Nascondi l'indicatore di caricamento
        hideLoadingOverlay();
        
        if (data.success) {
            // Chiudi il modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('planDetailsModal'));
            if (modal) modal.hide();
            
            // Rimuovi l'elemento dall'interfaccia
            const planElement = document.querySelector(`.plan-item[data-id="${planId}"]`);
            if (planElement) planElement.remove();
            
            // Rimuovi dai dati in memoria
            if (destinations && destinations.plannedTrips) {
                destinations.plannedTrips = destinations.plannedTrips.filter(
                    plan => plan.id.toString() !== planId.toString()
                );
            }
            
            // Aggiorna i marker sulla mappa
            loadMapMarkers();
            
            // Sincronizza lo stato dell'app
            sincronizzaStatoApp();
            
            // Mostra un messaggio di successo
            showToast('Successo', 'Piano eliminato con successo!', 'success');
        } else {
            showToast('Errore', data.message || 'Errore durante l\'eliminazione del piano', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Errore durante l\'eliminazione:', error);
        showToast('Errore', 'Si è verificato un errore durante l\'eliminazione', 'danger');
    });
}

        // Funzione per segnare un viaggio pianificato come visitato
        function markAsVisited(planId) {
    if (!confirm('Sei sicuro di voler segnare questa destinazione come visitata?')) return;

    // Trova il piano nei dati
    if (!destinations || !destinations.plannedTrips) {
        showToast('Errore', 'Dati non disponibili', 'danger');
        return;
    }
    
    const plan = destinations.plannedTrips.find(
        item => item.id && item.id.toString() === planId.toString()
    );
    
    if (!plan) {
        showToast('Errore', 'Piano non trovato nei dati', 'danger');
        return;
    }

    // Mostra indicatore di caricamento
    showLoadingOverlay('Spostamento in corso...');

    // Chiama l'API per segnare come visitato
    fetch('/DreamMap?handler=MarkAsVisited', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify({ planId })
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingOverlay();
        
        if (data.success) {
            // Chiudi il modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('planDetailsModal'));
            if (modal) modal.hide();
            
            // Inizializza l'array delle città visitate se necessario
            if (!destinations.visitedCities) {
                destinations.visitedCities = [];
            }
            
            // Crea un nuovo oggetto per le città visitate
            const visitData = {
                id: plan.id,
                cityName: plan.cityName,
                countryName: plan.countryName,
                imageUrl: plan.imageUrl,
                latitude: plan.latitude,
                longitude: plan.longitude,
                visitDate: plan.endDate || new Date(),
                rating: 0, // Rating iniziale
                memories: plan.notes || '',
                photos: []
            };
            
            // Aggiungi alle città visitate
            destinations.visitedCities.push(visitData);
            
            // Rimuovi dalla pianificazione
            destinations.plannedTrips = destinations.plannedTrips.filter(
                item => item.id.toString() !== planId.toString()
            );
            
            // Aggiorna l'interfaccia
            sincronizzaStatoApp();
            
            // Passa alla tab delle visite
            const visitedTab = document.getElementById('visited-tab');
            if (visitedTab) {
                visitedTab.click();
            }
            
            showToast('Successo', 'Destinazione segnata come visitata!', 'success');
        } else {
            showToast('Errore', data.message || 'Errore durante lo spostamento', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Errore durante lo spostamento:', error);
        showToast('Errore', 'Si è verificato un errore durante lo spostamento', 'danger');
    });
}

        // Funzione per ottenere l'etichetta della categoria
        function getCategoryLabel(category) {
            const labels = {
                'travel': 'Viaggio',
                'accommodation': 'Alloggio',
                'documents': 'Documenti',
                'activities': 'Attività',
                'other': 'Altro'
            };
            return labels[category] || category;
        }

        // Funzione per aggiornare i dettagli del piano
       function updatePlanDetails(planId) {
    console.log('Aggiornamento piano:', planId);
    
    // Trova il piano nei dati
    if (!destinations || !destinations.plannedTrips) {
        showToast('Errore', 'Dati non disponibili', 'danger');
        return;
    }
    
    const planIndex = destinations.plannedTrips.findIndex(
        plan => plan.id && plan.id.toString() === planId.toString()
    );
    
    if (planIndex === -1) {
        showToast('Errore', 'Piano non trovato nei dati', 'danger');
        return;
    }
    
    // Raccogli i dati dal form
    const startDateInput = document.getElementById('planStartDate');
    const endDateInput = document.getElementById('planEndDate');
    const notesInput = document.getElementById('planNotes');
    
    if (!startDateInput || !endDateInput) {
        showToast('Errore', 'Form incompleto', 'danger');
        return;
    }
    
    const startDate = startDateInput.value;
    const endDate = endDateInput.value;
    const notes = notesInput ? notesInput.value : '';
    
    // Verifica le date
    if (!startDate || !endDate) {
        showToast('Errore', 'Le date sono obbligatorie', 'danger');
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        showToast('Errore', 'La data di inizio deve essere precedente alla data di fine', 'danger');
        return;
    }
    
    // Prepara i dati da inviare
    const updateData = {
        planId: planId,
        startDate: startDate,
        endDate: endDate,
        notes: notes
    };
    
    // Mostra indicatore di caricamento
    showLoadingOverlay('Salvataggio in corso...');
    
    // Chiama l'API per aggiornare i dati
    fetch('/DreamMap?handler=UpdatePlan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify(updateData)
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingOverlay();
        
        if (data.success) {
            // Aggiorna i dati in memoria
            const plan = destinations.plannedTrips[planIndex];
            plan.startDate = new Date(startDate);
            plan.endDate = new Date(endDate);
            plan.notes = notes;
            
            // Aggiorna la visualizzazione
            sincronizzaStatoApp();
            
            // Aggiorna il modal
            const dateRangeText = `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;
            const planDateRange = document.getElementById('planDateRange');
            if (planDateRange && planDateRange.querySelector('span')) {
                planDateRange.querySelector('span').textContent = dateRangeText;
            }
            
            showToast('Successo', 'Modifiche salvate con successo!', 'success');
        } else {
            showToast('Errore', data.message || 'Errore durante il salvataggio delle modifiche', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Errore durante l\'aggiornamento:', error);
        showToast('Errore', 'Si è verificato un errore durante il salvataggio', 'danger');
    });
}

        // Helper per convertire l'etichetta categoria nel codice
        function getCategoryCode(label) {
            const mapping = {
                'Viaggio': 'travel',
                'Alloggio': 'accommodation',
                'Documenti': 'documents',
                'Attività': 'activities',
                'Altro': 'other'
            };
            return mapping[label] || 'other';
        }

        // Funzione helper per ottenere il token antiforgery
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Gestione degli elementi della checklist
        function toggleChecklistItem(itemId) {
            // Qui implementerai l'aggiornamento dello stato dell'elemento
            console.log('Toggle item:', itemId);

            // Per ora, simula il cambio di stato
            const item = document.querySelector(`.plan-detailed-checklist li[data-id="${itemId}"]`);
            if (item) {
                if (item.classList.contains('completed')) {
                    item.classList.remove('completed');
                    item.querySelector('i').className = 'far fa-circle';
                } else {
                    item.classList.add('completed');
                    item.querySelector('i').className = 'fas fa-check-circle';
                }

                // Ricalcola e aggiorna la percentuale
                updateCompletionPercentage();
            }
        }

        // Funzione per mostrare i toast
        function showToast(title, message, type) {
            // Crea un elemento toast
            const toastContainer = document.getElementById('toast-container') || createToastContainer();

            const toastId = 'toast-' + new Date().getTime();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center border-0 bg-${type} text-white`;
            toast.id = toastId;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <strong>${title}</strong>: ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            toastContainer.appendChild(toast);

            // Inizializza e mostra il toast
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 5000
            });
            bsToast.show();

            // Rimuovi il toast dal DOM dopo che è stato nascosto
            toast.addEventListener('hidden.bs.toast', function () {
                toast.remove();
            });
        }

        // Funzione per creare il container dei toast
        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }

        // Funzione per aggiornare la percentuale di completamento
        function updateCompletionPercentage() {
            const items = document.querySelectorAll('.plan-detailed-checklist li');
            const completedItems = document.querySelectorAll('.plan-detailed-checklist li.completed');

            if (items.length === 0) return;

            const percentage = Math.round((completedItems.length / items.length) * 100);
            const planProgressBar = document.getElementById('planProgressBar');
            if (planProgressBar) {
                planProgressBar.style.width = `${percentage}%`;
            }
            
            const progressPercentage = document.getElementById('progressPercentage');
            if (progressPercentage) {
                progressPercentage.textContent = percentage;
            }
        }

        // Funzione per aggiungere elementi alla checklist
        function addChecklistItem(title, category, dueDate) {
            const checklistContainer = document.getElementById('planChecklist');
            if (!checklistContainer) return;

            // Genera un ID temporaneo
            const tempId = new Date().getTime();

            const listItem = document.createElement('li');
            listItem.dataset.id = tempId;

            const checkIcon = document.createElement('i');
            checkIcon.className = 'far fa-circle';
            checkIcon.style.cursor = 'pointer';
            checkIcon.onclick = () => toggleChecklistItem(tempId);

            const textDiv = document.createElement('div');
            textDiv.className = 'checklist-text';
            textDiv.textContent = title;

            const categorySpan = document.createElement('span');
            categorySpan.className = 'checklist-category';
            categorySpan.textContent = getCategoryLabel(category);

            const dueSpan = document.createElement('span');
            dueSpan.className = 'checklist-due';
            if (dueDate) {
                dueSpan.innerHTML = `<i class="far fa-calendar-alt"></i> ${new Date(dueDate).toLocaleDateString()}`;
            }

            listItem.appendChild(checkIcon);
            listItem.appendChild(textDiv);
            listItem.appendChild(categorySpan);
            listItem.appendChild(dueSpan);
            checklistContainer.appendChild(listItem);

            // Aggiorna la percentuale di completamento
            updateCompletionPercentage();
        }

        // Sposta un sogno alla fase di pianificazione
function moveToPlanningPhase(dreamId) {
    console.log('Sposta alla fase di pianificazione:', dreamId);

    // Trova i dettagli dell'elemento nella wishlist
    if (!destinations || !destinations.wishlist) {
        showToast('Errore', 'Dati non disponibili', 'danger');
        return;
    }

    // Cerca l'elemento nei dati
    const dreamToMove = destinations.wishlist.find(dream => dream.id && dream.id.toString() === dreamId.toString());
    if (!dreamToMove) {
        showToast('Errore', 'Elemento non trovato nei dati', 'danger');
        return;
    }

    // Mostra indicatore di caricamento
    const loadingIndicator = document.createElement('div');
    loadingIndicator.className = 'position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow';
    loadingIndicator.innerHTML = `
        <div class="d-flex align-items-center">
            <div class="spinner-border text-primary me-3" role="status"></div>
            <span>Spostamento in corso...</span>
        </div>
    `;
    document.body.appendChild(loadingIndicator);

    // Ottieni il token anti-forgery
    const token = getAntiForgeryToken();

    // Esegui la chiamata AJAX per spostare la destinazione
    fetch('/DreamMap?handler=MoveToPlanning', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token
        },
        body: JSON.stringify({ dreamId: dreamId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Errore HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        try {
            // Rimuovi indicatore di caricamento
            document.body.removeChild(loadingIndicator);

            if (data.success) {
                // Chiudi il modal se aperto
                const modal = bootstrap.Modal.getInstance(document.getElementById('dreamDetailsModal'));
                if (modal) modal.hide();

                // Crea una nuova pianificazione dai dati del sogno
                const newPlan = {
                    id: dreamToMove.id,
                    cityName: dreamToMove.cityName,
                    countryName: dreamToMove.countryName,
                    imageUrl: dreamToMove.imageUrl,
                    notes: dreamToMove.notes || '',
                    latitude: dreamToMove.latitude,
                    longitude: dreamToMove.longitude,
                    tags: dreamToMove.tags || [],
                    startDate: new Date(new Date().getTime() + (30 * 24 * 60 * 60 * 1000)),
                    endDate: new Date(new Date().getTime() + (37 * 24 * 60 * 60 * 1000)),
                    completionPercentage: 0,
                    checklist: []
                };

                // Inizializza l'array dei pianificati se necessario
                if (!destinations.plannedTrips) {
                    destinations.plannedTrips = [];
                }

                // Aggiungi alla pianificazione
                destinations.plannedTrips.push(newPlan);

                // Rimuovi dalla wishlist
                destinations.wishlist = destinations.wishlist.filter(dream => 
                    !dream.id || dream.id.toString() !== dreamId.toString());

                // FONDAMENTALE: Sincronizza tutto lo stato dell'app
                sincronizzaStatoApp();

                // Passa alla tab di pianificazione
                const planningTab = document.getElementById('planning-tab');
                if (planningTab) {
                    planningTab.click();
                }

                // Mostra messaggio di successo
                showToast('Successo', 'Destinazione spostata nella fase di pianificazione!', 'success');
            } else {
                showToast('Errore', data.message || 'Si è verificato un errore durante lo spostamento della destinazione', 'danger');
            }
        } catch (error) {
            console.error('Errore durante l\'elaborazione della risposta:', error);
            showToast('Errore', 'Si è verificato un errore durante l\'elaborazione della risposta', 'danger');
        }
    })
    .catch(error => {
        // Rimuovi indicatore di caricamento
        if (document.body.contains(loadingIndicator)) {
            document.body.removeChild(loadingIndicator);
        }

        console.error('Errore durante lo spostamento:', error);
        showToast('Errore', 'Si è verificato un errore durante lo spostamento della destinazione', 'danger');
    });
}




        // Funzione per popolare le informazioni sui paesi
        function populateCountryInfo(countryName) {
    // In una implementazione reale, questi dati verrebbero caricati da un'API
    const currencyInfo = document.getElementById('currencyInfo');
    const languageInfo = document.getElementById('languageInfo');
    const timeInfo = document.getElementById('timeInfo');
    
    if (!currencyInfo || !languageInfo || !timeInfo) {
        console.error('Elementi DOM per le informazioni sul paese non trovati');
        return;
    }
    
    if (countryName === 'Francia') {
        currencyInfo.innerHTML = `
            <p><strong>Euro (€)</strong></p>
            <p>Cambio: 1 EUR = 1.09 USD</p>
        `;

        languageInfo.innerHTML = `
            <p><strong>Francese</strong></p>
            <p>Frasi utili:</p>
            <ul>
                <li>Bonjour - Buongiorno</li>
                <li>Merci - Grazie</li>
                <li>S'il vous plaît - Per favore</li>
                <li>Excusez-moi - Mi scusi</li>
                <li>Au revoir - Arrivederci</li>
            </ul>
        `;

        timeInfo.innerHTML = `
            <p><strong>CET/CEST</strong></p>
            <p>UTC+1 (Inverno), UTC+2 (Estate)</p>
            <p>Stessa ora dell'Italia</p>
        `;
    } else if (countryName === 'Giappone') {
        currencyInfo.innerHTML = `
            <p><strong>Yen (¥)</strong></p>
            <p>Cambio: 1 JPY = 0.0067 USD</p>
        `;

        languageInfo.innerHTML = `
            <p><strong>Giapponese</strong></p>
            <p>Frasi utili:</p>
            <ul>
                <li>こんにちは (Konnichiwa) - Buongiorno</li>
                <li>ありがとう (Arigatou) - Grazie</li>
                <li>お願いします (Onegaishimasu) - Per favore</li>
                <li>すみません (Sumimasen) - Mi scusi</li>
                <li>さようなら (Sayounara) - Arrivederci</li>
            </ul>
        `;

        timeInfo.innerHTML = `
            <p><strong>JST</strong></p>
            <p>UTC+9</p>
            <p>+8 ore rispetto all'Italia</p>
        `;
    } else if (countryName === 'Stati Uniti') {
        currencyInfo.innerHTML = `
            <p><strong>Dollaro ($)</strong></p>
            <p>Cambio: 1 USD = 0.92 EUR</p>
        `;

        languageInfo.innerHTML = `
            <p><strong>Inglese</strong></p>
            <p>Frasi utili:</p>
            <ul>
                <li>Hello - Ciao</li>
                <li>Thank you - Grazie</li>
                <li>Please - Per favore</li>
                <li>Excuse me - Scusa/Permesso</li>
                <li>Goodbye - Arrivederci</li>
            </ul>
        `;

        timeInfo.innerHTML = `
            <p><strong>Vari fusi orari</strong></p>
            <p>New York (EST/EDT): UTC-5/UTC-4</p>
            <p>Chicago (CST/CDT): UTC-6/UTC-5</p>
            <p>Denver (MST/MDT): UTC-7/UTC-6</p>
            <p>Los Angeles (PST/PDT): UTC-8/UTC-7</p>
            <p>Da -6 a -9 ore rispetto all'Italia</p>
        `;
    } else {
        // Per paesi non configurati, mostra un messaggio generico
        const genericInfo = `
            <p>Informazioni dettagliate su ${countryName} non disponibili.</p>
            <p>Ti consigliamo di cercare informazioni su:</p>
            <ul>
                <li>Valuta locale e tasso di cambio</li>
                <li>Lingua e frasi basilari</li>
                <li>Fuso orario e differenza con l'Italia</li>
                <li>Requisiti per il visto</li>
                <li>Corrente elettrica e adattatori</li>
            </ul>
        `;
        currencyInfo.innerHTML = genericInfo;
        languageInfo.innerHTML = '';
        timeInfo.innerHTML = '';
    }
}
                       






function initializeSuggestionTabs() {
    console.log('Inizializzazione dei tab per le informazioni sulla destinazione');
    
    // Seleziona tutti i tab nel modal
    document.querySelectorAll('.suggestion-tab').forEach(tab => {
        // Rimuovi qualsiasi listener esistente clonando l'elemento
        const newTab = tab.cloneNode(true);
        tab.parentNode.replaceChild(newTab, tab);
        
        // Aggiungi nuovo listener
        newTab.addEventListener('click', function() {
            // Ottieni il tab target dal data-attribute
            const targetTab = this.getAttribute('data-tab');
            if (!targetTab) return;
            
            console.log('Click su tab:', targetTab);
            
            // Rimuovi la classe active da tutti i tab
            document.querySelectorAll('.suggestion-tab').forEach(t => {
                t.classList.remove('active');
            });
            
            // Aggiungi la classe active al tab cliccato
            this.classList.add('active');
            
            // Nascondi tutti i pannelli contenuto
            document.querySelectorAll('.suggestion-pane').forEach(pane => {
                pane.classList.remove('active');
            });
            
            // Mostra il pannello target
            const targetPane = document.querySelector(`.suggestion-pane[data-pane="${targetTab}"]`);
            if (targetPane) {
                targetPane.classList.add('active');
            } else {
                console.error('Pannello target non trovato:', targetTab);
            }
        });
    });
    
    // Attiva il primo tab per impostazione predefinita
    const firstTab = document.querySelector('.suggestion-tab');
    if (firstTab) {
        firstTab.click();
    }
}



function removeDream(dreamId) {
    if (!confirm('Sei sicuro di voler rimuovere questa destinazione?')) return;

    fetch('/DreamMap?handler=RemoveDream', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify({ dreamId })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.querySelector(`[data-id="${dreamId}"]`).remove();
                showToast('Successo', 'Destinazione rimossa con successo!', 'success');

                // Aggiorna i dati in memoria
                if (destinations && destinations.wishlist) {
                    destinations.wishlist = destinations.wishlist.filter(d => d.id.toString() !== dreamId.toString());
                }

                // Aggiorna i marker sulla mappa
                loadMapMarkers();
            } else {
                showToast('Errore', data.message || 'Si è verificato un errore durante la rimozione', 'danger');
            }
        })
        .catch(error => {
            console.error('Errore durante la rimozione:', error);
            showToast('Errore', 'Si è verificato un errore durante la rimozione', 'danger');
        });
}
</script>
@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <style>
        :root {
            --primary-color: #1a73e8;
            --primary-light: rgba(26, 115, 232, 0.1);
            --accent-color: #2ecc71;
            --accent-light: rgba(46, 204, 113, 0.1);
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --dark-color: #2c3e50;
            --light-color: #f8f9fa;
            --muted-color: #6c757d;
            --border-radius: 12px;
            --box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }
        
        body {
            background-color: #f2f7ff;
            overflow: hidden;
        }
        
        /* Container principale */
        .dreammap-container {
            display: grid;
            grid-template-columns: 380px 1fr;
            height: calc(100vh - 56px);
            overflow: hidden;
        }
        
        /* Sidebar */
        .dreammap-sidebar {
            background-color: white;
            border-right: 1px solid rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            height: 100%;
        }
        .custom-marker-icon {
    background-color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
    width: 30px;
    height: 30px;
}

.ai-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
    text-align: center;
}

        .ai-error {
            background-color: #fff5f5;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
.ai-suggestion-list {
    padding-left: 20px;
}

.ai-suggestion-list li {
    margin-bottom: 10px;
}

#detailsBannerImg {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.dream-tag {
    display: inline-block;
    background-color: var(--primary-color-light);
    color: var(--primary-color);
    border-radius: 15px;
    padding: 2px 10px;
    margin-right: 5px;
    margin-bottom: 5px;
    font-size: 0.8rem;
}
        .dreammap-header {
            padding: 20px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .dreammap-header h2 {
            margin: 0;
            font-size: 1.5rem;
            color: var (--dark-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .dreammap-header h2 i {
            color: var(--warning-color);
        }
        
        .dreammap-header p {
            margin: 5px 0 0;
            color: var (--muted-color);
            font-size: 0.9rem;
        }
        
        /* Nav tabs */
        .nav-tabs {
            padding: 0 20px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .nav-tabs .nav-link {
            border: none;
            border-bottom: 2px solid transparent;
            color: var (--muted-color);
            padding: 10px 0;
            margin-right: 20px;
            font-weight: 500;
        }
        
        .nav-tabs .nav-link.active {
            border-bottom: 2px solid var (--primary-color);
            color: var (--primary-color);
            background: transparent;
        }
        
        .nav-tabs .nav-link i {
            margin-right: 5px;
        }
        
        /* Tab content */
        .tab-content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }
        
        /* Search container */
        .search-container {
            position: relative;
        }
        
        /* Dream list */
        .dreammap-list {
            margin-bottom: 20px;
            min-height: 300px;
        }

        .ai-error {
            background-color: #fff5f5;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        /* Dream item */
        .dream-item, .plan-item {
            background: white;
            border-radius: var (--border-radius);
            box-shadow: var (--box-shadow);
            margin-bottom: 20px;
            overflow: hidden;
            transition: var (--transition);
        }
        
        .dream-item:hover, .plan-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 18px rgba(0,0,0,0.15);
            cursor: pointer;
        }
        
        .dream-item-image, .plan-item-image {
            position: relative;
            height: 120px;
            overflow: hidden;
        }
        
        .dream-item-image img, .plan-item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }
        
        .dream-item:hover .dream-item-image img, 
        .plan-item:hover .plan-item-image img {
            transform: scale(1.05);
        }
        
        .dream-flag, .plan-flag {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 20px;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .dream-flag img, .plan-flag img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .dream-item-content, .plan-item-content {
            padding: 15px;
        }
        
        .dream-priority {
            margin-bottom: 8px;
        }
        
        .dream-priority.low i {
            color: #ffb300;
        }
        
        .dream-priority.medium i {
            color: #fb8c00;
        }
        
        .dream-priority.high i {
            color: #f57c00;
        }
        
        .dream-name, .plan-name {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            color: var (--dark-color);
        }
        
        .dream-country, .plan-country {
            color: var (--muted-color);
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .dream-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-bottom: 10px;
        }
        
        .dream-tag {
            background-color: var (--primary-light);
            color: var (--primary-color);
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 15px;
        }
        
        .dream-note {
            font-size: 0.9rem;
            color: var (--muted-color);
            line-height: 1.4;
        }
        
        .dream-item-actions, .plan-item-actions {
            display: flex;
            gap: 5px;
            padding: 10px 15px;
            border-top: 1px solid rgba(0,0,0,0.05);
        }
        
        /* Plan specific */
        .plan-dates {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
            color: white;
            padding: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .plan-date-icon {
            width: 30px;
            height: 30px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .plan-countdown {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var (--warning-color);
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .plan-progress {
            margin-bottom: 15px;
        }
        
        .plan-progress .progress {
            height: 8px;
            border-radius: 4px;
            background-color: var (--light-color);
            margin-bottom: 5px;
        }
        
        .plan-progress .progress-bar {
            background-color: var (--accent-color);
            border-radius: 4px;
        }
        
        .plan-progress-text {
            font-size: 0.8rem;
            color: var (--muted-color);;
        }
        
        .plan-checklist {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .ai-suggestion-list {
    padding-left: 20px;
}

.ai-suggestion-list li {
    margin-bottom: 10px;
}

.ai-suggestion-list li strong {
    color: var (--primary-color);
}

.ai-error {
    background-color: #fff5f5;
    border-left: 4px solid #f44336;
    padding: 15px;
    border-radius: 4px;
    text-align: center;
}

.ai-error i {
    color: #f44336;
    font-size: 2rem;
    margin-bottom: 10px;
}

        .plan-checklist li {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 5px 0;
            font-size: 0.9rem;
            color: var (--dark-color);;;
        }
        
        .plan-checklist li.completed {
            color: var (--accent-color);
            text-decoration: line-through;
        }
        
        .plan-checklist li.more {
            color: var (--muted-color);
            font-style: italic;
            text-align: center;
            padding-top: 10px;
        }
        
        /* Empty state */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 40px 20px;
            text-align: center;
        }
        
        .empty-state-icon {
            width: 150px;
            height: 150px;
            margin-bottom: 20px;
            opacity: 0.7;
        }
        
        .empty-state p {
            margin-bottom: 5px;
            color: var (--dark-color);;;
        }
        
        .empty-state p.text-muted {
            font-size: 0.9rem;
        }
        
        /* Add dream button */
        .add-dream-btn {
            position: sticky;
            bottom: 0;
            margin-top: 20px;
            width: 100%;
            padding: 12px;
            border-radius: 8px;
        }
        
        /* Discover tab */
        .discover-header {
            margin-bottom: 20px;
        }
        
        .discover-header h3 {
            margin: 0;
            font-size: 1.3rem;
            color: var (--dark-color);;;
        }
        
        .discover-header p {
            color: var (--muted-color);
            font-size: 0.9rem;
            margin: 5px 0 0;
        }
        
        .recommendation-filters {
            margin-bottom: 20px;
        }
        
        .discover-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .discover-card {
            background: white;
            border-radius: var (--border-radius);
            overflow: hidden;
            box-shadow: var (--box-shadow);
            transition: var (--transition);
        }
        
        .discover-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        
        .discover-image {
            position: relative;
            height: 150px;
        }
        
        .discover-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .discover-flag {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 20px;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .discover-flag img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .discover-match {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: rgba(0,0,0,0.7);
            color: white;
            border-radius: 20px;
            padding: 5px 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            line-height: 1.1;
        }
        
        .discover-match span {
            font-weight: 700;
            font-size: 1rem;
        }
        
        .discover-match small {
            font-size: 0.7rem;
            opacity: 0.8;
        }
        
        .discover-content {
            padding: 15px;
        }
        
        .discover-content h4 {
            margin: 0 0 5px 0;
            font-size: 1.1rem;
        }
        
        .discover-content p {
            margin: 0 0 10px 0;
            color: var (--muted-color);
            font-size: 0.9rem;
        }
        
        .discover-tags {
            display: flex;
            gap: 5px;
            margin-bottom: 15px;
        }
        
        .discover-tag {
            background-color: var (--primary-light);
            color: var (--primary-color);
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 15px;
        }
        
        .discover-highlights {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .discover-highlight {
            background-color: var (--light-color);
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .discover-highlight i {
            color: var (--primary-color);
        }
        
        .discover-actions {
            padding: 10px 15px;
            border-top: 1px solid rgba(0,0,0,0.05);
            display: flex;
            justify-content: space-between;
        }
        
        .discover-more {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        
        /* Map container */
        .dreammap-main {
            position: relative;
            height: 100vh; /* Add this explicit height */
        }
        
        #dreamMap {
            height: 100%;
            width: 100%;
        }
        
        /* Modal styles */
        .modal-content {
            border-radius: 15px;
            border: none;
            overflow: hidden;
        }
        
        .modal-header {
            background-color: var (--primary-color);
            color: white;
        }
        
        .modal-header .btn-close {
            filter: brightness(200%);
        }
        
        /* Add dream modal */
        .priority-selector {
            display: flex;
            gap: 15px;
        }
        
        .priority-selector .form-check-inline {
            margin-right: 0;
        }
        
        .priority-selector i {
            color: #ffb300;
        }
        
        .destination-image-preview {
            position: relative;
            height: 200px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var (--box-shadow);
        }
        
        .destination-image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .image-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
            padding: 20px;
            display: flex;
            justify-content: center;
        }
        
        /* Dream details modal */
        .dream-details-header, .plan-details-header {
            background: linear-gradient(135deg, var (--primary-color), #4c6ef5);
        }
        
        .dream-details-banner, .plan-details-banner {
            position: relative;
            height: 250px;
        }
        
        .dream-details-banner img, .plan-details-banner img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .dream-details-overlay, .plan-details-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);
            color: white;
            padding: 20px;
        }
        
        .dream-details-overlay h2, .plan-details-overlay h2 {
            margin: 0;
            font-size: 2rem;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
        }
        
        .dream-details-overlay p, .plan-details-overlay p {
            margin: 5px 0 0;
            font-size: 1.1rem;
            opacity: 0.9;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        
        .dream-details-content, .plan-details-content {
            padding: 20px;
        }
        
        .dream-details-info {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .detail-item {
            display: flex;
            gap: 15px;
            flex: 1 1 calc(33.333% - 20px);
        }
        
        .detail-item.full-width {
            flex: 1 1 100%;
        }
        
        .detail-icon {
            width: 40px;
            height: 40px;
            background-color: var (--primary-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var (--primary-color);
            font-size: 1.2rem;
            flex-shrink: 0;
        }
        
        .detail-text {
            flex: 1;
        }
        
        .detail-text h6 {
            margin: 0 0 5px 0;
            color: var (--muted-color);
            font-size: 0.9rem;
        }
        
        .dream-note {
            background-color: var (--light-color);
            border-radius: 8px;
            padding: 15px;
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        /* AI Suggestions */
        .dream-ai-suggestions {
            margin-top: 30px;
        }
        
        .dream-ai-suggestions h5 {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .dream-ai-suggestions h5 i {
            color: var (--warning-color);
        }
        
/* Stili per i tab suggerimenti */
.suggestion-tabs {
    display: flex;
    border-bottom: 1px solid #dee2e6;
    margin-bottom: 15px;
}

.suggestion-tab {
    padding: 8px 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 2px solid transparent;
    margin-right: 5px;
}

.suggestion-tab:hover {
    background-color: rgba(0, 123, 255, 0.05);
    border-bottom: 2px solid rgba(0, 123, 255, 0.3);
}

.suggestion-tab.active {
    font-weight: 500;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.suggestion-pane {
    display: none;
    padding: 10px 0;
}

.suggestion-pane.active {
    display: block;
}
        
        /* Plan details */
        .plan-date-range {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 10px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 5px 15px;
            display: inline-flex;
        }
        
        .plan-details-section {
            margin-bottom: 30px;
        }
        
        .plan-details-section h5 {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 15px;
            color: var (--dark-color);
        }
        
        .plan-details-section h5 i {
            color: var (--primary-color);
        }
        
        .plan-progress-bar {
            margin-bottom: 20px;
        }
        
        .checklist-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .plan-detailed-checklist {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .plan-detailed-checklist li {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px 15px;
            background-color: var (--light-color);
            border-radius: 8px;
            margin-bottom: 10px;
            transition: var (--transition);
        }
        
        .plan-detailed-checklist li:hover {
            background-color: var (--primary-light);
        }
        
        .plan-detailed-checklist li.completed {
            background-color: var (--accent-light);
            text-decoration: line-through;
            color: var (--muted-color);
        }
        
        .plan-detailed-checklist li i {
            color: var (--accent-color);
        }
        
        .plan-detailed-checklist .checklist-text {
            flex: 1;
        }
        
        .plan-detailed-checklist .checklist-category {
            background-color: rgba(0,0,0,0.05);
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            color: var (--muted-color);
        }
        
        .plan-detailed-checklist .checklist-due {
            font-size: 0.8rem;
            color: var (--warning-color);
        }
        
        /* Info cards */
        .info-cards {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .info-card {
            background-color: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var (--box-shadow);
        }
        
        .info-card-title {
            background-color: var (--primary-light);
            color: var (--primary-color);
            padding: 10px 15px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .info-card-content {
            padding: 15px;
            font-size: 0.9rem;
        }
        
        .weather-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .weather-icon {
            font-size: 2rem;
            color: var (--warning-color);
        }
        
        .weather-temp {
            font-weight: 700;
        }
        
        .weather-desc {
            color: var (--muted-color);
        }
        
        .weather-forecast {
            margin-top: 10px;
            font-style: italic;
            font-size: 0.8rem;
            color: var (--muted-color);
        }
        
        .explore-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .explore-buttons .btn {
            flex: 1;
        }
        
        /* Leaflet custom styles */
        .custom-marker-icon {
            background-color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        }
        
        .custom-marker-icon i {
            color: var (--primary-color);
        }
        
        .custom-popup {
            font-family: 'Roboto', sans-serif;
        }
        
        .custom-popup h3 {
            margin: 0 0 5px 0;
            font-size: 1.2rem;
        }
        
        .custom-popup p {
            margin: 0 0 10px 0;
            color: var (--muted-color);
        }
        
        /* Responsive */
        @@media (max-width: 992px) {
            .dreammap-container {
                grid-template-columns: 1fr;
                grid-template-rows: 1fr 350px;
            }
            
            .dreammap-main {
                order: 1;
            }
            
            .dreammap-sidebar {
                order: 2;
                height: 350px;
                overflow-y: auto;
            }
            
            .info-cards {
                grid-template-columns: 1fr;
            }
        }
        
        @@media (max-width: 768px) {
            .dream-details-info {
                gap: 15px;
            }
            
            .detail-item {
                flex: 1 1 100%;
            }
            
            .discover-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let map;
        let markers = [];
        let markerClusters;
        
        // Dati delle destinazioni
        const destinations = @Html.Raw(Json.Serialize(Model.AllDestinations));
        
      document.addEventListener('DOMContentLoaded', function() {
    // Inizializza la mappa
    initMap();
    
    // Inizializza i form e gli eventi
    setupEventListeners();
    
    // Carica i marker sulla mappa
    loadMapMarkers();
    
    // Sincronizza lo stato dell'app
    sincronizzaStatoApp();
    
    console.log('App DreamMap inizializzata con successo.');
});

        function initMap() {
            // Inizializza la mappa Leaflet con opzioni di limitazione
            map = L.map('dreamMap', {
                center: [20, 0],
                zoom: 2,
                minZoom: 2, // Limita il livello minimo di zoom
                maxBounds: [[-90, -180], [90, 180]], // Limita i confini della mappa
                maxBoundsViscosity: 1.0, // Mantiene la mappa all'interno dei limiti
                worldCopyJump: true, // Gestisce meglio la navigazione ai bordi della mappa
            });

            // Aggiungi i controlli di zoom nella posizione desiderata
            L.control.zoom({
                position: 'topleft'
            }).addTo(map);

            // Aggiungi il layer di base della mappa con noWrap per evitare ripetizioni
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19,
                noWrap: true // Importante: impedisce la ripetizione della mappa
            }).addTo(map);

            // Inizializza il cluster per i marker
            markerClusters = L.markerClusterGroup({
                showCoverageOnHover: false,
                maxClusterRadius: 50,
                iconCreateFunction: function (cluster) {
                    return L.divIcon({
                        html: '<div class="cluster-icon">' + cluster.getChildCount() + '</div>',
                        className: 'custom-cluster-icon',
                        iconSize: L.point(40, 40)
                    });
                }
            });
            map.addLayer(markerClusters);

            // Aggiungi un handler per gli errori di movimento della mappa
            map.on('error', function (e) {
                console.error('Errore mappa:', e.error);
            });
        }
        
        function loadMapMarkers() {
    console.log('Aggiornamento marker sulla mappa');
    
    // Pulisci i marker esistenti
    if (markerClusters) {
        markerClusters.clearLayers();
    }
    markers = [];

    // Verifica i dati delle destinazioni
    if (!destinations) {
        console.error('Dati delle destinazioni non disponibili');
        destinations = { wishlist: [], plannedTrips: [], visitedCities: [] };
    }

    // Inizializza gli array se non esistono
    if (!Array.isArray(destinations.wishlist)) destinations.wishlist = [];
    if (!Array.isArray(destinations.plannedTrips)) destinations.plannedTrips = [];
    if (!Array.isArray(destinations.visitedCities)) destinations.visitedCities = [];

    console.log('Dati wishlist:', destinations.wishlist);
    console.log('Dati piani:', destinations.plannedTrips);
    console.log('Dati visite:', destinations.visitedCities);

    // Aggiungi i marker per i sogni
    destinations.wishlist.forEach(function (dream) {
        if (!isValidLatitude(dream.latitude) || !isValidLongitude(dream.longitude)) {
            console.error(`Coordinate non valide per ${dream.cityName}: lat=${dream.latitude}, lng=${dream.longitude}`);
            return;
        }

        const marker = createMarker(
            dream.latitude,
            dream.longitude,
            dream.cityName,
            dream.countryName,
            'dream',
            dream.priority,
            dream.id
        );
        markers.push(marker);
        markerClusters.addLayer(marker);
    });

    // Aggiungi i marker per i piani
    destinations.plannedTrips.forEach(function(plan) {
        if (!isValidLatitude(plan.latitude) || !isValidLongitude(plan.longitude)) {
            console.error(`Coordinate non valide per ${plan.cityName}: lat=${plan.latitude}, lng=${plan.longitude}`);
            return;
        }

        const marker = createMarker(
            plan.latitude, 
            plan.longitude, 
            plan.cityName, 
            plan.countryName, 
            'plan', 
            plan.completionPercentage || 0,
            plan.id
        );
        markers.push(marker);
        markerClusters.addLayer(marker);
    });
    
    // Aggiungi i marker per le città visitate
    destinations.visitedCities.forEach(function(visit) {
        if (!isValidLatitude(visit.latitude) || !isValidLongitude(visit.longitude)) {
            console.error(`Coordinate non valide per ${visit.cityName}: lat=${visit.latitude}, lng=${visit.longitude}`);
            return;
        }

        const marker = createMarker(
            visit.latitude, 
            visit.longitude, 
            visit.cityName, 
            visit.countryName, 
            'visited',
            null,
            visit.id
        );
        markers.push(marker);
        markerClusters.addLayer(marker);
    });
}
        
        function createMarker(lat, lng, city, country, type, detail, id) {
    // Determina il colore e l'icona in base al tipo
    let color, icon;
    
    switch (type) {
        case 'dream':
            color = '#ff9800';
            icon = 'star';
            break;
        case 'plan':
            color = '#4a90e2';
            icon = 'plane-departure';
            break;
        case 'visited':
            color = '#4caf50';
            icon = 'check-circle';
            break;
        default:
            color = '#607d8b';
            icon = 'map-marker-alt';
    }
    
    // Crea un'icona personalizzata
    const customIcon = L.divIcon({
        html: `<div style="background-color: ${color}"><i class="fas fa-${icon}"></i></div>`,
        className: 'custom-marker-icon',
        iconSize: [30, 30]
    });
    
    // Crea il marker con l'icona personalizzata
    const marker = L.marker([lat, lng], { icon: customIcon });
    
    // Aggiungi informazioni sul marker
    marker.itemId = id;
    marker.itemType = type;
    
    // Crea il popup con funzioni di callback corrette in base al tipo
    let popupContent = `
        <div class="custom-popup">
            <h3>${city}</h3>
            <p>${country}</p>
    `;
    
    // Aggiungi dettagli specifici in base al tipo
    if (type === 'dream') {
        const stars = '⭐'.repeat(detail || 1);
        popupContent += `<p>Priorità: ${stars}</p>`;
        popupContent += `<button class="btn btn-sm btn-primary" onclick="showDreamDetails('${id}')">Dettagli</button>`;
    } else if (type === 'plan') {
        popupContent += `<p>Completamento: ${detail || 0}%</p>`;
        popupContent += `<div class="progress mb-2" style="height: 5px">
            <div class="progress-bar" style="width: ${detail || 0}%"></div>
        </div>`;
        popupContent += `<button class="btn btn-sm btn-primary" onclick="showPlanDetails('${id}')">Dettagli</button>`;
    } else {
        popupContent += `<p>Già visitata</p>`;
        popupContent += `<button class="btn btn-sm btn-primary" onclick="showVisitDetails('${id}')">Ricordi</button>`;
    }
    
    popupContent += `</div>`;
    
    marker.bindPopup(popupContent);
    
    return marker;
}
        
        function flyToDestination(lat, lng) {
            if (!map) {
                console.error("Mappa non inizializzata");
                return;
            }
            
            // Verifica che le coordinate siano valide
            if (!isValidLatitude(lat) || !isValidLongitude(lng)) {
                console.error(`Coordinate non valide: lat=${lat}, lng=${lng}`);
                return;
            }
            
            console.log(`Spostamento della mappa a: lat=${lat}, lng=${lng}`);
            
            // Assicurati che le coordinate siano numeri
            lat = parseFloat(lat);
            lng = parseFloat(lng);
            
            // Limita le coordinate all'intervallo valido per evitare aree grigie
            lat = Math.max(-85, Math.min(85, lat)); // Limita la latitudine tra -85 e 85
            
            // Normalizza la longitudine tra -180 e 180
            lng = ((lng + 540) % 360) - 180;
            
            // Esegui lo spostamento della mappa
            map.flyTo([lat, lng], 10, {
                duration: 1.5,
                easeLinearity: 0.25,
                animate: true
            });
            
            // Trova e apri il popup del marker corrispondente
            let foundMarker = null;
            
            markers.forEach(function(marker) {
                const markerLat = marker.getLatLng().lat;
                const markerLng = marker.getLatLng().lng;
                
                // Confronta con una piccola tolleranza per problemi di precisione
                if (Math.abs(markerLat - lat) < 0.1 && Math.abs(markerLng - lng) < 0.1) {
                    foundMarker = marker;
                }
            });
            
            // Se abbiamo trovato un marker, apri il suo popup dopo un breve ritardo
            if (foundMarker) {
                setTimeout(function() {
                    foundMarker.openPopup();
                }, 1600);
            }
        }

        // Funzioni helper per validare le coordinate
        function isValidLatitude(lat) {
            return typeof lat === 'number' && !isNaN(lat) && lat >= -90 && lat <= 90;
        }

        function isValidLongitude(lng) {
            return typeof lng === 'number' && !isNaN(lng) && lng >= -180 && lng <= 180;
        }

        function normalizeLongitude(lng) {
            // Normalizza la longitudine nell'intervallo -180 a 180
            lng = ((lng + 180) % 360) - 180;
            if (lng === -180) lng = 180;
            return lng;
        }
        
        function setupEventListeners() {
    // Eventi già esistenti
    
    // Aggiungi questo nuovo gestore per la sincronizzazione delle viste
    // Aggiorna i gestori eventi per le schede
    document.querySelectorAll('[role="tab"]').forEach(tab => {
        tab.addEventListener('shown.bs.tab', function(e) {
            // Quando cambia tab, aggiorna la vista corrente
            setTimeout(() => {
                if (map) {
                    map.invalidateSize();
                }
            }, 100);
        });
    });
    
    // Listener per i click sulle destinazioni (delega eventi)
    document.addEventListener('click', function(e) {
        // Trova l'elemento dream-item o plan-item più vicino
        const dreamItem = e.target.closest('.dream-item');
        const planItem = e.target.closest('.plan-item');
        
        // Se è un bottone o un elemento dentro un bottone, ignora
        if (e.target.tagName === 'BUTTON' || e.target.closest('button') || 
            e.target.tagName === 'A' || e.target.closest('a')) {
            return;
        }
        
        if (dreamItem) {
            const lat = parseFloat(dreamItem.getAttribute('data-lat'));
            const lng = parseFloat(dreamItem.getAttribute('data-lng'));
            if (isValidLatitude(lat) && isValidLongitude(lng)) {
                flyToDestination(lat, lng);
            }
        } else if (planItem) {
            const lat = parseFloat(planItem.getAttribute('data-lat'));
            const lng = parseFloat(planItem.getAttribute('data-lng'));
            if (isValidLatitude(lat) && isValidLongitude(lng)) {
                flyToDestination(lat, lng);
            }
        }
    });
}


        
        function filterItems(containerId, searchText) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            const items = container.querySelectorAll('.dream-item, .plan-item');
            
            items.forEach(item => {
                const cityName = (item.dataset.city || '').toLowerCase();
                const countryName = (item.dataset.country || '').toLowerCase();
                
                if (cityName.includes(searchText) || countryName.includes(searchText)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        }






        // Mostra un overlay di caricamento
function showLoadingOverlay(message = 'Caricamento...') {
    const overlay = document.createElement('div');
    overlay.id = 'loadingOverlay';
    overlay.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    overlay.style.zIndex = '9999';
    
    overlay.innerHTML = `
        <div class="bg-white p-4 rounded shadow">
            <div class="d-flex align-items-center">
                <div class="spinner-border text-primary me-3" role="status"></div>
                <span>${message}</span>
            </div>
        </div>
    `;
    
    document.body.appendChild(overlay);
}

// Nascondi l'overlay di caricamento
function hideLoadingOverlay() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        document.body.removeChild(overlay);
    }
}

// Ottieni l'Anti-Forgery Token dal DOM
function getAntiForgeryToken() {
    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
    return tokenElement ? tokenElement.value : '';
}

// Funzione per formattare la data per gli input HTML
function formatDateForInput(date) {
    if (!date) return '';
    
    if (typeof date === 'string') {
        date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
        return '';
    }
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
}





public async Task<IActionResult> SaveToWishlist(WishlistItemViewModel model)
{
    if (!ModelState.IsValid)
    {
        // Renderizza nuovamente il form con errori di validazione
        return View("AddWishlistItem", model);
    }
    
    try
    {
        // Ottieni l'ID dell'utente corrente
        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        
        // Crea un nuovo elemento wishlist
        var wishlistItem = new WishlistItem
        {
            UserId = userId,
            CityName = model.City,
            CountryName = model.Country,
            CountryCode = model.CountryCode,
            Notes = model.Notes,
            Tags = model.Tags,
            Priority = model.Priority,
            ImagePath = SaveWishlistImage(model.ImageFile),
            CreatedAt = DateTime.UtcNow
        };
        
        // Aggiungi al database
        _context.WishlistItems.Add(wishlistItem);
        await _context.SaveChangesAsync();
        
        // Aggiungi log per debug
        _logger.LogInformation($"Wishlist item aggiunto: {model.City}, {model.Country}");
        
        // Reindirizza alla vista wishlist
        TempData["SuccessMessage"] = $"{model.City} aggiunta alla tua wishlist!";
        return RedirectToAction("Index");
    }
    catch (Exception ex)
    {
        // Log dell'errore
        _logger.LogError($"Errore nel salvataggio wishlist: {ex.Message}");
        ModelState.AddModelError("", "Si è verificato un errore durante il salvataggio. Riprova.");
        return View("AddWishlistItem", model);
    }
}

// Metodo helper per salvare l'immagine
private string SaveWishlistImage(IFormFile image)
{
    if (image == null || image.Length == 0)
        return "/images/destinations/default-destination.jpg";
    
    try
    {
        var fileName = Guid.NewGuid().ToString() + Path.GetExtension(image.FileName);
        var filePath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "wishlist", fileName);
        
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            image.CopyTo(fileStream);
        }
        
        return $"/images/wishlist/{fileName}";
    }
    catch
    {
        return "/images/destinations/default-destination.jpg";
    }
}




function showDreamDetails(dreamId) {
    try {
        console.log('Mostra dettagli sogno:', dreamId);
        
        if (!dreamId) {
            console.error('ID non valido passato a showDreamDetails');
            showToast('Errore', 'ID destinazione non valido', 'danger');
            return;
        }
        
        // Cerca prima nei dati in memoria
        let dreamData = null;
        let dataSource = '';
        
        if (destinations && destinations.wishlist) {
            dreamData = destinations.wishlist.find(d => d.id && d.id.toString() === dreamId.toString());
            if (dreamData) dataSource = 'wishlist';
        }
        
        // Se non trovato nella wishlist, cerca nei piani
        if (!dreamData && destinations && destinations.plannedTrips) {
            dreamData = destinations.plannedTrips.find(p => p.id && p.id.toString() === dreamId.toString());
            if (dreamData) {
                dataSource = 'plans';
                // Se l'elemento è nei piani, mostra i dettagli del piano invece
                showPlanDetails(dreamId);
                return;
            }
        }
        
        // Se non trovato nei piani, cerca nelle visite
        if (!dreamData && destinations && destinations.visitedCities) {
            dreamData = destinations.visitedCities.find(v => v.id && v.id.toString() === dreamId.toString());
            if (dreamData) {
                dataSource = 'visits';
                // Se l'elemento è nelle visite, mostra i dettagli della visita invece
                showVisitDetails(dreamId);
                return;
            }
        }
        
        // Se ancora non trovato, cerca nel DOM
        if (!dreamData) {
            const element = document.querySelector(`.dream-item[data-id="${dreamId}"]`);
            if (element) {
                dreamData = {
                    id: dreamId,
                    cityName: element.querySelector('.dream-name')?.textContent || 'Città sconosciuta',
                    countryName: element.querySelector('.dream-country')?.textContent || 'Paese sconosciuto',
                    imageUrl: element.querySelector('img')?.src || '/images/placeholder-city.jpg',
                    notes: '',
                    latitude: parseFloat(element.getAttribute('data-lat')),
                    longitude: parseFloat(element.getAttribute('data-lng')),
                    priority: element.querySelector('.dream-priority')?.classList.contains('high') ? 3 :
                             element.querySelector('.dream-priority')?.classList.contains('medium') ? 2 : 1,
                    tags: ['viaggio'],
                    addedOn: new Date().toLocaleDateString()
                };
                dataSource = 'dom';
            }
        }
        
        // Se ancora non trovato, usa un fallback
        if (!dreamData) {
            dreamData = {
                id: dreamId,
                cityName: 'Città sconosciuta',
                countryName: 'Paese sconosciuto',
                imageUrl: '/images/placeholder-city.jpg',
                notes: '',
                latitude: 0,
                longitude: 0,
                priority: 1,
                tags: ['viaggio'],
                addedOn: new Date().toLocaleDateString()
            };
            dataSource = 'fallback';
        }
        
        console.log(`Dati sogno trovati in ${dataSource}:`, dreamData);
        
        // Memorizza l'ID corrente nel modal per i pulsanti di azione
        const modal = document.getElementById('dreamDetailsModal');
        if (modal) {
            modal.setAttribute('data-dream-id', dreamId);
        }
        
        // Popola il modal con i dati
        document.getElementById('detailsCityName').textContent = dreamData.cityName;
        document.getElementById('detailsCountryName').textContent = dreamData.countryName;
        
        // Gestione dell'immagine
        const bannerImg = document.getElementById('detailsBannerImg');
        if (bannerImg) {
            bannerImg.onerror = function() {
                this.src = '/images/placeholder-city.jpg';
            };
            bannerImg.src = dreamData.imageUrl;
        }
        
        // Data aggiunta
        const dateElement = document.getElementById('detailsDate');
        if (dateElement) {
            const formattedDate = dreamData.addedOn ? 
                (typeof dreamData.addedOn === 'string' ? dreamData.addedOn : new Date(dreamData.addedOn).toLocaleDateString()) : 
                'Data sconosciuta';
            dateElement.textContent = formattedDate;
        }
        
        // Note
        const noteElement = document.getElementById('detailsNote');
        if (noteElement) {
            noteElement.textContent = dreamData.notes || 'Nessuna nota aggiunta.';
            noteElement.style.fontStyle = dreamData.notes ? 'normal' : 'italic';
            noteElement.style.color = dreamData.notes ? '#333' : '#777';
        }
        
        // Priorità - stelle gialle
        const priorityDiv = document.getElementById('detailsPriority');
        if (priorityDiv) {
            priorityDiv.innerHTML = '';
            for (let i = 0; i < (dreamData.priority || 1); i++) {
                const star = document.createElement('i');
                star.className = 'fas fa-star';
                star.style.color = '#FFD700'; // Colore giallo per le stelle
                priorityDiv.appendChild(star);
            }
        }
        
        // Tag
        const tagsDiv = document.getElementById('detailsTags');
        if (tagsDiv) {
            tagsDiv.innerHTML = '';
            (dreamData.tags || ['viaggio']).forEach(tag => {
                const tagSpan = document.createElement('span');
                tagSpan.className = 'dream-tag';
                tagSpan.textContent = tag;
                tagSpan.style.backgroundColor = '#e9ecef';
                tagSpan.style.color = '#495057';
                tagSpan.style.padding = '2px 8px';
                tagSpan.style.borderRadius = '15px';
                tagSpan.style.margin = '0 4px 4px 0';
                tagSpan.style.display = 'inline-block';
                tagSpan.style.fontSize = '0.9rem';
                tagsDiv.appendChild(tagSpan);
            });
        }

        // Configura i link esterni per l'esplorazione
        setupExternalLinks(dreamData.cityName, dreamData.countryName);

        // Carica le informazioni AI per i vari tab
        loadAISuggestions('attractions', dreamData.cityName);
        loadAISuggestions('gastronomy', dreamData.cityName);
        loadAISuggestions('history', dreamData.cityName);
        loadAISuggestions('tips', dreamData.cityName);

         setTimeout(initializeSuggestionTabs, 100);
        
        // Mostra o nascondi il bottone "Pianifica" in base alla posizione
        const planTripBtn = document.getElementById('planTripBtn');
        if (planTripBtn) {
            if (dataSource === 'wishlist') {
                planTripBtn.style.display = 'block';
                planTripBtn.onclick = function() {
                    moveToPlanningPhase(dreamId);
                };
            } else {
                planTripBtn.style.display = 'none';
            }
        }
        
        // Centra la mappa sulla destinazione
        if (isValidLatitude(dreamData.latitude) && isValidLongitude(dreamData.longitude)) {
            flyToDestination(dreamData.latitude, dreamData.longitude);
        }
        
        // Mostra il modal
        const bsModal = new bootstrap.Modal(document.getElementById('dreamDetailsModal'));
        bsModal.show();
    } catch (error) {
        console.error('Errore in showDreamDetails:', error);
        showToast('Errore', 'Si è verificato un errore durante il caricamento dei dettagli', 'danger');
    }
}


// Replace the broken addToWishlist function with this fixed version
function addToWishlist(cityId) {
    // Show loading indicator
    showLoadingOverlay('Aggiunta alla wishlist...');
    
    // Get the anti-forgery token
    const token = getAntiForgeryToken();
    
    // Make API call to add city to wishlist
    fetch('/DreamMap?handler=AddToWishlist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token
        },
        body: JSON.stringify({ cityId: cityId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Errore HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        // Hide loading overlay
        hideLoadingOverlay();
        
        if (data.success) {
            // Instead of replacing destinations, add the new item
            if (!destinations.wishlist) destinations.wishlist = [];
            
            // Add the new item to the array
            destinations.wishlist.push(data.newItem);
            
            // Update the UI
            sincronizzaStatoApp();
            
            // Show success message
            showToast('Successo', 'Destinazione aggiunta con successo!', 'success');
        } else {
            showToast('Errore', data.message || 'Si è verificato un errore', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Error:', error);
        showToast('Errore', 'Si è verificato un errore di connessione', 'danger');
    });
}



// Funzione per inizializzare correttamente tutti i pulsanti dettagli
function initializeDetailButtons() {
    console.log("Inizializzazione di tutti i pulsanti dettagli");
    
    // Rimuove tutti i listener precedenti per evitare duplicazioni
    document.querySelectorAll('.btn-outline-info[onclick*="showDreamDetails"], .btn-outline-info[onclick*="showPlanDetails"]').forEach(button => {
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
    });
    
    // Gestori per i pulsanti dettagli nella wishlist
    document.querySelectorAll('.dream-item .btn-outline-info').forEach(button => {
        button.addEventListener('click', function(event) {
            // Ferma la propagazione per evitare che altri handler catturino l'evento
            event.stopPropagation();
            
            // Ottieni l'ID dalla dream-item parent
            const dreamItem = this.closest('.dream-item');
            if (dreamItem) {
                const dreamId = dreamItem.getAttribute('data-id');
                console.log("Clic su dettagli dream:", dreamId);
                if (dreamId) {
                    showDreamDetails(dreamId);
                } else {
                    console.error("ID dream non trovato");
                }
            }
        });
    });
    
    // Gestori per i pulsanti dettagli nella pianificazione
    document.querySelectorAll('.plan-item .btn-outline-info').forEach(button => {
        button.addEventListener('click', function(event) {
            // Ferma la propagazione per evitare che altri handler catturino l'evento
            event.stopPropagation();
            
            // Ottieni l'ID dalla plan-item parent
            const planItem = this.closest('.plan-item');
            if (planItem) {
                const planId = planItem.getAttribute('data-id');
                console.log("Clic su dettagli plan:", planId);
                if (planId) {
                    showPlanDetails(planId);
                } else {
                    console.error("ID piano non trovato");
                }
            }
        });
    });
    
    console.log("Inizializzazione pulsanti dettagli completata");
}






function handleDetailsButtonClick(event) {
    event.preventDefault();
    event.stopPropagation();
    
    console.log("Click su pulsante dettagli");
    
    const button = event.currentTarget;
    const id = button.getAttribute('data-id');
    
    // Se l'ID non è nell'attributo data-id, cerca nel parent
    if (!id) {
        const parent = button.closest('.dream-item, .plan-item');
        if (parent) {
            const parentId = parent.getAttribute('data-id');
            if (parentId) {
                if (parent.classList.contains('dream-item')) {
                    showDreamDetails(parentId);
                } else {
                    showPlanDetails(parentId);
                }
                return;
            }
        }
        console.error("Impossibile trovare l'ID");
        return;
    }
    
    // Se abbiamo l'ID direttamente dal pulsante
    const isDream = button.closest('.dream-item');
    const isPlan = button.closest('.plan-item');
    
    if (isDream) {
        showDreamDetails(id);
    } else if (isPlan) {
        showPlanDetails(id);
    } else {
        console.error("Tipo di elemento non identificato");
    }
}





        function loadAISuggestions(type, cityName) {
    console.log(`Caricamento suggerimenti ${type} per ${cityName}`);

    const suggestionPane = document.getElementById(`suggestions${type.charAt(0).toUpperCase() + type.slice(1)}`);
    if (!suggestionPane) {
        console.error('Elemento DOM non trovato per i suggerimenti:', `suggestions${type.charAt(0).toUpperCase() + type.slice(1)}`);
        return;
    }

    // Mostra indicatore di caricamento
    suggestionPane.innerHTML = `
        <div class="ai-loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Caricamento...</span>
            </div>
            <p>Generando suggerimenti con AI...</p>
        </div>
    `;

    // Chiama l'handler per ottenere i suggerimenti
    fetch(`/DreamMap?handler=Travelsuggestions&cityName=${encodeURIComponent(cityName)}&suggestionType=${encodeURIComponent(type)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Errore HTTP: ${response.status} ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log("Risposta API ricevuta:", data);

            // Gestisci il nuovo formato di risposta semplificato
            if (data.success && data.html) {
                // Pulizia lato client di eventuali delimitatori residui
                let cleanedHtml = data.html;

                // Rimuovi ```html all'inizio e ``` alla fine
                cleanedHtml = cleanedHtml.replace(/^\s*```(?:html|HTML)?\s*\n?/i, '');
                cleanedHtml = cleanedHtml.replace(/\s*```\s*$/, '');

                // Rimuovi eventuali <pre> e </pre> indesiderati
                cleanedHtml = cleanedHtml.replace(/^\s*<pre>\s*|\s*<\/pre>\s*$/g, '');

                // Controlla se il contenuto è vuoto dopo la pulizia
                if (!cleanedHtml.trim()) {
                    throw new Error("Contenuto ricevuto vuoto dopo la pulizia");
                }

                // Usa l'HTML pulito
                suggestionPane.innerHTML = cleanedHtml;

                // Assicurati che il tab sia correttamente selezionato se questo è il primo contenuto caricato
                if (type === 'attractions') {
                    const attractionsTab = document.querySelector('.suggestion-tab[data-tab="attractions"]');
                    if (attractionsTab && !attractionsTab.classList.contains('active')) {
                        attractionsTab.click();
                    }
                }

                // Aggiungi classe per animazione di fade-in
                suggestionPane.classList.add('content-loaded');
            }
            // In caso di errore dal backend
            else if (data.error) {
                console.error("Errore server:", data.error);

                // Mostra messaggio di errore all'utente
                suggestionPane.innerHTML = `
                <div class="ai-error">
                    <p>Non è stato possibile generare suggerimenti per ${cityName}.</p>
                    <p>Errore: ${data.error}</p>
                    <p>Riprova più tardi o cerca informazioni su
                       <a href="https://www.google.com/search?q=cosa+vedere+a+${encodeURIComponent(cityName)}"
                       target="_blank" rel="noopener noreferrer">Google</a>.</p>
                </div>
            `;
            }
            // Fallback se nessun formato è riconosciuto
            else {
                console.error("Formato risposta API non riconosciuto:", data);
                throw new Error("Formato risposta non valido");
            }
        })
        .catch(error => {
            console.error("Errore chiamata API:", error);

            // Mostra un messaggio di errore chiaro all'utente
            suggestionPane.innerHTML = `
            <div class="ai-error">
                <p>Errore durante il caricamento delle informazioni su ${cityName}.</p>
                <p>Problema tecnico: ${error.message}</p>
                <p>Riprova più tardi o visita
                   <a href="https://www.lonelyplanet.com/search?q=${encodeURIComponent(cityName)}"
                   target="_blank" rel="noopener noreferrer">Lonely Planet</a> per informazioni.</p>
                <button class="btn btn-sm btn-outline-primary mt-3" onclick="loadAISuggestions('${type}', '${cityName}')">
                    Riprova
                </button>
            </div>
        `;
        });
}


       function showPlanDetails(planId) {
    try {
        console.log('Mostra dettagli piano:', planId);
        
        if (!planId) {
            console.error('ID non valido passato a showPlanDetails');
            showToast('Errore', 'ID piano non valido', 'danger');
            return;
        }
        
        // Cerca il piano nei dati in memoria
        let planData = null;
        let dataSource = '';
        
        // Cerca nei piani pianificati
        if (destinations && destinations.plannedTrips) {
            planData = destinations.plannedTrips.find(p => p.id && p.id.toString() === planId.toString());
            if (planData) dataSource = 'plans';
        }
        
        // Se non trovato nei piani, cerca nella wishlist
        if (!planData && destinations && destinations.wishlist) {
            planData = destinations.wishlist.find(d => d.id && d.id.toString() === planId.toString());
            if (planData) {
                dataSource = 'wishlist';
                // Se l'elemento è nella wishlist, mostra i dettagli del sogno invece
                showDreamDetails(planId);
                return;
            }
        }
        
        // Se non trovato nella wishlist, cerca nelle visite
        if (!planData && destinations && destinations.visitedCities) {
            planData = destinations.visitedCities.find(v => v.id && v.id.toString() === planId.toString());
            if (planData) {
                dataSource = 'visits';
                // Se l'elemento è nelle visite, mostra i dettagli della visita invece
                showVisitDetails(planId);
                return;
            }
        }
        
        // Se ancora non trovato, cerca nel DOM
        if (!planData) {
            const element = document.querySelector(`.plan-item[data-id="${planId}"]`);
            if (element) {
                // Estrai i dati dal DOM
                const cityName = element.querySelector('.plan-name')?.textContent || 'Città sconosciuta';
                const countryName = element.querySelector('.plan-country')?.textContent || 'Paese sconosciuto';
                const imageUrl = element.querySelector('img')?.src || '/images/placeholder-city.jpg';
                const lat = parseFloat(element.getAttribute('data-lat'));
                const lng = parseFloat(element.getAttribute('data-lng'));
                
                // Crea un oggetto dai dati estratti
                planData = {
                    id: planId,
                    cityName: cityName,
                    countryName: countryName,
                    imageUrl: imageUrl,
                    startDate: new Date(),
                    endDate: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
                    completionPercentage: 0,
                    notes: '',
                    latitude: lat,
                    longitude: lng,
                    checklist: []
                };
                dataSource = 'dom';
            }
        }
        
        // Se ancora non trovato, usa un fallback generico
        if (!planData) {
            planData = {
                id: planId,
                cityName: 'Destinazione',
                countryName: 'Paese non specificato',
                imageUrl: '/images/placeholder-city.jpg',
                startDate: new Date(),
                endDate: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
                completionPercentage: 0,
                notes: 'Nessuna nota disponibile',
                latitude: 0,
                longitude: 0,
                checklist: []
            };
            dataSource = 'fallback';
        }
        
        console.log(`Dati piano trovati in ${dataSource}:`, planData);
        
        // Memorizza l'ID corrente nel modal per i pulsanti di azione
        const modal = document.getElementById('planDetailsModal');
        if (modal) {
            modal.setAttribute('data-plan-id', planId);
        }
        
        // Popola il modal con i dati
        document.getElementById('planCityName').textContent = planData.cityName;
        document.getElementById('planCountryName').textContent = planData.countryName;

        // Gestione sicura dell'immagine
        const bannerImg = document.getElementById('planBannerImg');
        if (bannerImg) {
            bannerImg.onerror = function () {
                this.src = '/images/placeholder-city.jpg';
            };
            bannerImg.src = planData.imageUrl;
        }

        // Formatta e imposta date
        const startDate = planData.startDate ? new Date(planData.startDate) : new Date();
        const endDate = planData.endDate ? new Date(planData.endDate) : new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);

        const dateRangeText = `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
        const planDateRange = document.getElementById('planDateRange');
        if (planDateRange && planDateRange.querySelector('span')) {
            planDateRange.querySelector('span').textContent = dateRangeText;
        }

        // Imposta i valori per i campi di modifica
        const planStartDate = document.getElementById('planStartDate');
        if (planStartDate) {
            planStartDate.value = formatDateForInput(startDate);
        }
        
        const planEndDate = document.getElementById('planEndDate');
        if (planEndDate) {
            planEndDate.value = formatDateForInput(endDate);
        }

        // Percentuale di completamento
        const planProgressBar = document.getElementById('planProgressBar');
        if (planProgressBar) {
            planProgressBar.style.width = `${planData.completionPercentage || 0}%`;
        }
        
        const progressPercentage = document.getElementById('progressPercentage');
        if (progressPercentage) {
            progressPercentage.textContent = planData.completionPercentage || 0;
        }

        // Note
        const planNotes = document.getElementById('planNotes');
        if (planNotes) {
            planNotes.value = planData.notes || '';
        }

        // Configura i pulsanti di azione nel footer
        const removePlanBtn = document.getElementById('removePlanBtn');
        const updatePlanBtn = document.getElementById('updatePlanBtn');
        const markVisitedBtn = document.getElementById('markVisitedBtn');
        
        if (removePlanBtn) {
            removePlanBtn.onclick = function() {
                removePlan(planId);
            };
        }
        
        if (updatePlanBtn) {
            updatePlanBtn.onclick = function() {
                updatePlanDetails(planId);
            };
        }
        
        if (markVisitedBtn) {
            markVisitedBtn.onclick = function() {
                markAsVisited(planId);
            };
        }

        // Popola la checklist
        const checklistContainer = document.getElementById('planChecklist');
        if (checklistContainer) {
            checklistContainer.innerHTML = '';
            
            if (planData.checklist && planData.checklist.length > 0) {
                planData.checklist.forEach(item => {
                    const listItem = document.createElement('li');
                    listItem.className = item.isCompleted ? 'completed' : '';
                    listItem.dataset.id = item.id;

                    const checkIcon = document.createElement('i');
                    checkIcon.className = item.isCompleted ? 'fas fa-check-circle' : 'far fa-circle';
                    checkIcon.style.cursor = 'pointer';
                    checkIcon.onclick = () => toggleChecklistItem(item.id);

                    const textDiv = document.createElement('div');
                    textDiv.className = 'checklist-text';
                    textDiv.textContent = item.title;

                    const categorySpan = document.createElement('span');
                    categorySpan.className = 'checklist-category';
                    categorySpan.textContent = getCategoryLabel(item.category);

                    const dueSpan = document.createElement('span');
                    dueSpan.className = 'checklist-due';
                    if (item.dueDate) {
                        dueSpan.innerHTML = `<i class="far fa-calendar-alt"></i> ${new Date(item.dueDate).toLocaleDateString()}`;
                    }

                    listItem.appendChild(checkIcon);
                    listItem.appendChild(textDiv);
                    listItem.appendChild(categorySpan);
                    listItem.appendChild(dueSpan);
                    checklistContainer.appendChild(listItem);
                });
            } else {
                // Se non ci sono elementi nella checklist, mostra un messaggio
                const emptyItem = document.createElement('li');
                emptyItem.textContent = 'Nessun elemento nella checklist';
                checklistContainer.appendChild(emptyItem);
            }
        }

        // Popola le informazioni sul paese
        populateCountryInfo(planData.countryName);

        // Configura i pulsanti esterni
        setupExternalLinks(planData.cityName, planData.countryName);

        // Sposta la mappa alla destinazione se le coordinate sono valide
        if (planData.latitude && planData.longitude &&
            isValidLatitude(planData.latitude) && isValidLongitude(planData.longitude)) {
            console.log(`Spostamento mappa a: ${planData.latitude}, ${planData.longitude}`);
            flyToDestination(planData.latitude, planData.longitude);
        }

        // Mostra il modal
        const bsModal = new bootstrap.Modal(document.getElementById('planDetailsModal'));
        bsModal.show();
    } catch (error) {
        console.error('Errore in showPlanDetails:', error);
        showToast('Errore', 'Si è verificato un errore durante il caricamento dei dettagli del piano', 'danger');
    }
}

// Helper per formatData
function formatDateForInput(date) {
    if (!date) return '';
    
    if (typeof date === 'string') {
        date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
        return '';
    }
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
}

// Helper per ottenere l'etichetta della categoria
function getCategoryLabel(category) {
    const labels = {
        'travel': 'Viaggio',
        'accommodation': 'Alloggio',
        'documents': 'Documenti',
        'activities': 'Attività',
        'other': 'Altro'
    };
    return labels[category] || category;
}




// Funzione che sincronizza completamente l'intero stato dell'app
function sincronizzaStatoApp() {
    console.log('Sincronizzazione stato app con wishlist items:', destinations.wishlist ? destinations.wishlist.length : 0);
    
    // Ensure all arrays exist to prevent "cannot read properties of undefined" errors
    if (!destinations) destinations = {};
    if (!destinations.wishlist) destinations.wishlist = [];
    if (!destinations.plannedTrips) destinations.plannedTrips = [];
    if (!destinations.visitedCities) destinations.visitedCities = [];
    
    // Ricostruisci la sidebar con i dati attuali
    ricostruisciSidebar();
    
    // Aggiorna i marker sulla mappa
    if (map) {
        setTimeout(() => {
            loadMapMarkers();
            map.invalidateSize();
        }, 200);
    }
}

// Helper per configurare i pulsanti nei modal
function configuraPulsantiModal() {
    // Configura i pulsanti nel footer del modal dei piani
    const removePlanBtn = document.getElementById('removePlanBtn');
    const updatePlanBtn = document.getElementById('updatePlanBtn');
    const markVisitedBtn = document.getElementById('markVisitedBtn');
    
    if (removePlanBtn) {
        removePlanBtn.onclick = function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) removePlan(planId);
        };
    }
    
    if (updatePlanBtn) {
        updatePlanBtn.onclick = function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) updatePlanDetails(planId);
        };
    }
    
    if (markVisitedBtn) {
        markVisitedBtn.onclick = function() {
            const modal = document.getElementById('planDetailsModal');
            const planId = modal.getAttribute('data-plan-id');
            if (planId) markAsVisited(planId);
        };
    }
    
    // Configura il pulsante planTripBtn nel modal dei dettagli
    const planTripBtn = document.getElementById('planTripBtn');
    if (planTripBtn) {
        planTripBtn.onclick = function() {
            const modal = document.getElementById('dreamDetailsModal');
            const dreamId = modal.getAttribute('data-dream-id');
            if (dreamId) moveToPlanningPhase(dreamId);
        };
    }
}

// Funzione per ricostruire la sidebar
function ricostruisciSidebar() {
    // Ricostruisci wishlist
    const wishlistContainer = document.getElementById('wishlistItems');
    if (wishlistContainer && destinations.wishlist) {
        wishlistContainer.innerHTML = '';
        
        destinations.wishlist.forEach(dream => {
            const priorityClass = dream.priority === 3 ? 'high' : 
                                 dream.priority === 2 ? 'medium' : 'low';
            
            wishlistContainer.innerHTML += `
                <div class="dream-item" data-city="${dream.cityName.toLowerCase()}" data-country="${dream.countryName.toLowerCase()}"
                     data-id="${dream.id}" data-lat="${dream.latitude}" data-lng="${dream.longitude}"
                     onclick="flyToDestination(${dream.latitude}, ${dream.longitude})">
                    <div class="dream-item-image">
                        <img src="${dream.imageUrl || '/images/placeholder-city.jpg'}" alt="${dream.cityName}">
                        <div class="dream-flag">
                            <img src="/images/flags/${getCountryCode(dream.countryName).toLowerCase()}.png" alt="${dream.countryName}">
                        </div>
                        <div class="dream-priority ${priorityClass}">
                            <i class="fas fa-star"></i>
                            ${priorityClass === 'high' ? '<i class="fas fa-star"></i><i class="fas fa-star"></i>' : 
                              priorityClass === 'medium' ? '<i class="fas fa-star"></i>' : ''}
                        </div>
                    </div>
                    <div class="dream-item-content">
                        <h3 class="dream-name">${dream.cityName}</h3>
                        <p class="dream-country">${dream.countryName}</p>
                        <div class="dream-tags">
                            ${(dream.tags || ['viaggio']).map(tag => `<span class="dream-tag">${tag}</span>`).join('')}
                        </div>
                        <div class="dream-note">${dream.notes ? (dream.notes.length > 100 ? dream.notes.substring(0, 100) + '...' : dream.notes) : ''}</div>
                    </div>
                    <div class="dream-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="${dream.id}">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-warning" onclick="moveToPlanningPhase('${dream.id}')">
                            <i class="fas fa-calendar-plus"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('${dream.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
        
        if (destinations.wishlist.length === 0) {
            wishlistContainer.innerHTML = `
                <div class="empty-state">
                    <img src="/images/empty-wishlist.svg" alt="Wishlist vuota" class="empty-state-icon">
                    <p>La tua lista dei desideri è vuota</p>
                    <p class="text-muted">Aggiungi le destinazioni dei tuoi sogni con il pulsante qui sotto</p>
                </div>
            `;
        }
    }
    
    // Ricostruisci pianificazione
    const planningContainer = document.getElementById('planningItems');
    if (planningContainer && destinations.plannedTrips) {
        planningContainer.innerHTML = '';
        
        destinations.plannedTrips.forEach(plan => {
            const today = new Date();
            const startDate = plan.startDate ? new Date(plan.startDate) : today;
            const daysRemaining = Math.round((startDate - today) / (1000 * 60 * 60 * 24));
            
            planningContainer.innerHTML += `
                <div class="plan-item" data-city="${plan.cityName.toLowerCase()}" data-country="${plan.countryName.toLowerCase()}"
                     data-id="${plan.id}" data-lat="${plan.latitude}" data-lng="${plan.longitude}"
                     onclick="flyToDestination(${plan.latitude}, ${plan.longitude})">
                    <div class="plan-item-image">
                        <img src="${plan.imageUrl || '/images/placeholder-city.jpg'}" alt="${plan.cityName}">
                        <div class="plan-flag">
                            <img src="/images/flags/${getCountryCode(plan.countryName).toLowerCase()}.png" alt="${plan.countryName}">
                        </div>
                        <div class="plan-dates">
                            <div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div>
                            <div class="plan-date-range">${startDate.toLocaleDateString()}</div>
                        </div>
                    </div>
                    <div class="plan-item-content">
                        <h3 class="plan-name">${plan.cityName}</h3>
                        <p class="plan-country">${plan.countryName}</p>
                        <div class="plan-countdown">
                            <i class="far fa-calendar-alt"></i>
                            <strong>${daysRemaining}</strong>
                            giorni rimanenti
                        </div>
                        <div class="plan-progress">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: ${plan.completionPercentage || 0}%"
                                    aria-valuenow="${plan.completionPercentage || 0}" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <div class="plan-progress-text">Completamento: ${plan.completionPercentage || 0}%</div>
                        </div>
                        <ul class="plan-checklist">
                            ${plan.checklist && plan.checklist.length > 0 ? 
                              plan.checklist.slice(0, 3).map(item => `
                                <li class="${item.isCompleted ? 'completed' : ''}">
                                    <i class="${item.isCompleted ? 'fas fa-check-circle' : 'far fa-circle'}"></i>
                                    ${item.title}
                                </li>
                              `).join('') :
                              '<li>Nessun elemento nella checklist</li>'}
                            ${plan.checklist && plan.checklist.length > 3 ? 
                              `<li class="more">+ altri ${plan.checklist.length - 3} elementi</li>` : ''}
                        </ul>
                    </div>
                    <div class="plan-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="${plan.id}">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('${plan.id}')">
                            <i class="fas fa-check"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('${plan.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
        
        if (destinations.plannedTrips.length === 0) {
            planningContainer.innerHTML = `
                <div class="empty-state">
                    <img src="/images/empty-planning.svg" alt="Nessun viaggio pianificato" class="empty-state-icon">
                    <p>Non hai ancora pianificato viaggi</p>
                    <p class="text-muted">Sposta un sogno dalla tua wishlist qui per iniziare a pianificarlo</p>
                </div>
            `;
        }
    }
}

// Helper per ottenere codice paese
function getCountryCode(countryName) {
    const countryMap = {
        'Italia': 'it',
        'Francia': 'fr',
        'Germania': 'de',
        'Spagna': 'es',
        'Regno Unito': 'gb',
        'Stati Uniti': 'us',
        'Giappone': 'jp',
        // Aggiungi altri paesi se necessario
    };
    
    return countryMap[countryName] || 'unknown';
}

// Funzione che ricostruisce completamente le liste nella sidebar
function ricostruisciSidebar() {
    // Ricostruisci wishlist
    const wishlistContainer = document.getElementById('wishlistItems');
    if (wishlistContainer && destinations.wishlist) {
        wishlistContainer.innerHTML = '';
        
        destinations.wishlist.forEach(dream => {
            const priorityClass = dream.priority === 3 ? 'high' : 
                                 dream.priority === 2 ? 'medium' : 'low';
            
            wishlistContainer.innerHTML += `
                <div class="dream-item" data-city="${dream.cityName.toLowerCase()}" data-country="${dream.countryName.toLowerCase()}"
                     data-id="${dream.id}" data-lat="${dream.latitude}" data-lng="${dream.longitude}"
                     onclick="flyToDestination(${dream.latitude}, ${dream.longitude})">
                    <div class="dream-item-image">
                        <img src="${dream.imageUrl || '/images/placeholder-city.jpg'}" alt="${dream.cityName}">
                        <div class="dream-flag">
                            <img src="/images/flags/${getCountryCode(dream.countryName).toLowerCase()}.png" alt="${dream.countryName}">
                        </div>
                        <div class="dream-priority ${priorityClass}">
                            <i class="fas fa-star"></i>
                            ${priorityClass === 'high' ? '<i class="fas fa-star"></i><i class="fas fa-star"></i>' : 
                              priorityClass === 'medium' ? '<i class="fas fa-star"></i>' : ''}
                        </div>
                    </div>
                    <div class="dream-item-content">
                        <h3 class="dream-name">${dream.cityName}</h3>
                        <p class="dream-country">${dream.countryName}</p>
                    </div>
                    <div class="dream-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="showDreamDetails('${dream.id}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="moveToPlanningPhase('${dream.id}')">
                            <i class="fas fa-calendar-alt"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('${dream.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
    }
    
    // Ricostruisci pianificazione
    const planningContainer = document.getElementById('planningItems');
    if (planningContainer && destinations.plannedTrips) {
        planningContainer.innerHTML = '';
        
        destinations.plannedTrips.forEach(plan => {
            const today = new Date();
            const startDate = plan.startDate ? new Date(plan.startDate) : today;
            const daysRemaining = Math.round((startDate - today) / (1000 * 60 * 60 * 24));
            
            planningContainer.innerHTML += `
                <div class="plan-item" data-city="${plan.cityName.toLowerCase()}" data-country="${plan.countryName.toLowerCase()}"
                     data-id="${plan.id}" data-lat="${plan.latitude}" data-lng="${plan.longitude}"
                     onclick="flyToDestination(${plan.latitude}, ${plan.longitude})">
                    <div class="plan-item-image">
                        <img src="${plan.imageUrl || '/images/placeholder-city.jpg'}" alt="${plan.cityName}">
                        <div class="plan-flag">
                            <img src="/images/flags/${getCountryCode(plan.countryName).toLowerCase()}.png" alt="${plan.countryName}">
                        </div>
                        <div class="plan-dates">
                            <div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div>
                            <div class="plan-date-range">${startDate.toLocaleDateString()}</div>
                        </div>
                    </div>
                    <div class="plan-item-content">
                        <h3 class="plan-name">${plan.cityName}</h3>
                        <p class="plan-country">${plan.countryName}</p>
                        <div class="plan-countdown">
                            <i class="far fa-calendar-alt"></i>
                            <strong>${daysRemaining}</strong>
                            giorni rimanenti
                        </div>
                        <div class="plan-progress">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: ${plan.completionPercentage || 0}%"
                                    aria-valuenow="${plan.completionPercentage || 0}" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <div class="plan-progress-text">Completamento: ${plan.completionPercentage || 0}%</div>
                        </div>
                        <ul class="plan-checklist">
                            ${plan.checklist && plan.checklist.length > 0 ? 
                              plan.checklist.map(item => `<li>${item.title}</li>`).join('') :
                              '<li>Nessun elemento nella checklist</li>'}
                        </ul>
                    </div>
                    <div class="plan-item-actions">
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="showPlanDetails('${plan.id}')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('${plan.id}')">
                            <i class="fas fa-check"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('${plan.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
    }
}

// Helper per ottenere codice paese (semplificato)
function getCountryCode(countryName) {
    const countryMap = {
        'Italia': 'it',
        'Francia': 'fr',
        'Germania': 'de',
        'Spagna': 'es',
        'Regno Unito': 'gb',
        'Stati Uniti': 'us',
        'Giappone': 'jp',
        // Aggiungi altri paesi qui
    };
    
    return countryMap[countryName] || 'unknown';
}



function getDestinationType(itemId) {
    // Verifica in quale collezione si trova l'ID
    if (destinations && destinations.wishlist) {
        const inWishlist = destinations.wishlist.some(item => 
            item.id && item.id.toString() === itemId.toString());
        if (inWishlist) return "wishlist";
    }
    
    if (destinations && destinations.plannedTrips) {
        const inPlanned = destinations.plannedTrips.some(item => 
            item.id && item.id.toString() === itemId.toString());
        if (inPlanned) return "plannedTrips";
    }
    
    if (destinations && destinations.visitedCities) {
        const inVisited = destinations.visitedCities.some(item => 
            item.id && item.id.toString() === itemId.toString());
        if (inVisited) return "visitedCities";
    }
    
    // Se non è stato trovato in nessuna collezione
    return "unknown";
}

        // Helper per formattare date per input
        function formatDateForInput(date) {
            const d = new Date(date);
            const month = '' + (d.getMonth() + 1);
            const day = '' + d.getDate();
            const year = d.getFullYear();

            return [year, month.padStart(2, '0'), day.padStart(2, '0')].join('-');
        }




        // Funzione per impostare i link esterni
        function setupExternalLinks(cityName, countryName) {
    console.log(`Configurazione link esterni per ${cityName}, ${countryName}`);
    
    if (!cityName || !countryName) {
        console.error('Nome città o paese mancante');
        return;
    }
    
    // Prepara una query di ricerca
    const searchQuery = `${cityName}, ${countryName}`;
    const encodedQuery = encodeURIComponent(searchQuery);
    
    // Google Maps - usa ID invece di :contains
    const googleMapsBtn = document.getElementById('googleMapsBtn');
    if (googleMapsBtn) {
        googleMapsBtn.onclick = function(e) {
            e.preventDefault();
            window.open(`https://www.google.com/maps/search/${encodedQuery}`, '_blank');
            return false;
        };
        googleMapsBtn.href = `https://www.google.com/maps/search/${encodedQuery}`;
    }
    
    // Booking.com
    const bookingBtn = document.getElementById('bookingBtn');
    if (bookingBtn) {
        bookingBtn.onclick = function(e) {
            e.preventDefault();
            window.open(`https://www.booking.com/searchresults.html?ss=${encodedQuery}`, '_blank');
            return false;
        };
        bookingBtn.href = `https://www.booking.com/searchresults.html?ss=${encodedQuery}`;
    }
    
    // TripAdvisor
    const tripAdvisorBtn = document.getElementById('tripAdvisorBtn');
    if (tripAdvisorBtn) {
        tripAdvisorBtn.onclick = function(e) {
            e.preventDefault();
            window.open(`https://www.tripadvisor.com/Search?q=${encodedQuery}`, '_blank');
            return false;
        };
        tripAdvisorBtn.href = `https://www.tripadvisor.com/Search?q=${encodedQuery}`;
    }
}




        // Funzione per visualizzare i dettagli di una città visitata
        function showVisitDetails(visitId) {
            alert("Funzionalità in sviluppo - Ricordi per ID: " + visitId);
            // Qui implementerai la visualizzazione dei ricordi di viaggio
        }

        function removePlan(planId) {
    if (!confirm('Sei sicuro di voler eliminare questo piano di viaggio?')) return;

    // Mostra indicatore di caricamento
    showLoadingOverlay('Eliminazione in corso...');

    fetch('/DreamMap?handler=RemovePlan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify({ planId })
    })
    .then(response => response.json())
    .then(data => {
        // Nascondi l'indicatore di caricamento
        hideLoadingOverlay();
        
        if (data.success) {
            // Chiudi il modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('planDetailsModal'));
            if (modal) modal.hide();
            
            // Rimuovi l'elemento dall'interfaccia
            const planElement = document.querySelector(`.plan-item[data-id="${planId}"]`);
            if (planElement) planElement.remove();
            
            // Rimuovi dai dati in memoria
            if (destinations && destinations.plannedTrips) {
                destinations.plannedTrips = destinations.plannedTrips.filter(
                    plan => plan.id.toString() !== planId.toString()
                );
            }
            
            // Aggiorna i marker sulla mappa
            loadMapMarkers();
            
            // Sincronizza lo stato dell'app
            sincronizzaStatoApp();
            
            // Mostra un messaggio di successo
            showToast('Successo', 'Piano eliminato con successo!', 'success');
        } else {
            showToast('Errore', data.message || 'Errore durante l\'eliminazione del piano', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Errore durante l\'eliminazione:', error);
        showToast('Errore', 'Si è verificato un errore durante l\'eliminazione', 'danger');
    });
}

        // Funzione per segnare un viaggio pianificato come visitato
        function markAsVisited(planId) {
    if (!confirm('Sei sicuro di voler segnare questa destinazione come visitata?')) return;

    // Trova il piano nei dati
    if (!destinations || !destinations.plannedTrips) {
        showToast('Errore', 'Dati non disponibili', 'danger');
        return;
    }
    
    const plan = destinations.plannedTrips.find(
        item => item.id && item.id.toString() === planId.toString()
    );
    
    if (!plan) {
        showToast('Errore', 'Piano non trovato nei dati', 'danger');
        return;
    }

    // Mostra indicatore di caricamento
    showLoadingOverlay('Spostamento in corso...');

    // Chiama l'API per segnare come visitato
    fetch('/DreamMap?handler=MarkAsVisited', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify({ planId })
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingOverlay();
        
        if (data.success) {
            // Chiudi il modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('planDetailsModal'));
            if (modal) modal.hide();
            
            // Inizializza l'array delle città visitate se necessario
            if (!destinations.visitedCities) {
                destinations.visitedCities = [];
            }
            
            // Crea un nuovo oggetto per le città visitate
            const visitData = {
                id: plan.id,
                cityName: plan.cityName,
                countryName: plan.countryName,
                imageUrl: plan.imageUrl,
                latitude: plan.latitude,
                longitude: plan.longitude,
                visitDate: plan.endDate || new Date(),
                rating: 0, // Rating iniziale
                memories: plan.notes || '',
                photos: []
            };
            
            // Aggiungi alle città visitate
            destinations.visitedCities.push(visitData);
            
            // Rimuovi dalla pianificazione
            destinations.plannedTrips = destinations.plannedTrips.filter(
                item => item.id.toString() !== planId.toString()
            );
            
            // Aggiorna l'interfaccia
            sincronizzaStatoApp();
            
            // Passa alla tab delle visite
            const visitedTab = document.getElementById('visited-tab');
            if (visitedTab) {
                visitedTab.click();
            }
            
            showToast('Successo', 'Destinazione segnata come visitata!', 'success');
        } else {
            showToast('Errore', data.message || 'Errore durante lo spostamento', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Errore durante lo spostamento:', error);
        showToast('Errore', 'Si è verificato un errore durante lo spostamento', 'danger');
    });
}

        // Funzione per ottenere l'etichetta della categoria
        function getCategoryLabel(category) {
            const labels = {
                'travel': 'Viaggio',
                'accommodation': 'Alloggio',
                'documents': 'Documenti',
                'activities': 'Attività',
                'other': 'Altro'
            };
            return labels[category] || category;
        }

        // Funzione per aggiornare i dettagli del piano
       function updatePlanDetails(planId) {
    console.log('Aggiornamento piano:', planId);
    
    // Trova il piano nei dati
    if (!destinations || !destinations.plannedTrips) {
        showToast('Errore', 'Dati non disponibili', 'danger');
        return;
    }
    
    const planIndex = destinations.plannedTrips.findIndex(
        plan => plan.id && plan.id.toString() === planId.toString()
    );
    
    if (planIndex === -1) {
        showToast('Errore', 'Piano non trovato nei dati', 'danger');
        return;
    }
    
    // Raccogli i dati dal form
    const startDateInput = document.getElementById('planStartDate');
    const endDateInput = document.getElementById('planEndDate');
    const notesInput = document.getElementById('planNotes');
    
    if (!startDateInput || !endDateInput) {
        showToast('Errore', 'Form incompleto', 'danger');
        return;
    }
    
    const startDate = startDateInput.value;
    const endDate = endDateInput.value;
    const notes = notesInput ? notesInput.value : '';
    
    // Verifica le date
    if (!startDate || !endDate) {
        showToast('Errore', 'Le date sono obbligatorie', 'danger');
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        showToast('Errore', 'La data di inizio deve essere precedente alla data di fine', 'danger');
        return;
    }
    
    // Prepara i dati da inviare
    const updateData = {
        planId: planId,
        startDate: startDate,
        endDate: endDate,
        notes: notes
    };
    
    // Mostra indicatore di caricamento
    showLoadingOverlay('Salvataggio in corso...');
    
    // Chiama l'API per aggiornare i dati
    fetch('/DreamMap?handler=UpdatePlan', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify(updateData)
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingOverlay();
        
        if (data.success) {
            // Aggiorna i dati in memoria
            const plan = destinations.plannedTrips[planIndex];
            plan.startDate = new Date(startDate);
            plan.endDate = new Date(endDate);
            plan.notes = notes;
            
            // Aggiorna la visualizzazione
            sincronizzaStatoApp();
            
            // Aggiorna il modal
            const dateRangeText = `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;
            const planDateRange = document.getElementById('planDateRange');
            if (planDateRange && planDateRange.querySelector('span')) {
                planDateRange.querySelector('span').textContent = dateRangeText;
            }
            
            showToast('Successo', 'Modifiche salvate con successo!', 'success');
        } else {
            showToast('Errore', data.message || 'Errore durante il salvataggio delle modifiche', 'danger');
        }
    })
    .catch(error => {
        hideLoadingOverlay();
        console.error('Errore durante l\'aggiornamento:', error);
        showToast('Errore', 'Si è verificato un errore durante il salvataggio', 'danger');
    });
}

        // Helper per convertire l'etichetta categoria nel codice
        function getCategoryCode(label) {
            const mapping = {
                'Viaggio': 'travel',
                'Alloggio': 'accommodation',
                'Documenti': 'documents',
                'Attività': 'activities',
                'Altro': 'other'
            };
            return mapping[label] || 'other';
        }

        // Funzione helper per ottenere il token antiforgery
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Gestione degli elementi della checklist
        function toggleChecklistItem(itemId) {
            // Qui implementerai l'aggiornamento dello stato dell'elemento
            console.log('Toggle item:', itemId);

            // Per ora, simula il cambio di stato
            const item = document.querySelector(`.plan-detailed-checklist li[data-id="${itemId}"]`);
            if (item) {
                if (item.classList.contains('completed')) {
                    item.classList.remove('completed');
                    item.querySelector('i').className = 'far fa-circle';
                } else {
                    item.classList.add('completed');
                    item.querySelector('i').className = 'fas fa-check-circle';
                }

                // Ricalcola e aggiorna la percentuale
                updateCompletionPercentage();
            }
        }

        // Funzione per mostrare i toast
        function showToast(title, message, type) {
            // Crea un elemento toast
            const toastContainer = document.getElementById('toast-container') || createToastContainer();

            const toastId = 'toast-' + new Date().getTime();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center border-0 bg-${type} text-white`;
            toast.id = toastId;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <strong>${title}</strong>: ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            toastContainer.appendChild(toast);

            // Inizializza e mostra il toast
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 5000
            });
            bsToast.show();

            // Rimuovi il toast dal DOM dopo che è stato nascosto
            toast.addEventListener('hidden.bs.toast', function () {
                toast.remove();
            });
        }

        // Funzione per creare il container dei toast
        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }

        // Funzione per aggiornare la percentuale di completamento
        function updateCompletionPercentage() {
            const items = document.querySelectorAll('.plan-detailed-checklist li');
            const completedItems = document.querySelectorAll('.plan-detailed-checklist li.completed');

            if (items.length === 0) return;

            const percentage = Math.round((completedItems.length / items.length) * 100);
            const planProgressBar = document.getElementById('planProgressBar');
            if (planProgressBar) {
                planProgressBar.style.width = `${percentage}%`;
            }
            
            const progressPercentage = document.getElementById('progressPercentage');
            if (progressPercentage) {
                progressPercentage.textContent = percentage;
            }
        }

        // Funzione per aggiungere elementi alla checklist
        function addChecklistItem(title, category, dueDate) {
            const checklistContainer = document.getElementById('planChecklist');
            if (!checklistContainer) return;

            // Genera un ID temporaneo
            const tempId = new Date().getTime();

            const listItem = document.createElement('li');
            listItem.dataset.id = tempId;

            const checkIcon = document.createElement('i');
            checkIcon.className = 'far fa-circle';
            checkIcon.style.cursor = 'pointer';
            checkIcon.onclick = () => toggleChecklistItem(tempId);

            const textDiv = document.createElement('div');
            textDiv.className = 'checklist-text';
            textDiv.textContent = title;

            const categorySpan = document.createElement('span');
            categorySpan.className = 'checklist-category';
            categorySpan.textContent = getCategoryLabel(category);

            const dueSpan = document.createElement('span');
            dueSpan.className = 'checklist-due';
            if (dueDate) {
                dueSpan.innerHTML = `<i class="far fa-calendar-alt"></i> ${new Date(dueDate).toLocaleDateString()}`;
            }

            listItem.appendChild(checkIcon);
            listItem.appendChild(textDiv);
            listItem.appendChild(categorySpan);
            listItem.appendChild(dueSpan);
            checklistContainer.appendChild(listItem);

            // Aggiorna la percentuale di completamento
            updateCompletionPercentage();
        }

        // Sposta un sogno alla fase di pianificazione
function moveToPlanningPhase(dreamId) {
    console.log('Sposta alla fase di pianificazione:', dreamId);

    // Trova i dettagli dell'elemento nella wishlist
    if (!destinations || !destinations.wishlist) {
        showToast('Errore', 'Dati non disponibili', 'danger');
        return;
    }

    // Cerca l'elemento nei dati
    const dreamToMove = destinations.wishlist.find(dream => dream.id && dream.id.toString() === dreamId.toString());
    if (!dreamToMove) {
        showToast('Errore', 'Elemento non trovato nei dati', 'danger');
        return;
    }

    // Mostra indicatore di caricamento
    const loadingIndicator = document.createElement('div');
    loadingIndicator.className = 'position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow';
    loadingIndicator.innerHTML = `
        <div class="d-flex align-items-center">
            <div class="spinner-border text-primary me-3" role="status"></div>
            <span>Spostamento in corso...</span>
        </div>
    `;
    document.body.appendChild(loadingIndicator);

    // Ottieni il token anti-forgery
    const token = getAntiForgeryToken();

    // Esegui la chiamata AJAX per spostare la destinazione
    fetch('/DreamMap?handler=MoveToPlanning', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token
        },
        body: JSON.stringify({ dreamId: dreamId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Errore HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        try {
            // Rimuovi indicatore di caricamento
            document.body.removeChild(loadingIndicator);

            if (data.success) {
                // Chiudi il modal se aperto
                const modal = bootstrap.Modal.getInstance(document.getElementById('dreamDetailsModal'));
                if (modal) modal.hide();

                // Crea una nuova pianificazione dai dati del sogno
                const newPlan = {
                    id: dreamToMove.id,
                    cityName: dreamToMove.cityName,
                    countryName: dreamToMove.countryName,
                    imageUrl: dreamToMove.imageUrl,
                    notes: dreamToMove.notes || '',
                    latitude: dreamToMove.latitude,
                    longitude: dreamToMove.longitude,
                    tags: dreamToMove.tags || [],
                    startDate: new Date(new Date().getTime() + (30 * 24 * 60 * 60 * 1000)),
                    endDate: new Date(new Date().getTime() + (37 * 24 * 60 * 60 * 1000)),
                    completionPercentage: 0,
                    checklist: []
                };

                // Inizializza l'array dei pianificati se necessario
                if (!destinations.plannedTrips) {
                    destinations.plannedTrips = [];
                }

                // Aggiungi alla pianificazione
                destinations.plannedTrips.push(newPlan);

                // Rimuovi dalla wishlist
                destinations.wishlist = destinations.wishlist.filter(dream => 
                    !dream.id || dream.id.toString() !== dreamId.toString());

                // FONDAMENTALE: Sincronizza tutto lo stato dell'app
                sincronizzaStatoApp();

                // Passa alla tab di pianificazione
                const planningTab = document.getElementById('planning-tab');
                if (planningTab) {
                    planningTab.click();
                }

                // Mostra messaggio di successo
                showToast('Successo', 'Destinazione spostata nella fase di pianificazione!', 'success');
            } else {
                showToast('Errore', data.message || 'Si è verificato un errore durante lo spostamento della destinazione', 'danger');
            }
        } catch (error) {
            console.error('Errore durante l\'elaborazione della risposta:', error);
            showToast('Errore', 'Si è verificato un errore durante l\'elaborazione della risposta', 'danger');
        }
    })
    .catch(error => {
        // Rimuovi indicatore di caricamento
        if (document.body.contains(loadingIndicator)) {
            document.body.removeChild(loadingIndicator);
        }

        console.error('Errore durante lo spostamento:', error);
        showToast('Errore', 'Si è verificato un errore durante lo spostamento della destinazione', 'danger');
    });
}




        // Funzione per popolare le informazioni sui paesi
        function populateCountryInfo(countryName) {
    // In una implementazione reale, questi dati verrebbero caricati da un'API
    const currencyInfo = document.getElementById('currencyInfo');
    const languageInfo = document.getElementById('languageInfo');
    const timeInfo = document.getElementById('timeInfo');
    
    if (!currencyInfo || !languageInfo || !timeInfo) {
        console.error('Elementi DOM per le informazioni sul paese non trovati');
        return;
    }
    
    if (countryName === 'Francia') {
        currencyInfo.innerHTML = `
            <p><strong>Euro (€)</strong></p>
            <p>Cambio: 1 EUR = 1.09 USD</p>
        `;

        languageInfo.innerHTML = `
            <p><strong>Francese</strong></p>
            <p>Frasi utili:</p>
            <ul>
                <li>Bonjour - Buongiorno</li>
                <li>Merci - Grazie</li>
                <li>S'il vous plaît - Per favore</li>
                <li>Excusez-moi - Mi scusi</li>
                <li>Au revoir - Arrivederci</li>
            </ul>
        `;

        timeInfo.innerHTML = `
            <p><strong>CET/CEST</strong></p>
            <p>UTC+1 (Inverno), UTC+2 (Estate)</p>
            <p>Stessa ora dell'Italia</p>
        `;
    } else if (countryName === 'Giappone') {
        currencyInfo.innerHTML = `
            <p><strong>Yen (¥)</strong></p>
            <p>Cambio: 1 JPY = 0.0067 USD</p>
        `;

        languageInfo.innerHTML = `
            <p><strong>Giapponese</strong></p>
            <p>Frasi utili:</p>
            <ul>
                <li>こんにちは (Konnichiwa) - Buongiorno</li>
                <li>ありがとう (Arigatou) - Grazie</li>
                <li>お願いします (Onegaishimasu) - Per favore</li>
                <li>すみません (Sumimasen) - Mi scusi</li>
                <li>さようなら (Sayounara) - Arrivederci</li>
            </ul>
        `;

        timeInfo.innerHTML = `
            <p><strong>JST</strong></p>
            <p>UTC+9</p>
            <p>+8 ore rispetto all'Italia</p>
        `;
    } else if (countryName === 'Stati Uniti') {
        currencyInfo.innerHTML = `
            <p><strong>Dollaro ($)</strong></p>
            <p>Cambio: 1 USD = 0.92 EUR</p>
        `;

        languageInfo.innerHTML = `
            <p><strong>Inglese</strong></p>
            <p>Frasi utili:</p>
            <ul>
                <li>Hello - Ciao</li>
                <li>Thank you - Grazie</li>
                <li>Please - Per favore</li>
                <li>Excuse me - Scusa/Permesso</li>
                <li>Goodbye - Arrivederci</li>
            </ul>
        `;

        timeInfo.innerHTML = `
            <p><strong>Vari fusi orari</strong></p>
            <p>New York (EST/EDT): UTC-5/UTC-4</p>
            <p>Chicago (CST/CDT): UTC-6/UTC-5</p>
            <p>Denver (MST/MDT): UTC-7/UTC-6</p>
            <p>Los Angeles (PST/PDT): UTC-8/UTC-7</p>
            <p>Da -6 a -9 ore rispetto all'Italia</p>
        `;
    } else {
        // Per paesi non configurati, mostra un messaggio generico
        const genericInfo = `
            <p>Informazioni dettagliate su ${countryName} non disponibili.</p>
            <p>Ti consigliamo di cercare informazioni su:</p>
            <ul>
                <li>Valuta locale e tasso di cambio</li>
                <li>Lingua e frasi basilari</li>
                <li>Fuso orario e differenza con l'Italia</li>
                <li>Requisiti per il visto</li>
                <li>Corrente elettrica e adattatori</li>
            </ul>
        `;
        currencyInfo.innerHTML = genericInfo;
        languageInfo.innerHTML = '';
        timeInfo.innerHTML = '';
    }
}
                       






function initializeSuggestionTabs() {
    console.log('Inizializzazione dei tab per le informazioni sulla destinazione');
    
    // Seleziona tutti i tab nel modal
    document.querySelectorAll('.suggestion-tab').forEach(tab => {
        // Rimuovi qualsiasi listener esistente clonando l'elemento
        const newTab = tab.cloneNode(true);
        tab.parentNode.replaceChild(newTab, tab);
        
        // Aggiungi nuovo listener
        newTab.addEventListener('click', function() {
            // Ottieni il tab target dal data-attribute
            const targetTab = this.getAttribute('data-tab');
            if (!targetTab) return;
            
            console.log('Click su tab:', targetTab);
            
            // Rimuovi la classe active da tutti i tab
            document.querySelectorAll('.suggestion-tab').forEach(t => {
                t.classList.remove('active');
            });
            
            // Aggiungi la classe active al tab cliccato
            this.classList.add('active');
            
            // Nascondi tutti i pannelli contenuto
            document.querySelectorAll('.suggestion-pane').forEach(pane => {
                pane.classList.remove('active');
            });
            
            // Mostra il pannello target
            const targetPane = document.querySelector(`.suggestion-pane[data-pane="${targetTab}"]`);
            if (targetPane) {
                targetPane.classList.add('active');
            } else {
                console.error('Pannello target non trovato:', targetTab);
            }
        });
    });
    
    // Attiva il primo tab per impostazione predefinita
    const firstTab = document.querySelector('.suggestion-tab');
    if (firstTab) {
        firstTab.click();
    }
}



function removeDream(dreamId) {
    if (!confirm('Sei sicuro di voler rimuovere questa destinazione?')) return;

    fetch('/DreamMap?handler=RemoveDream', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: JSON.stringify({ dreamId })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.querySelector(`[data-id="${dreamId}"]`).remove();
                showToast('Successo', 'Destinazione rimossa con successo!', 'success');

                // Aggiorna i dati in memoria
                if (destinations && destinations.wishlist) {
                    destinations.wishlist = destinations.wishlist.filter(d => d.id.toString() !== dreamId.toString());
                }

                // Aggiorna i marker sulla mappa
                loadMapMarkers();
            } else {
                showToast('Errore', data.message || 'Si è verificato un errore durante la rimozione', 'danger');
            }
        })
        .catch(error => {
            console.error('Errore durante la rimozione:', error);
            showToast('Errore', 'Si è verificato un errore durante la rimozione', 'danger');
        });
}
</script>
}