@page
@model DreamMapModel
@{
    ViewData["Title"] = "La Mappa dei Tuoi Sogni";
}
@{
    // Questo è necessario per far funzionare le chiamate AJAX ai handler
}
@Html.AntiForgeryToken()

<script>
    // Aggiungi questa funzione globale per ottenere il token
    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
</script>

<!-- resto del contenuto HTML -->
<div class="dreammap-container">
    <div class="dreammap-sidebar">
        <div class="dreammap-header">
            <h2><i class="far fa-star"></i> I Tuoi Sogni di Viaggio</h2>
            <p>Pianifica e visualizza le tue future destinazioni</p>
        </div>
        <ul class="nav nav-tabs mb-3" id="dreamTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="wishlist-tab" data-bs-toggle="tab" data-bs-target="#wishlist" type="button" role="tab">
                    <i class="fas fa-heart"></i> Wishlist
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="planning-tab" data-bs-toggle="tab" data-bs-target="#planning" type="button" role="tab">
                    <i class="fas fa-calendar-alt"></i> In Pianificazione
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="discover-tab" data-bs-toggle="tab" data-bs-target="#discover" type="button" role="tab">
                    <i class="fas fa-compass"></i> Scopri
                </button>
            </li>
        </ul>

        <div class="tab-content" id="dreamTabsContent">            <!-- TAB WISHLIST -->
            <div class="tab-pane fade show active" id="wishlist" role="tabpanel">
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @TempData["SuccessMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @TempData["ErrorMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                
                <div class="search-container mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Cerca nei tuoi desideri..." id="wishlistSearch">
                    </div>
                </div>

                <div class="dreammap-list" id="wishlistItems">
                    @foreach (var dream in Model.Wishlist)
                    {
                        <div class="dream-item" data-city="@dream.CityName.ToLower()" data-country="@dream.CountryName.ToLower()"
                         data-id="@dream.Id" data-lat="@dream.Latitude" data-lng="@dream.Longitude"
                         onclick="flyToDestination(@dream.Latitude, @dream.Longitude)">
                            <div class="dream-item-image">
                                <img src="@dream.ImageUrl" alt="@dream.CityName">
                                <div class="dream-flag">
                                    <img src="/images/flags/@(dream.CountryCode.ToLower()).png" alt="@dream.CountryName">
                                </div>
                            </div>
                            <div class="dream-item-content">
                                <div class="dream-priority @dream.Priority.ToString().ToLower()">
                                    @for (int i = 0; i < (int)dream.Priority; i++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                </div>
                                <h3 class="dream-name">@dream.CityName</h3>
                                <p class="dream-country">@dream.CountryName</p>
                                <div class="dream-tags">
                                    @foreach (var tag in dream.Tags)
                                    {
                                        <span class="dream-tag">@tag</span>
                                    }
                                </div>
                                <div class="dream-note">@(dream.Note?.Length > 100 ? dream.Note.Substring(0, 100) + "..." : dream.Note)</div>
                            </div>                            <div class="dream-item-actions">
                                <!-- MODIFICATO: Aggiunta classe show-details-btn e data-id -->
                                <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="@dream.Id">
                                    <i class="fas fa-info-circle"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" onclick="moveToPlanningPhase('@dream.Id')">
                                    <i class="fas fa-calendar-plus"></i>
                                </button>
                                <form method="post" asp-page-handler="MarkAsVisited" class="d-inline-block">
                                    <input type="hidden" name="destinationId" value="@dream.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-success" title="Segna come visitata">
                                        <i class="fas fa-check-circle"></i>
                                    </button>
                                </form>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('@dream.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    }

                    @if (!Model.Wishlist.Any())
                    {
                        <div class="empty-state">
                            <img src="/images/empty-wishlist.svg" alt="Wishlist vuota" class="empty-state-icon">
                            <p>La tua lista dei desideri è vuota</p>
                            <p class="text-muted">Aggiungi le destinazioni dei tuoi sogni con il pulsante qui sotto</p>
                        </div>
                    }
                </div>

                <button type="button" class="btn btn-primary add-dream-btn" data-bs-toggle="modal" data-bs-target="#addDreamModal">
                    <i class="fas fa-plus"></i> Aggiungi Destinazione
                </button>
            </div>

            <!-- TAB IN PIANIFICAZIONE -->
            <div class="tab-pane fade" id="planning" role="tabpanel">
                <div class="search-container mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Cerca nei viaggi pianificati..." id="planningSearch">
                    </div>
                </div>

                <div class="dreammap-list" id="planningItems">
                    @foreach (var plan in Model.PlannedTrips)
                    {
                        <div class="plan-item" data-city="@plan.CityName.ToLower()" data-country="@plan.CountryName.ToLower()"
                         data-id="@plan.Id" data-lat="@plan.Latitude" data-lng="@plan.Longitude"
                         onclick="flyToDestination(@plan.Latitude, @plan.Longitude)">
                            <div class="plan-item-image">
                                <img src="@plan.ImageUrl" alt="@plan.CityName">
                                <div class="plan-flag">
                                    <img src="/images/flags/@(plan.CountryCode.ToLower()).png" alt="@plan.CountryName">
                                </div>
                                <div class="plan-dates">
                                    <div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div>
                                    <div class="plan-date-range">@plan.StartDate.ToString("dd/MM/yyyy")</div>
                                </div>
                            </div>
                            <div class="plan-item-content">
                                <h3 class="plan-name">@plan.CityName</h3>
                                <p class="plan-country">@plan.CountryName</p>
                                <div class="plan-countdown">
                                    <i class="far fa-calendar-alt"></i>
                                    <strong>@((plan.StartDate - DateTime.Today).Days)</strong>
                                    giorni rimanenti
                                </div>
                                <div class="plan-progress">
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar"
                                         style="width: @plan.CompletionPercentage%"
                                         aria-valuenow="@plan.CompletionPercentage"
                                         aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <span class="plan-progress-text">@plan.CompletionPercentage% completato</span>
                                </div>
                                <ul class="plan-checklist">
                                    @foreach (var item in plan.Checklist.Take(3))
                                    {
                                        <li class="@(item.IsCompleted ? "completed" : "")">
                                            <i class="@(item.IsCompleted ? "fas fa-check-circle" : "far fa-circle")"></i>
                                            @item.Title
                                        </li>
                                    }
                                    @if (plan.Checklist.Count > 3)
                                    {
                                        <li class="more">+ altri @(plan.Checklist.Count - 3) elementi</li>
                                    }
                                </ul>
                            </div>
                            <div class="plan-item-actions">
                                <!-- MODIFICATO: Aggiunta classe show-details-btn e data-id -->
                                <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="@plan.Id">
                                    <i class="fas fa-info-circle"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('@plan.Id')">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('@plan.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    }

                    @if (!Model.PlannedTrips.Any())
                    {
                        <div class="empty-state">
                            <img src="/images/empty-planning.svg" alt="Nessun viaggio pianificato" class="empty-state-icon">
                            <p>Non hai ancora pianificato viaggi</p>
                            <p class="text-muted">Sposta un sogno dalla tua wishlist qui per iniziare a pianificarlo</p>
                        </div>
                    }
                </div>
            </div>

            <!-- TAB SCOPRI -->
            <div class="tab-pane fade" id="discover" role="tabpanel">
                <div class="discover-header">
                    <h3>Destinazioni consigliate per te</h3>
                    <p>Basate sui tuoi interessi e destinazioni visitate</p>
                </div>

                <div class="recommendation-filters">
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="recommendationType" id="recType1" autocomplete="off" checked>
                        <label class="btn btn-outline-primary" for="recType1">Tutte</label>

                        <input type="radio" class="btn-check" name="recommendationType" id="recType2" autocomplete="off">
                        <label class="btn btn-outline-primary" for="recType2">Simili</label>

                        <input type="radio" class="btn-check" name="recommendationType" id="recType3" autocomplete="off">
                        <label class="btn btn-outline-primary" for="recType3">Popolari</label>

                        <input type="radio" class="btn-check" name="recommendationType" id="recType4" autocomplete="off">
                        <label class="btn btn-outline-primary" for="recType4">Nuove</label>
                    </div>
                </div>
                <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken().ToString()">
                <div class="discover-grid">
                    @foreach (var recommendation in Model.Recommendations)
                    {
                        <div class="discover-card" data-lat="@recommendation.Latitude" data-lng="@recommendation.Longitude">
                            <div class="discover-image">
                                <img src="@recommendation.ImageUrl" alt="@recommendation.CityName">
                                <div class="discover-flag">
                                    <img src="/images/flags/@(recommendation.CountryCode.ToLower()).png" alt="@recommendation.CountryName">
                                </div>
                                <div class="discover-match">
                                    <span>@recommendation.MatchPercentage%</span>
                                    <small>Match</small>
                                </div>
                            </div>
                            <div class="discover-content">
                                <h4>@recommendation.CityName</h4>
                                <p>@recommendation.CountryName</p>
                                <div class="discover-tags">
                                    @foreach (var tag in recommendation.Tags.Take(3))
                                    {
                                        <span class="discover-tag">@tag</span>
                                    }
                                </div>
                                <div class="discover-highlights">
                                    <div class="discover-highlight">
                                        <i class="fas fa-temperature-high"></i> @recommendation.Weather
                                    </div>
                                    <div class="discover-highlight">
                                        <i class="fas fa-euro-sign"></i> @recommendation.CostLevel
                                    </div>
                                    <div class="discover-highlight">
                                        <i class="fas fa-hotel"></i> @recommendation.Accommodations
                                    </div>
                                </div>
                            </div>
                            <div class="discover-actions">
                                <button class="btn btn-sm btn-outline-info" onclick="flyToDestination(@recommendation.Latitude, @recommendation.Longitude)">
                                    <i class="fas fa-map-marker-alt"></i>
                                </button>
                                <button class="btn btn-primary" onclick="addToWishlist('@recommendation.Id')">
                                    <i class="fas fa-heart"></i> Aggiungi
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <div class="discover-more">
                    <button class="btn btn-outline-primary">
                        <i class="fas fa-sync-alt"></i> Carica altri suggerimenti
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="dreamMap" class="dreammap-main">
        <!-- La mappa sarà renderizzata qui -->
    </div>
</div>

<!-- Modal per aggiungere un nuovo sogno - AGGIORNATO con dropdown città -->
<div class="modal fade" id="addDreamModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Aggiungi una nuova destinazione dei sogni</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="SaveToWishlist" enctype="multipart/form-data" id="dreamForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="WishlistForm_City" class="form-label">Città</label>
                                <!-- Make sure this is correctly structured in your modal form -->                                <select class="form-select" id="WishlistForm_City" name="WishlistForm.City" required>
                                    <option value="">Seleziona una città</option>
                                    @if (Model.WishlistForm.AvailableCities != null && Model.WishlistForm.AvailableCities.Any())
                                    {
                                        @foreach (var city in Model.WishlistForm.AvailableCities)
                                        {
                                            <option value="@city.Name" 
                                                data-country="@city.Country"
                                                data-country-code="@city.CountryCode">
                                                @city.Name (@city.Country)
                                            </option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled>Nessuna città disponibile - Ricarica la pagina</option>
                                    }
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="WishlistForm_Country" class="form-label">Paese</label>
                                <input type="text" class="form-control" id="WishlistForm_Country" name="WishlistForm.Country" readonly>
                                <input type="hidden" name="Country" id="Country" />
                                <input type="hidden" name="CountryCode" id="CountryCode" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Priorità</label>
                                <div class="priority-selector">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="WishlistForm.Priority" id="priorityLow" value="Bassa">
                                        <label class="form-check-label" for="priorityLow">
                                            <i class="fas fa-star"></i>
                                            <span>Bassa</span>
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="WishlistForm.Priority" id="priorityMedium" value="Media" checked>
                                        <label class="form-check-label" for="priorityMedium">
                                            <i class="fas fa-star"></i><i class="fas fa-star"></i>
                                            <span>Media</span>
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="WishlistForm.Priority" id="priorityHigh" value="Alta">
                                        <label class="form-check-label" for="priorityHigh">
                                            <i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i>
                                            <span>Alta</span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="WishlistForm_Tags" class="form-label">Tag</label>
                                <input type="text" class="form-control" id="WishlistForm_Tags" name="WishlistForm.Tags"
                                       placeholder="es: spiagge, montagna, cultura (separati da virgola)">
                                <div class="form-text">Aggiungi tag per categorizzare il tuo sogno</div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Immagine della destinazione</label>
                                <div class="destination-image-preview">
                                    <img src="/images/placeholder-destination.jpg" id="destinationImagePreview" alt="Anteprima immagine">
                                    <div class="image-overlay">
                                        <input type="file" id="WishlistForm_ImageFile" name="WishlistForm.ImageFile" class="d-none" accept="image/*">
                                        <button type="button" class="btn btn-light btn-sm" id="selectImageBtn">
                                            <i class="fas fa-camera"></i> Scegli immagine
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="WishlistForm_Notes" class="form-label">Note</label>
                                <textarea class="form-control" id="WishlistForm_Notes" name="WishlistForm.Notes" rows="5"
                                          placeholder="Scrivi qui i motivi per cui vuoi visitare questa destinazione"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-heart me-1"></i> Salva nella Wishlist
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal per dettagli di un sogno -->
<div class="modal fade" id="dreamDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header dream-details-header">
                <h5 class="modal-title">Dettagli Destinazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="dream-details-banner">
                    <img src="" id="detailsBannerImg" alt="Immagine destinazione">
                    <div class="dream-details-overlay">
                        <h2 id="detailsCityName"></h2>
                        <p id="detailsCountryName"></p>
                    </div>
                </div>
                <div class="dream-details-content">
                    <div class="dream-details-info">
                        <div class="detail-item">
                            <div class="detail-icon">
                                <i class="fas fa-heart"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Priorità</h6>
                                <div class="dream-priority" id="detailsPriority"></div>
                            </div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-icon">
                                <i class="fas fa-tags"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Tag</h6>
                                <div id="detailsTags" class="dream-tags"></div>
                            </div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-icon">
                                <i class="fas fa-calendar-alt"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Aggiunto il</h6>
                                <p id="detailsDate"></p>
                            </div>
                        </div>

                        <div class="detail-item full-width">
                            <div class="detail-icon">
                                <i class="fas fa-sticky-note"></i>
                            </div>
                            <div class="detail-text">
                                <h6>Note</h6>
                                <div class="dream-note" id="detailsNote"></div>
                            </div>
                        </div>
                    </div>

                    <div class="dream-ai-suggestions">
                        <h5><i class="fas fa-lightbulb"></i> Informazioni sulla destinazione</h5>
                        <div class="suggestion-tabs">
                            <div class="suggestion-tab" data-tab="attractions">
                                <i class="fas fa-camera"></i> Attrazioni
                            </div>
                            <div class="suggestion-tab" data-tab="gastronomy">
                                <i class="fas fa-utensils"></i> Gastronomia
                            </div>
                            <div class="suggestion-tab" data-tab="history">
                                <i class="fas fa-landmark"></i> Storia
                            </div>
                            <div class="suggestion-tab" data-tab="tips">
                                <i class="fas fa-info-circle"></i> Consigli
                            </div>
                        </div>

                        <div class="suggestion-content">
                            <div class="suggestion-pane" data-pane="attractions" id="suggestionsAttractions">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                            <div class="suggestion-pane" data-pane="gastronomy" id="suggestionsGastronomy">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                            <div class="suggestion-pane" data-pane="history" id="suggestionsHistory">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                            <div class="suggestion-pane" data-pane="tips" id="suggestionsTips">
                                <!-- Contenuto generato dinamicamente -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                <button type="button" class="btn btn-warning" id="planTripBtn">
                    <i class="fas fa-calendar-plus me-1"></i> Pianifica Viaggio
                </button>
            </div>
        </div>
    </div>
</div>



<!-- Modal per dettagli di un viaggio pianificato -->
<div class="modal fade" id="planDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header plan-details-header">
                <h5 class="modal-title"><i class="fas fa-plane"></i> Il Tuo Viaggio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="plan-details-banner">
                    <img src="" id="planBannerImg" alt="Immagine destinazione">
                    <div class="plan-details-overlay">
                        <div class="plan-details-info">
                            <h2 id="planCityName"></h2>
                            <p id="planCountryName"></p>
                            <div class="plan-date-range" id="planDateRange">
                                <i class="fas fa-calendar-alt"></i> <span></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- plan-details-content INIZIA QUI -->
                <div class="plan-details-content">
                    <div class="row">
                        <div class="col-md-7">
                            <!-- SEZIONE DATE SPOSTATA QUI (POSIZIONE CORRETTA) -->
                            <div class="plan-details-section">
                                <h5><i class="fas fa-calendar-days"></i> Date del Viaggio</h5>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="planStartDateInput" class="form-label">Data Inizio</label>
                                        <input type="date" class="form-control" id="planStartDateInput">
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="planEndDateInput" class="form-label">Data Fine</label>
                                        <input type="date" class="form-control" id="planEndDateInput">
                                    </div>
                                </div>
                            </div>
                            <!-- FINE SEZIONE DATE -->

                            <div class="plan-details-section">
                                <h5><i class="fas fa-list-check"></i> Pianificazione del Viaggio</h5>
                                <div class="plan-progress-bar">
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" id="planProgressBar"
                                             style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                        </div>
                                    </div>
                                    <span class="progress-text">Completato: <span id="progressPercentage">0</span>%</span>
                                </div>

                                <div class="plan-checklist-container">
                                    <div class="checklist-header">
                                        <h6>Lista di controllo</h6>
                                        <button class="btn btn-sm btn-outline-primary" id="addChecklistItem">
                                            <i class="fas fa-plus"></i> Aggiungi elemento
                                        </button>
                                    </div>
                                    <ul class="plan-detailed-checklist" id="planChecklist">
                                        <!-- Elementi della checklist generati dinamicamente -->
                                    </ul>
                                </div>
                            </div>

                            <div class="plan-details-section">
                                <h5><i class="fas fa-sticky-note"></i> Note di Viaggio</h5>
                                <div class="plan-notes-container">
                                    <div class="form-floating">
                                        <textarea class="form-control" placeholder="Scrivi qui le tue note di viaggio"
                                                  id="planNotes" style="height: 150px"></textarea>
                                        <label for="planNotes">Appunti e dettagli del viaggio</label>
                                    </div>
                                    <div class="text-end mt-2">
                                        <button class="btn btn-primary btn-sm" id="saveNotesBtn">
                                            <i class="fas fa-save"></i> Salva note
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-5">
                            <!-- ... Colonna destra del modal (Informazioni Utili, Esplora) ... -->
                             <div class="plan-details-section">
                                <h5><i class="fas fa-info-circle"></i> Informazioni Utili</h5>
                                <div class="info-cards">
                                    <div class="info-card" id="weatherCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-cloud-sun"></i> Meteo
                                        </div>
                                        <div class="info-card-content">
                                            <div class="weather-info">
                                                <div class="weather-icon">
                                                    <i class="fas fa-sun"></i>
                                                </div>
                                                <div class="weather-details">
                                                    <div class="weather-temp">22°C - 28°C</div>
                                                    <div class="weather-desc">Soleggiato</div>
                                                </div>
                                            </div>
                                            <div class="weather-forecast">
                                                Media di stagione per il periodo selezionato.
                                            </div>
                                        </div>
                                    </div>

                                    <div class="info-card" id="currencyCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-money-bill-wave"></i> Valuta
                                        </div>
                                        <div class="info-card-content" id="currencyInfo">
                                            <!-- Contenuto generato dinamicamente -->
                                        </div>
                                    </div>

                                    <div class="info-card" id="languageCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-language"></i> Lingua
                                        </div>
                                        <div class="info-card-content" id="languageInfo">
                                            <!-- Contenuto generato dinamicamente -->
                                        </div>
                                    </div>

                                    <div class="info-card" id="timeCard">
                                        <div class="info-card-title">
                                            <i class="fas fa-clock"></i> Fuso Orario
                                        </div>
                                        <div class="info-card-content" id="timeInfo">
                                            <!-- Contenuto generato dinamicamente -->
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="plan-details-section">
                                <h5><i class="fas fa-map-marked-alt"></i> Esplora</h5>
                                <div class="explore-buttons">
                                    <a href="#" class="btn btn-outline-primary external-link" id="googleMapsBtn" data-type="maps">
                                        <i class="fas fa-map"></i> Google Maps
                                    </a>
                                    <a href="#" class="btn btn-outline-primary external-link" id="bookingBtn" data-type="booking">
                                        <i class="fas fa-hotel"></i> Booking.com
                                    </a>
                                    <a href="#" class="btn btn-outline-primary external-link" id="tripAdvisorBtn" data-type="tripadvisor">
                                        <i class="fas fa-thumbs-up"></i> TripAdvisor
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div> <!-- plan-details-content FINE QUI -->
            </div>
            <div class="modal-footer">
                <div>
                    <button type="button" class="btn btn-danger" id="removePlanBtn">
                        <i class="fas fa-trash-alt"></i> Elimina Piano
                    </button>
                </div>
                <div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                    <button type="button" class="btn btn-primary" id="updatePlanBtn">
                        <i class="fas fa-save"></i> Salva Modifiche
                    </button>
                    <button type="button" class="btn btn-success" id="markVisitedBtn">
                        <i class="fas fa-check"></i> Segna come Visitato
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Form invisibile per aggiungere un nuovo elemento alla checklist -->
<div class="modal fade" id="addChecklistItemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Aggiungi elemento alla checklist</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="checklistItemTitle" class="form-label">Titolo</label>
                    <input type="text" class="form-control" id="checklistItemTitle" placeholder="Es: Prenotare volo">
                </div>
                <div class="mb-3">
                    <label for="checklistItemCategory" class="form-label">Categoria</label>
                    <select class="form-select" id="checklistItemCategory">
                        <option value="travel">Viaggio</option>
                        <option value="accommodation">Alloggio</option>
                        <option value="documents">Documenti</option>
                        <option value="activities">Attività</option>
                        <option value="other">Altro</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="checklistItemDueDate" class="form-label">Data di scadenza (opzionale)</label>
                    <input type="date" class="form-control" id="checklistItemDueDate">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="saveChecklistItemBtn">Aggiungi</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <style>
        :root {
            --primary-color: #1a73e8;
            --primary-light: rgba(26, 115, 232, 0.1);
            --accent-color: #2ecc71;
            --accent-light: rgba(46, 204, 113, 0.1);
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --dark-color: #2c3e50;
            --light-color: #f8f9fa;
            --muted-color: #6c757d;
            --border-radius: 12px;
            --box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }
        
        body {
            background-color: #f2f7ff;
            overflow: hidden;
        }
        
        /* Container principale */
        .dreammap-container {
            display: grid;
            grid-template-columns: 380px 1fr;
            height: calc(100vh - 56px);
            overflow: hidden;
        }
        
        /* Sidebar */
        .dreammap-sidebar {
            background-color: white;
            border-right: 1px solid rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            height: 100%;
        }
        .custom-marker-icon {
    background-color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
    width: 30px;
    height: 30px;
}

.ai-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
    text-align: center;
}

        .ai-error {
            background-color: #fff5f5;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
.ai-suggestion-list {
    padding-left: 20px;
}

.ai-suggestion-list li {
    margin-bottom: 10px;
}

#detailsBannerImg {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.dream-tag {
    display: inline-block;
    background-color: var(--primary-color-light);
    color: var(--primary-color);
    border-radius: 15px;
    padding: 2px 10px;
    margin-right: 5px;
    margin-bottom: 5px;
    font-size: 0.8rem;
}
        .dreammap-header {
            padding: 20px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .dreammap-header h2 {
            margin: 0;
            font-size: 1.5rem;
            color: var (--dark-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .dreammap-header h2 i {
            color: var(--warning-color);
        }
        
        .dreammap-header p {
            margin: 5px 0 0;
            color: var (--muted-color);
            font-size: 0.9rem;
        }
        
        /* Nav tabs */
        .nav-tabs {
            padding: 0 20px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .nav-tabs .nav-link {
            border: none;
            border-bottom: 2px solid transparent;
            color: var (--muted-color);
            padding: 10px 0;
            margin-right: 20px;
            font-weight: 500;
        }
        
        .nav-tabs .nav-link.active {
            border-bottom: 2px solid var (--primary-color);
            color: var (--primary-color);
            background: transparent;
        }
        
        .nav-tabs .nav-link i {
            margin-right: 5px;
        }
        
        /* Tab content */
        .tab-content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }
        
        /* Search container */
        .search-container {
            position: relative;
        }
        
        /* Dream list */
        .dreammap-list {
            margin-bottom: 20px;
            min-height: 300px;
        }

        .ai-error {
            background-color: #fff5f5;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        /* Dream item */
        .dream-item, .plan-item {
            background: white;
            border-radius: var (--border-radius);
            box-shadow: var (--box-shadow);
            margin-bottom: 20px;
            overflow: hidden;
            transition: var (--transition);
        }
        
        .dream-item:hover, .plan-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 18px rgba(0,0,0,0.15);
            cursor: pointer;
        }
        
        .dream-item-image, .plan-item-image {
            position: relative;
            height: 120px;
            overflow: hidden;
        }
        
        .dream-item-image img, .plan-item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }
        
        .dream-item:hover .dream-item-image img, 
        .plan-item:hover .plan-item-image img {
            transform: scale(1.05);
        }
        
        .dream-flag, .plan-flag {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 20px;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .dream-flag img, .plan-flag img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .dream-item-content, .plan-item-content {
            padding: 15px;
        }
        
        .dream-priority {
            margin-bottom: 8px;
        }
        
        .dream-priority.low i {
            color: #ffb300;
        }
        
        .dream-priority.medium i {
            color: #fb8c00;
        }
        
        .dream-priority.high i {
            color: #f57c00;
        }
        
        .dream-name, .plan-name {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
            color: var (--dark-color);
        }
        
        .dream-country, .plan-country {
            color: var (--muted-color);
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .dream-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-bottom: 10px;
        }
        
        .dream-tag {
            background-color: var (--primary-light);
            color: var (--primary-color);
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 15px;
        }
        
        .dream-note {
            font-size: 0.9rem;
            color: var (--muted-color);
            line-height: 1.4;
        }
        
        .dream-item-actions, .plan-item-actions {
            display: flex;
            gap: 5px;
            padding: 10px 15px;
            border-top: 1px solid rgba(0,0,0,0.05);
        }
        
        /* Plan specific */
        .plan-dates {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
            color: white;
            padding: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .plan-date-icon {
            width: 30px;
            height: 30px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .plan-countdown {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var (--warning-color);
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .plan-progress {
            margin-bottom: 15px;
        }
        
        .plan-progress .progress {
            height: 8px;
            border-radius: 4px;
            background-color: var (--light-color);
            margin-bottom: 5px;
        }
        
        .plan-progress .progress-bar {
            background-color: var (--accent-color);
            border-radius: 4px;
        }
        
        .plan-progress-text {
            font-size: 0.8rem;
            color: var (--muted-color);;
        }
        
        .plan-checklist {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .ai-suggestion-list {
    padding-left: 20px;
}

.ai-suggestion-list li {
    margin-bottom: 10px;
}

.ai-suggestion-list li strong {
    color: var (--primary-color);
}

.ai-error {
    background-color: #fff5f5;
    border-left: 4px solid #f44336;
    padding: 15px;
    border-radius: 4px;
    text-align: center;
}

.ai-error i {
    color: #f44336;
    font-size: 2rem;
    margin-bottom: 10px;
}

        .plan-checklist li {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 5px 0;
            font-size: 0.9rem;
            color: var (--dark-color);;;
        }
        
        .plan-checklist li.completed {
            color: var (--accent-color);
            text-decoration: line-through;
        }
        
        .plan-checklist li.more {
            color: var (--muted-color);
            font-style: italic;
            text-align: center;
            padding-top: 10px;
        }
        
        /* Empty state */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 40px 20px;
            text-align: center;
        }
        
        .empty-state-icon {
            width: 150px;
            height: 150px;
            margin-bottom: 20px;
            opacity: 0.7;
        }
        
        .empty-state p {
            margin-bottom: 5px;
            color: var (--dark-color);;;
        }
        
        .empty-state p.text-muted {
            font-size: 0.9rem;
        }
        
        /* Add dream button */
        .add-dream-btn {
            position: sticky;
            bottom: 0;
            margin-top: 20px;
            width: 100%;
            padding: 12px;
            border-radius: 8px;
        }
        
        /* Discover tab */
        .discover-header {
            margin-bottom: 20px;
        }
        
        .discover-header h3 {
            margin: 0;
            font-size: 1.3rem;
            color: var (--dark-color);;;
        }
        
        .discover-header p {
            color: var (--muted-color);
            font-size: 0.9rem;
            margin: 5px 0 0;
        }
        
        .recommendation-filters {
            margin-bottom: 20px;
        }
        
        .discover-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .discover-card {
            background: white;
            border-radius: var (--border-radius);
            overflow: hidden;
            box-shadow: var (--box-shadow);
            transition: var (--transition);
        }
        
        .discover-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        
        .discover-image {
            position: relative;
            height: 150px;
        }
        
        .discover-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .discover-flag {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 20px;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .discover-flag img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .discover-match {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: rgba(0,0,0,0.7);
            color: white;
            border-radius: 20px;
            padding: 5px 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            line-height: 1.1;
        }
        
        .discover-match span {
            font-weight: 700;
            font-size: 1rem;
        }
        
        .discover-match small {
            font-size: 0.7rem;
            opacity: 0.8;
        }
        
        .discover-content {
            padding: 15px;
        }
        
        .discover-content h4 {
            margin: 0 0 5px 0;
            font-size: 1.1rem;
        }
        
        .discover-content p {
            margin: 0 0 10px 0;
            color: var (--muted-color);
            font-size: 0.9rem;
        }
        
        .discover-tags {
            display: flex;
            gap: 5px;
            margin-bottom: 15px;
        }
        
        .discover-tag {
            background-color: var (--primary-light);
            color: var (--primary-color);
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 15px;
        }
        
        .discover-highlights {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .discover-highlight {
            background-color: var (--light-color);
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .discover-highlight i {
            color: var (--primary-color);
        }
        
        .discover-actions {
            padding: 10px 15px;
            border-top: 1px solid rgba(0,0,0,0.05);
            display: flex;
            justify-content: space-between;
        }
        
        .discover-more {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        
        /* Map container */
        .dreammap-main {
            position: relative;
            height: 100vh; /* Add this explicit height */
        }
        
        #dreamMap {
            height: 100%;
            width: 100%;
        }
        
        /* Modal styles */
        .modal-content {
            border-radius: 15px;
            border: none;
            overflow: hidden;
        }
        
        .modal-header {
            background-color: var (--primary-color);
            color: white;
        }
        
        .modal-header .btn-close {
            filter: brightness(200%);
        }
        
        /* Add dream modal */
        .priority-selector {
            display: flex;
            gap: 15px;
        }
        
        .priority-selector .form-check-inline {
            margin-right: 0;
        }
        
        .priority-selector i {
            color: #ffb300;
        }
        
        .destination-image-preview {
            position: relative;
            height: 200px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var (--box-shadow);
        }
        
        .destination-image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .image-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
            padding: 20px;
            display: flex;
            justify-content: center;
        }
        
        /* Dream details modal */
        .dream-details-header, .plan-details-header {
            background: linear-gradient(135deg, var (--primary-color), #4c6ef5);
        }
        
        .dream-details-banner, .plan-details-banner {
            position: relative;
            height: 250px;
        }
        
        .dream-details-banner img, .plan-details-banner img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .dream-details-overlay, .plan-details-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);
            color: white;
            padding: 20px;
        }
        
        .dream-details-overlay h2, .plan-details-overlay h2 {
            margin: 0;
            font-size: 2rem;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
        }
        
        .dream-details-overlay p, .plan-details-overlay p {
            margin: 5px 0 0;
            font-size: 1.1rem;
            opacity: 0.9;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        
        .dream-details-content, .plan-details-content {
            padding: 20px;
        }
        
        .dream-details-info {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .detail-item {
            display: flex;
            gap: 15px;
            flex: 1 1 calc(33.333% - 20px);
        }
        
        .detail-item.full-width {
            flex: 1 1 100%;
        }
        
        .detail-icon {
            width: 40px;
            height: 40px;
            background-color: var (--primary-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var (--primary-color);
            font-size: 1.2rem;
            flex-shrink: 0;
        }
        
        .detail-text {
            flex: 1;
        }
        
        .detail-text h6 {
            margin: 0 0 5px 0;
            color: var (--muted-color);
            font-size: 0.9rem;
        }
        
        .dream-note {
            background-color: var (--light-color);
            border-radius: 8px;
            padding: 15px;
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        /* AI Suggestions */
        .dream-ai-suggestions {
            margin-top: 30px;
        }
        
        .dream-ai-suggestions h5 {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .dream-ai-suggestions h5 i {
            color: var (--warning-color);
        }
        
/* Stili per i tab suggerimenti */
.suggestion-tabs {
    display: flex;
    border-bottom: 1px solid #dee2e6;
    margin-bottom: 15px;
}

.suggestion-tab {
    padding: 8px 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 2px solid transparent;
    margin-right: 5px;
}

.suggestion-tab:hover {
    background-color: rgba(0, 123, 255, 0.05);
    border-bottom: 2px solid rgba(0, 123, 255, 0.3);
}

.suggestion-tab.active {
    font-weight: 500;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.suggestion-pane {
    display: none;
    padding: 10px 0;
}

.suggestion-pane.active {
    display: block;
}
        
        /* Plan details */
        .plan-date-range {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 10px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 5px 15px;
            display: inline-flex;
        }
        
        .plan-details-section {
            margin-bottom: 30px;
        }
        
        .plan-details-section h5 {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 15px;
            color: var (--dark-color);
        }
        
        .plan-details-section h5 i {
            color: var (--primary-color);
        }
        
        .plan-progress-bar {
            margin-bottom: 20px;
        }
        
        .checklist-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .plan-detailed-checklist {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .plan-detailed-checklist li {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px 15px;
            background-color: var (--light-color);
            border-radius: 8px;
            margin-bottom: 10px;
            transition: var (--transition);
        }
        
        .plan-detailed-checklist li:hover {
            background-color: var (--primary-light);
        }
        
        .plan-detailed-checklist li.completed {
            background-color: var (--accent-light);
            text-decoration: line-through;
            color: var (--muted-color);
        }
        
        .plan-detailed-checklist li i {
            color: var (--accent-color);
        }
        
        .plan-detailed-checklist .checklist-text {
            flex: 1;
        }
        
        .plan-detailed-checklist .checklist-category {
            background-color: rgba(0,0,0,0.05);
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            color: var (--muted-color);
        }
        
        .plan-detailed-checklist .checklist-due {
            font-size: 0.8rem;
            color: var (--warning-color);
        }
        
        /* Info cards */
        .info-cards {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .info-card {
            background-color: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var (--box-shadow);
        }
        
        .info-card-title {
            background-color: var (--primary-light);
            color: var (--primary-color);
            padding: 10px 15px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .info-card-content {
            padding: 15px;
            font-size: 0.9rem;
        }
        
        .weather-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .weather-icon {
            font-size: 2rem;
            color: var (--warning-color);
        }
        
        .weather-temp {
            font-weight: 700;
        }
        
        .weather-desc {
            color: var (--muted-color);
        }
        
        .weather-forecast {
            margin-top: 10px;
            font-style: italic;
            font-size: 0.8rem;
            color: var (--muted-color);
        }
        
        .explore-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .explore-buttons .btn {
            flex: 1;
        }
        
        /* Leaflet custom styles */
        .custom-marker-icon {
            background-color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        }
        
        .custom-marker-icon i {
            color: var (--primary-color);
        }
        
        .custom-popup {
            font-family: 'Roboto', sans-serif;
        }
        
        .custom-popup h3 {
            margin: 0 0 5px 0;
            font-size: 1.2rem;
        }
        
        .custom-popup p {
            margin: 0 0 10px 0;
            color: var (--muted-color);
        }
        
        /* Responsive */
        @@media (max-width: 992px) {
            .dreammap-container {
                grid-template-columns: 1fr;
                grid-template-rows: 1fr 350px;
            }
            
            .dreammap-main {
                order: 1;
            }
            
            .dreammap-sidebar {
                order: 2;
                height: 350px;
                overflow-y: auto;
            }
            
            .info-cards {
                grid-template-columns: 1fr;
            }
        }
        
        @@media (max-width: 768px) {
            .dream-details-info {
                gap: 15px;
            }
            
            .detail-item {
                flex: 1 1 100%;
            }
            
            .discover-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

    @section Scripts {
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let map;
        let markers = [];
        let markerClusters;

        // Dati delle destinazioni
        const destinations = @Html.Raw(Json.Serialize(Model.AllDestinations));

        function initMap() {
            // Inizializza la mappa Leaflet con opzioni di limitazione
            map = L.map('dreamMap', {
                center: [20, 0],
                zoom: 2,
                minZoom: 2, // Limita il livello minimo di zoom
                maxBounds: [[-90, -180], [90, 180]], // Limita i confini della mappa
                maxBoundsViscosity: 1.0, // Mantiene la mappa all'interno dei limiti
                worldCopyJump: true, // Gestisce meglio la navigazione ai bordi della mappa
            });

            // Aggiungi i controlli di zoom nella posizione desiderata
            L.control.zoom({
                position: 'topleft'
            }).addTo(map);

            // Aggiungi il layer di base della mappa con noWrap per evitare ripetizioni
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19,
                noWrap: true // Importante: impedisce la ripetizione della mappa
            }).addTo(map);

            // Inizializza il cluster per i marker
            markerClusters = L.markerClusterGroup({
                showCoverageOnHover: false,
                maxClusterRadius: 50,
                iconCreateFunction: function (cluster) {
                    return L.divIcon({
                        html: '<div class="cluster-icon">' + cluster.getChildCount() + '</div>',
                        className: 'custom-cluster-icon',
                        iconSize: L.point(40, 40)
                    });
                }
            });
            map.addLayer(markerClusters);

            // Aggiungi un handler per gli errori di movimento della mappa
            map.on('error', function (e) {
                console.error('Errore mappa:', e.error);
            });
        }

        function loadMapMarkers() {
            console.log('Aggiornamento marker sulla mappa');

            if (markerClusters) {
                markerClusters.clearLayers();
            }
            markers = [];

            if (!destinations) {
                console.error('Dati delle destinazioni non disponibili');
                destinations = { wishlist: [], plannedTrips: [], visitedCities: [] };
            }

            if (!Array.isArray(destinations.wishlist)) destinations.wishlist = [];
            if (!Array.isArray(destinations.plannedTrips)) destinations.plannedTrips = [];
            if (!Array.isArray(destinations.visitedCities)) destinations.visitedCities = [];

            console.log('Dati wishlist:', destinations.wishlist.length);
            console.log('Dati piani:', destinations.plannedTrips.length);
            console.log('Dati visite:', destinations.visitedCities.length);

            destinations.wishlist.forEach(function (dream) {
                if (!isValidLatitude(dream.latitude) || !isValidLongitude(dream.longitude)) {
                    console.error(`Coordinate non valide per ${dream.cityName}: lat=${dream.latitude}, lng=${dream.longitude}`);
                    return;
                }
                const marker = createMarker(dream.latitude, dream.longitude, dream.cityName, dream.countryName, 'dream', dream.priority, dream.id);
                markers.push(marker);
                markerClusters.addLayer(marker);
            });

            destinations.plannedTrips.forEach(function (plan) {
                if (!isValidLatitude(plan.latitude) || !isValidLongitude(plan.longitude)) {
                    console.error(`Coordinate non valide per ${plan.cityName}: lat=${plan.latitude}, lng=${plan.longitude}`);
                    return;
                }
                const marker = createMarker(plan.latitude, plan.longitude, plan.cityName, plan.countryName, 'plan', plan.completionPercentage || 0, plan.id);
                markers.push(marker);
                markerClusters.addLayer(marker);
            });

            destinations.visitedCities.forEach(function (visit) {
                if (!isValidLatitude(visit.latitude) || !isValidLongitude(visit.longitude)) {
                    console.error(`Coordinate non valide per ${visit.cityName}: lat=${visit.latitude}, lng=${visit.longitude}`);
                    return;
                }
                const marker = createMarker(visit.latitude, visit.longitude, visit.cityName, visit.countryName, 'visited', null, visit.id);
                markers.push(marker);
                markerClusters.addLayer(marker);
            });
        }

        function createMarker(lat, lng, city, country, type, detail, id) {
            let color, icon;
            switch (type) {
                case 'dream': color = '#ff9800'; icon = 'star'; break;
                case 'plan': color = '#4a90e2'; icon = 'plane-departure'; break;
                case 'visited': color = '#4caf50'; icon = 'check-circle'; break;
                default: color = '#607d8b'; icon = 'map-marker-alt';
            }

            const customIcon = L.divIcon({
                html: `<div style="background-color: ${color}"><i class="fas fa-${icon}"></i></div>`,
                className: 'custom-marker-icon',
                iconSize: [30, 30]
            });

            const marker = L.marker([lat, lng], { icon: customIcon });
            marker.itemId = id;
            marker.itemType = type;

            let popupContent = `<div class="custom-popup"><h3>${city}</h3><p>${country}</p>`;
            if (type === 'dream') {
                const stars = '⭐'.repeat(detail || 1);
                popupContent += `<p>Priorità: ${stars}</p><button class="btn btn-sm btn-primary" onclick="showDreamDetails('${id}')">Dettagli</button>`;
            } else if (type === 'plan') {
                popupContent += `<p>Completamento: ${detail || 0}%</p><div class="progress mb-2" style="height: 5px"><div class="progress-bar" style="width: ${detail || 0}%"></div></div><button class="btn btn-sm btn-primary" onclick="showPlanDetails('${id}')">Dettagli</button>`;
            } else {
                popupContent += `<p>Già visitata</p><button class="btn btn-sm btn-primary" onclick="showVisitDetails('${id}')">Ricordi</button>`;
            }
            popupContent += `</div>`;
            marker.bindPopup(popupContent);
            return marker;
        }

        function flyToDestination(lat, lng) {
            if (!map) { console.error("Mappa non inizializzata"); return; }
            if (!isValidLatitude(lat) || !isValidLongitude(lng)) { console.error(`Coordinate non valide: lat=${lat}, lng=${lng}`); return; }

            console.log(`Spostamento della mappa a: lat=${lat}, lng=${lng}`);
            lat = parseFloat(lat);
            lng = parseFloat(lng);
            lat = Math.max(-85, Math.min(85, lat));
            lng = ((lng + 540) % 360) - 180;

            map.flyTo([lat, lng], 10, { duration: 1.5, easeLinearity: 0.25, animate: true });

            let foundMarker = markers.find(marker => {
                const markerLat = marker.getLatLng().lat;
                const markerLng = marker.getLatLng().lng;
                return Math.abs(markerLat - lat) < 0.1 && Math.abs(markerLng - lng) < 0.1;
            });

            if (foundMarker) {
                setTimeout(() => { foundMarker.openPopup(); }, 1600);
            }
        }

        function isValidLatitude(lat) { return typeof lat === 'number' && !isNaN(lat) && lat >= -90 && lat <= 90; }
        function isValidLongitude(lng) { return typeof lng === 'number' && !isNaN(lng) && lng >= -180 && lng <= 180; }
        function normalizeLongitude(lng) { lng = ((lng + 180) % 360) - 180; if (lng === -180) lng = 180; return lng; }

        function setupEventListeners() {
            document.querySelectorAll('[role="tab"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', function (e) {
                    setTimeout(() => { if (map) map.invalidateSize(); }, 100);
                });
            });

            document.addEventListener('click', function (e) {
                const dreamItem = e.target.closest('.dream-item');
                const planItem = e.target.closest('.plan-item');
                if (e.target.tagName === 'BUTTON' || e.target.closest('button') || e.target.tagName === 'A' || e.target.closest('a')) {
                    return;
                }
                if (dreamItem) {
                    const lat = parseFloat(dreamItem.getAttribute('data-lat'));
                    const lng = parseFloat(dreamItem.getAttribute('data-lng'));
                    if (isValidLatitude(lat) && isValidLongitude(lng)) flyToDestination(lat, lng);
                } else if (planItem) {
                    const lat = parseFloat(planItem.getAttribute('data-lat'));
                    const lng = parseFloat(planItem.getAttribute('data-lng'));
                    if (isValidLatitude(lat) && isValidLongitude(lng)) flyToDestination(lat, lng);
                }
            });
        }

        function filterItems(containerId, searchText) {
            const container = document.getElementById(containerId);
            if (!container) return;
            const items = container.querySelectorAll('.dream-item, .plan-item');
            items.forEach(item => {
                const cityName = (item.dataset.city || '').toLowerCase();
                const countryName = (item.dataset.country || '').toLowerCase();
                item.style.display = (cityName.includes(searchText) || countryName.includes(searchText)) ? '' : 'none';
            });
        }

        function showLoadingOverlay(message = 'Caricamento...') {
            const overlay = document.createElement('div');
            overlay.id = 'loadingOverlay';
            overlay.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center';
            overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
            overlay.style.zIndex = '9999';
            overlay.innerHTML = `<div class="bg-white p-4 rounded shadow"><div class="d-flex align-items-center"><div class="spinner-border text-primary me-3" role="status"></div><span>${message}</span></div></div>`;
            document.body.appendChild(overlay);
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) document.body.removeChild(overlay);
        }

        // UNICA DEFINIZIONE CORRETTA
        function formatDateForInput(date) {
            if (!date) return '';
            const d = new Date(date);
            if (isNaN(d.getTime())) return '';

            const year = d.getFullYear();
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function showDreamDetails(dreamId) {
            try {
                console.log('Mostra dettagli sogno:', dreamId);
                if (!dreamId) { console.error('ID non valido'); showToast('Errore', 'ID destinazione non valido', 'danger'); return; }

                let dreamData = destinations.wishlist.find(d => d.id && d.id.toString() === dreamId.toString());
                let dataSource = dreamData ? 'wishlist' : '';

                if (!dreamData) {
                    const planAttempt = destinations.plannedTrips.find(p => p.id && p.id.toString() === dreamId.toString());
                    if (planAttempt) { showPlanDetails(dreamId); return; }
                }
                if (!dreamData) {
                    const visitedAttempt = destinations.visitedCities.find(v => v.id && v.id.toString() === dreamId.toString());
                    if (visitedAttempt) { showVisitDetails(dreamId); return; }
                }

                if (!dreamData) { // Fallback if not found anywhere
                    const element = document.querySelector(`.dream-item[data-id="${dreamId}"]`);
                    if (element) {
                        dreamData = {
                            id: dreamId,
                            cityName: element.querySelector('.dream-name')?.textContent || 'N/A',
                            countryName: element.querySelector('.dream-country')?.textContent || 'N/A',
                            imageUrl: element.querySelector('img')?.src || '/images/placeholder-city.jpg',
                            notes: '', latitude: parseFloat(element.getAttribute('data-lat')), longitude: parseFloat(element.getAttribute('data-lng')),
                            priority: element.querySelector('.dream-priority')?.classList.contains('high') ? 3 : (element.querySelector('.dream-priority')?.classList.contains('medium') ? 2 : 1),
                            tags: ['viaggio'], addedOn: new Date().toLocaleDateString()
                        };
                        dataSource = 'dom-fallback';
                    } else {
                        dreamData = { id: dreamId, cityName: 'Sconosciuto', countryName: 'Sconosciuto', imageUrl: '/images/placeholder-city.jpg', notes: '', latitude: 0, longitude: 0, priority: 1, tags: [], addedOn: new Date().toLocaleDateString() };
                        dataSource = 'super-fallback';
                    }
                }
                console.log(`Dati sogno trovati in ${dataSource}:`, dreamData);

                const modal = document.getElementById('dreamDetailsModal');
                modal.setAttribute('data-dream-id', dreamId);

                document.getElementById('detailsCityName').textContent = dreamData.cityName;
                document.getElementById('detailsCountryName').textContent = dreamData.countryName;
                const bannerImg = document.getElementById('detailsBannerImg');
                bannerImg.onerror = function () { this.src = '/images/placeholder-city.jpg'; };
                bannerImg.src = dreamData.imageUrl;
                document.getElementById('detailsDate').textContent = dreamData.addedOn ? (typeof dreamData.addedOn === 'string' ? dreamData.addedOn : new Date(dreamData.addedOn).toLocaleDateString()) : 'N/A';
                const noteElement = document.getElementById('detailsNote');
                noteElement.textContent = dreamData.notes || 'Nessuna nota.';
                noteElement.style.fontStyle = dreamData.notes ? 'normal' : 'italic';

                const priorityDiv = document.getElementById('detailsPriority');
                priorityDiv.innerHTML = Array(dreamData.priority || 1).fill(0).map(() => '<i class="fas fa-star" style="color: #FFD700;"></i>').join('');

                const tagsDiv = document.getElementById('detailsTags');
                tagsDiv.innerHTML = (dreamData.tags || ['viaggio']).map(tag => `<span class="dream-tag" style="background-color: #e9ecef; color: #495057; padding: 2px 8px; border-radius: 15px; margin: 0 4px 4px 0; display: inline-block; font-size: 0.9rem;">${tag}</span>`).join('');

                setupExternalLinks(dreamData.cityName, dreamData.countryName);
                ['attractions', 'gastronomy', 'history', 'tips'].forEach(type => loadAISuggestions(type, dreamData.cityName));
                setTimeout(initializeSuggestionTabs, 100);

                const planTripBtn = document.getElementById('planTripBtn');
                planTripBtn.style.display = (dataSource === 'wishlist' || dataSource === 'dom-fallback') ? 'block' : 'none'; // Allow planning if from DOM fallback as well
                if (planTripBtn.style.display === 'block') {
                    planTripBtn.onclick = () => moveToPlanningPhase(dreamId);
                }

                if (isValidLatitude(dreamData.latitude) && isValidLongitude(dreamData.longitude)) flyToDestination(dreamData.latitude, dreamData.longitude);

                new bootstrap.Modal(modal).show();
            } catch (error) {
                console.error('Errore in showDreamDetails:', error);
                showToast('Errore', 'Dettagli non caricati.', 'danger');
            }
        }

        function addToWishlist(cityId) {
            showLoadingOverlay('Aggiunta alla wishlist...');
            fetch('/DreamMap?handler=AddToWishlist', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getAntiForgeryToken() },
                body: JSON.stringify({ cityId: cityId })
            })
                .then(response => response.json())
                .then(data => {
                    hideLoadingOverlay();
                    if (data.success) {
                        if (!destinations.wishlist) destinations.wishlist = [];
                        destinations.wishlist.push(data.newItem);
                        sincronizzaStatoApp();
                        showToast('Successo', 'Destinazione aggiunta!', 'success');
                    } else {
                        showToast('Errore', data.message || 'Errore aggiunta.', 'danger');
                    }
                })
                .catch(error => {
                    hideLoadingOverlay();
                    console.error('Error:', error);
                    showToast('Errore', 'Errore connessione.', 'danger');
                });
        }

        function ricostruisciSidebar() {
            const wishlistContainer = document.getElementById('wishlistItems');
            if (wishlistContainer) {
                wishlistContainer.innerHTML = '';
                if (!destinations.wishlist || destinations.wishlist.length === 0) {
                    wishlistContainer.innerHTML = `<div class="empty-state"><img src="/images/empty-wishlist.svg" alt="Wishlist vuota" class="empty-state-icon"><p>La tua lista dei desideri è vuota</p><p class="text-muted">Aggiungi destinazioni qui sotto</p></div>`;
                } else {
                    destinations.wishlist.forEach(dream => {
                        if (!dream || !dream.cityName) { console.error('Invalid dream item:', dream); return; }
                        const priorityClass = dream.priority === 3 ? 'high' : dream.priority === 2 ? 'medium' : 'low';
                        const starsHtml = Array(dream.priority || 1).fill(0).map(() => '<i class="fas fa-star"></i>').join('');
                        const dreamItemHtml = `
                                    <div class="dream-item" data-city="${(dream.cityName || '').toLowerCase()}" data-country="${(dream.countryName || '').toLowerCase()}"
                                        data-id="${dream.id}" data-lat="${dream.latitude}" data-lng="${dream.longitude}"
                                        onclick="flyToDestination(${dream.latitude}, ${dream.longitude})">
                                        <div class="dream-item-image">
                                            <img src="${dream.imageUrl || '/images/placeholder-city.jpg'}" alt="${dream.cityName}" onerror="this.src='/images/placeholder-city.jpg'">
                                            <div class="dream-flag"><img src="/images/flags/${getCountryCode(dream.countryName).toLowerCase()}.png" alt="${dream.countryName}"></div>
                                        </div>
                                        <div class="dream-item-content">
                                            <div class="dream-priority ${priorityClass}">${starsHtml}</div>
                                            <h3 class="dream-name">${dream.cityName}</h3>
                                            <p class="dream-country">${dream.countryName || ''}</p>
                                            <div class="dream-tags">${(dream.tags || ['viaggio']).map(tag => `<span class="dream-tag">${tag}</span>`).join('')}</div>
                                            <div class="dream-note">${dream.notes ? (dream.notes.length > 100 ? dream.notes.substring(0, 100) + "..." : dream.notes) : ''}</div>
                                        </div>
                                        <div class="dream-item-actions">
                                            <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="${dream.id}"><i class="fas fa-info-circle"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-warning" onclick="moveToPlanningPhase('${dream.id}')"><i class="fas fa-calendar-plus"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeDream('${dream.id}')"><i class="fas fa-trash"></i></button>
                                        </div>
                                    </div>`;
                        wishlistContainer.innerHTML += dreamItemHtml;
                    });
                }
            }
            // Ricostruzione della sezione "In Pianificazione" (simile alla wishlist)
            const planningContainer = document.getElementById('planningItems');
            if (planningContainer) {
                planningContainer.innerHTML = '';
                if (!destinations.plannedTrips || destinations.plannedTrips.length === 0) {
                    planningContainer.innerHTML = `<div class="empty-state"><img src="/images/empty-planning.svg" alt="Nessun viaggio" class="empty-state-icon"><p>Non hai viaggi pianificati</p><p class="text-muted">Sposta un sogno qui per iniziare.</p></div>`;
                } else {
                    destinations.plannedTrips.forEach(plan => {
                        if (!plan || !plan.cityName) { console.error('Invalid plan item:', plan); return; }
                        const countdownDays = plan.startDate ? Math.max(0, Math.ceil((new Date(plan.startDate) - new Date()) / (1000 * 60 * 60 * 24))) : 0;
                        const checklistPreview = plan.checklist && plan.checklist.length > 0 ?
                            plan.checklist.slice(0, 3).map(item => `<li class="${item.isCompleted ? "completed" : ""}"><i class="${item.isCompleted ? "fas fa-check-circle" : "far fa-circle"}"></i> ${item.title}</li>`).join('') +
                            (plan.checklist.length > 3 ? `<li class="more">+ altri ${plan.checklist.length - 3} elementi</li>` : '')
                            : '<li>Nessuna checklist.</li>';

                        const planItemHtml = `
                                    <div class="plan-item" data-city="${(plan.cityName || '').toLowerCase()}" data-country="${(plan.countryName || '').toLowerCase()}"
                                        data-id="${plan.id}" data-lat="${plan.latitude}" data-lng="${plan.longitude}"
                                        onclick="flyToDestination(${plan.latitude}, ${plan.longitude})">
                                        <div class="plan-item-image">
                                            <img src="${plan.imageUrl || '/images/placeholder-city.jpg'}" alt="${plan.cityName}" onerror="this.src='/images/placeholder-city.jpg'">
                                            <div class="plan-flag"><img src="/images/flags/${getCountryCode(plan.countryName).toLowerCase()}.png" alt="${plan.countryName}"></div>
                                            <div class="plan-dates"><div class="plan-date-icon"><i class="fas fa-plane-departure"></i></div><div class="plan-date-range">${plan.startDate ? new Date(plan.startDate).toLocaleDateString("it-IT") : 'N/A'}</div></div>
                                        </div>
                                        <div class="plan-item-content">
                                            <h3 class="plan-name">${plan.cityName}</h3>
                                            <p class="plan-country">${plan.countryName || ''}</p>
                                            <div class="plan-countdown"><i class="far fa-calendar-alt"></i><strong>${countdownDays}</strong> giorni rimanenti</div>
                                            <div class="plan-progress">
                                                <div class="progress"><div class="progress-bar" role="progressbar" style="width: ${plan.completionPercentage || 0}%" aria-valuenow="${plan.completionPercentage || 0}" aria-valuemin="0" aria-valuemax="100"></div></div>
                                                <span class="plan-progress-text">${plan.completionPercentage || 0}% completato</span>
                                            </div>
                                            <ul class="plan-checklist">${checklistPreview}</ul>
                                        </div>
                                        <div class="plan-item-actions">
                                            <button type="button" class="btn btn-sm btn-outline-info show-details-btn" data-id="${plan.id}"><i class="fas fa-info-circle"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-success" onclick="markAsVisited('${plan.id}')"><i class="fas fa-check"></i></button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removePlan('${plan.id}')"><i class="fas fa-trash"></i></button>
                                        </div>
                                    </div>`;
                        planningContainer.innerHTML += planItemHtml;
                    });
                }
            }
            initializeDetailButtons(); // Cruciale riattaccare listener ai nuovi bottoni
        }

        function initializeDetailButtons() {
            console.log("Inizializzazione pulsanti dettagli");
            document.querySelectorAll('.show-details-btn').forEach(button => {
                // Rimuove listener esistenti clonando il bottone
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);

                newButton.addEventListener('click', function (event) {
                    event.stopPropagation();
                    const itemId = this.getAttribute('data-id');
                    const itemElement = this.closest('.dream-item, .plan-item');
                    if (itemElement && itemId) {
                        if (itemElement.classList.contains('dream-item')) {
                            showDreamDetails(itemId);
                        } else if (itemElement.classList.contains('plan-item')) {
                            showPlanDetails(itemId);
                        }
                    } else {
                        console.error("ID o elemento non trovato per il pulsante dettagli.");
                    }
                });
            });
        }

        function loadAISuggestions(type, cityName) {
            console.log(`Caricamento suggerimenti ${type} per ${cityName}`);
            const suggestionPane = document.getElementById(`suggestions${type.charAt(0).toUpperCase() + type.slice(1)}`);
            if (!suggestionPane) { console.error('Pane non trovato:', `suggestions${type.charAt(0).toUpperCase() + type.slice(1)}`); return; }

            suggestionPane.innerHTML = `<div class="ai-loading"><div class="spinner-border text-primary"></div><p>Generando suggerimenti...</p></div>`;
            fetch(`/DreamMap?handler=Travelsuggestions&cityName=${encodeURIComponent(cityName)}&suggestionType=${encodeURIComponent(type)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.html) {
                        let cleanedHtml = data.html.replace(/^\s*```(?:html|HTML)?\s*\n?/i, '').replace(/\s*```\s*$/, '').replace(/^\s*<pre>\s*|\s*<\/pre>\s*$/g, '');
                        suggestionPane.innerHTML = cleanedHtml.trim() ? cleanedHtml : '<div class="ai-error"><p>Nessun suggerimento disponibile.</p></div>';
                        if (type === 'attractions') document.querySelector('.suggestion-tab[data-tab="attractions"]')?.click();
                    } else {
                        suggestionPane.innerHTML = `<div class="ai-error"><p>Errore suggerimenti: ${data.error || 'Sconosciuto'}</p></div>`;
                    }
                })
                .catch(error => {
                    console.error("Errore API suggerimenti:", error);
                    suggestionPane.innerHTML = `<div class="ai-error"><p>Errore caricamento suggerimenti per ${cityName}.</p><button class="btn btn-sm btn-outline-primary mt-3" onclick="loadAISuggestions('${type}', '${cityName}')">Riprova</button></div>`;
                });
        }

        function showPlanDetails(planId) {
            try {
                console.log('Mostra dettagli piano:', planId);
                if (!planId) { console.error('ID piano non valido'); showToast('Errore', 'ID piano non valido', 'danger'); return; }

                let planData = destinations.plannedTrips.find(p => p.id && p.id.toString() === planId.toString());
                if (!planData) { // Fallback se non trovato nei dati principali
                    const element = document.querySelector(`.plan-item[data-id="${planId}"]`);
                    if (element) {
                        planData = {
                            id: planId, cityName: element.querySelector('.plan-name')?.textContent || 'N/A', countryName: element.querySelector('.plan-country')?.textContent || 'N/A',
                            imageUrl: element.querySelector('img')?.src || '/images/placeholder-city.jpg', startDate: new Date(), endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                            completionPercentage: 0, notes: '', latitude: parseFloat(element.getAttribute('data-lat')), longitude: parseFloat(element.getAttribute('data-lng')), checklist: []
                        };
                        // Aggiungi ai dati principali se era solo nel DOM (per consistenza)
                        if (!destinations.plannedTrips.find(p => p.id.toString() === planId.toString())) {
                            destinations.plannedTrips.push(planData);
                        }
                    } else { showToast('Errore', 'Dati piano non trovati.', 'danger'); return; }
                }
                planData.checklist = planData.checklist || []; // Assicura che checklist sia sempre un array

                console.log(`Dati piano trovati:`, planData);
                const modal = document.getElementById('planDetailsModal');
                modal.setAttribute('data-plan-id', planId);

                document.getElementById('planCityName').textContent = planData.cityName;
                document.getElementById('planCountryName').textContent = planData.countryName;
                const bannerImg = document.getElementById('planBannerImg');
                bannerImg.onerror = function () { this.src = '/images/placeholder-city.jpg'; };
                bannerImg.src = planData.imageUrl;

                const startDate = planData.startDate ? new Date(planData.startDate) : new Date();
                const endDate = planData.endDate ? new Date(planData.endDate) : new Date(new Date(startDate).setDate(startDate.getDate() + 7));

                const planDateRangeDisplay = document.getElementById('planDateRange').querySelector('span');
                if (planDateRangeDisplay) planDateRangeDisplay.textContent = `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;

                document.getElementById('planStartDateInput').value = formatDateForInput(startDate);
                document.getElementById('planEndDateInput').value = formatDateForInput(endDate);
                document.getElementById('planNotes').value = planData.notes || '';

                renderChecklistInModal(planId);
                updateCompletionPercentage(planId);

                const addChecklistItemBtnInModal = document.getElementById('addChecklistItem');
                const newAddBtn = addChecklistItemBtnInModal.cloneNode(true);
                addChecklistItemBtnInModal.parentNode.replaceChild(newAddBtn, addChecklistItemBtnInModal);
                newAddBtn.onclick = () => {
                    const addModalEl = document.getElementById('addChecklistItemModal');
                    addModalEl.setAttribute('data-current-plan-id', planId);
                    document.getElementById('checklistItemTitle').value = '';
                    document.getElementById('checklistItemCategory').value = 'travel';
                    document.getElementById('checklistItemDueDate').value = '';
                    new bootstrap.Modal(addModalEl).show();
                };

                populateCountryInfo(planData.countryName);
                setupExternalLinks(planData.cityName, planData.countryName);
                if (isValidLatitude(planData.latitude) && isValidLongitude(planData.longitude)) flyToDestination(planData.latitude, planData.longitude);

                new bootstrap.Modal(modal).show();
            } catch (error) {
                console.error('Errore in showPlanDetails:', error);
                showToast('Errore', 'Caricamento dettagli piano fallito.', 'danger');
            }
        }

        function renderChecklistInModal(planId) {
            const planIndex = destinations.plannedTrips.findIndex(p => p.id && p.id.toString() === planId);
            if (planIndex === -1) { console.error("Piano non trovato per renderChecklistInModal:", planId); return; }
            const planData = destinations.plannedTrips[planIndex];
            planData.checklist = planData.checklist || []; // Assicura che sia un array

            const checklistContainer = document.getElementById('planChecklist');
            checklistContainer.innerHTML = '';
            if (planData.checklist.length > 0) {
                planData.checklist.forEach(item => {
                    const listItem = document.createElement('li');
                    listItem.className = item.isCompleted ? 'completed' : '';
                    listItem.dataset.id = item.id;

                    const checkIcon = document.createElement('i');
                    checkIcon.className = item.isCompleted ? 'fas fa-check-circle' : 'far fa-circle';
                    checkIcon.style.cursor = 'pointer';
                    checkIcon.onclick = () => toggleChecklistItem(planId, item.id);

                    const textDiv = document.createElement('div');
                    textDiv.className = 'checklist-text';
                    textDiv.textContent = item.title;

                    const categorySpan = document.createElement('span');
                    categorySpan.className = 'checklist-category';
                    categorySpan.textContent = getCategoryLabel(item.category);

                    const dueSpan = document.createElement('span');
                    dueSpan.className = 'checklist-due';
                    if (item.dueDate) {
                        dueSpan.innerHTML = `<i class="far fa-calendar-alt"></i> ${new Date(item.dueDate).toLocaleDateString()}`;
                    }

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'btn btn-sm btn-outline-danger ms-auto remove-checklist-item-btn';
                    removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
                    removeBtn.type = 'button';
                    removeBtn.onclick = () => removeChecklistItem(planId, item.id);

                    listItem.appendChild(checkIcon);
                    listItem.appendChild(textDiv);
                    listItem.appendChild(categorySpan);
                    listItem.appendChild(dueSpan);
                    listItem.appendChild(removeBtn);
                    checklistContainer.appendChild(listItem);
                });
            } else {
                checklistContainer.innerHTML = '<li class="text-muted fst-italic">Nessun elemento nella checklist.</li>';
            }
        }

        // UNICA DEFINIZIONE CORRETTA
        function getCategoryLabel(category) {
            const labels = { 'travel': 'Viaggio', 'accommodation': 'Alloggio', 'documents': 'Documenti', 'activities': 'Attività', 'other': 'Altro' };
            return labels[category] || category;
        }

        function sincronizzaStatoApp() {
            console.log('Sincronizzazione stato app...');
            if (!destinations) destinations = { wishlist: [], plannedTrips: [], visitedCities: [] };
            if (!destinations.wishlist) destinations.wishlist = [];
            if (!destinations.plannedTrips) destinations.plannedTrips = [];
            if (!destinations.visitedCities) destinations.visitedCities = [];

            ricostruisciSidebar();
            if (map) {
                setTimeout(() => { loadMapMarkers(); map.invalidateSize(); }, 200);
            }
        }

        function configuraPulsantiModal() {
            console.log("Configurazione pulsanti modal...");
            const removePlanBtn = document.getElementById('removePlanBtn');
            const updatePlanBtn = document.getElementById('updatePlanBtn');
            const markVisitedBtn = document.getElementById('markVisitedBtn');
            const planDetailsModalEl = document.getElementById('planDetailsModal'); // Per ottenere planId

            if (removePlanBtn) {
                removePlanBtn.onclick = function () {
                    const planId = planDetailsModalEl.getAttribute('data-plan-id');
                    if (planId) removePlan(planId); else console.error("removePlanBtn: planId non trovato nel modal.");
                };
            }
            if (updatePlanBtn) {
                updatePlanBtn.onclick = function () {
                    const planId = planDetailsModalEl.getAttribute('data-plan-id');
                    console.log("Pulsante Salva Modifiche cliccato, planId:", planId); // Log cruciale
                    if (planId) updatePlanDetails(planId); else console.error("updatePlanBtn: planId non trovato nel modal.");
                };
            }
            if (markVisitedBtn) {
                markVisitedBtn.onclick = function () {
                    const planId = planDetailsModalEl.getAttribute('data-plan-id');
                    if (planId) markAsVisited(planId); else console.error("markVisitedBtn: planId non trovato nel modal.");
                };
            }

            const planTripBtn = document.getElementById('planTripBtn');
            const dreamDetailsModalEl = document.getElementById('dreamDetailsModal'); // Per ottenere dreamId
            if (planTripBtn) {
                planTripBtn.onclick = function () {
                    const dreamId = dreamDetailsModalEl.getAttribute('data-dream-id');
                    if (dreamId) moveToPlanningPhase(dreamId); else console.error("planTripBtn: dreamId non trovato nel modal.");
                };
            }
        }

        // UNICA DEFINIZIONE CORRETTA
        function getCountryCode(countryName) {
            const countryMap = { 'Italia': 'it', 'Francia': 'fr', 'Germania': 'de', 'Spagna': 'es', 'Regno Unito': 'gb', 'Stati Uniti': 'us', 'Giappone': 'jp' };
            return countryMap[countryName] || 'unknown';
        }

        function setupExternalLinks(cityName, countryName) {
            if (!cityName || !countryName) { console.error('Nome città o paese mancante per link esterni'); return; }
            const encodedQuery = encodeURIComponent(`${cityName}, ${countryName}`);
            const setupLink = (id, urlPattern) => {
                const btn = document.getElementById(id);
                if (btn) {
                    const finalUrl = urlPattern.replace('{QUERY}', encodedQuery);
                    btn.href = finalUrl; // Imposta href per accessibilità e fallback
                    btn.onclick = (e) => { e.preventDefault(); window.open(finalUrl, '_blank'); return false; };
                }
            };
            setupLink('googleMapsBtn', 'https://www.google.com/maps/search/{QUERY}');
            setupLink('bookingBtn', 'https://www.booking.com/searchresults.html?ss={QUERY}');
            setupLink('tripAdvisorBtn', 'https://www.tripadvisor.com/Search?q={QUERY}');
        }

        function showVisitDetails(visitId) { alert("Funzionalità Ricordi per ID: " + visitId + " in sviluppo."); }

        function removePlan(planId) {
            if (!confirm('Eliminare questo piano di viaggio?')) return;
            showLoadingOverlay('Eliminazione...');
            fetch('/DreamMap?handler=RemovePlan', {
                method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getAntiForgeryToken() }, body: JSON.stringify({ planId })
            })
                .then(response => response.json())
                .then(data => {
                    hideLoadingOverlay();
                    if (data.success) {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('planDetailsModal'));
                        if (modal) modal.hide();
                        destinations.plannedTrips = destinations.plannedTrips.filter(plan => plan.id.toString() !== planId.toString());
                        sincronizzaStatoApp();
                        showToast('Successo', 'Piano eliminato!', 'success');
                    } else { showToast('Errore', data.message || 'Errore eliminazione.', 'danger'); }
                })
                .catch(error => { hideLoadingOverlay(); console.error('Errore eliminazione:', error); showToast('Errore', 'Errore connessione.', 'danger'); });
        }

        function markAsVisited(planId) {
            if (!confirm('Segnare come visitato?')) return;
            const plan = destinations.plannedTrips.find(item => item.id && item.id.toString() === planId.toString());
            if (!plan) { showToast('Errore', 'Piano non trovato.', 'danger'); return; }

            showLoadingOverlay('Spostamento...');
            fetch('/DreamMap?handler=MarkAsVisited', {
                method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getAntiForgeryToken() }, body: JSON.stringify({ planId })
            })
                .then(response => response.json())
                .then(data => {
                    hideLoadingOverlay();
                    if (data.success) {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('planDetailsModal'));
                        if (modal) modal.hide();
                        if (!destinations.visitedCities) destinations.visitedCities = [];
                        const visitData = { ...plan, visitDate: plan.endDate || new Date(), rating: 0, memories: plan.notes || '', photos: [] };
                        destinations.visitedCities.push(visitData);
                        destinations.plannedTrips = destinations.plannedTrips.filter(item => item.id.toString() !== planId.toString());
                        sincronizzaStatoApp();
                        document.getElementById('discover-tab')?.click(); // Vai alla tab Scopri o una tab Visitate se esiste
                        showToast('Successo', 'Segnato come visitato!', 'success');
                    } else { showToast('Errore', data.message || 'Errore spostamento.', 'danger'); }
                })
                .catch(error => { hideLoadingOverlay(); console.error('Errore spostamento:', error); showToast('Errore', 'Errore connessione.', 'danger'); });
        }

        function updatePlanDetails(planId) {
            console.log('Attempting to update plan with ID:', planId);
            if (!planId) { showToast('Errore', 'ID piano non valido.', 'danger'); console.error("updatePlanDetails: ID non valido"); return; }

            const planIndex = destinations.plannedTrips.findIndex(p => p.id && p.id.toString() === planId.toString());
            if (planIndex === -1) { showToast('Errore', 'Piano non trovato.', 'danger'); console.error("updatePlanDetails: Piano non trovato per ID", planId); return; }
            const plan = destinations.plannedTrips[planIndex];

            const startDateInput = document.getElementById('planStartDateInput');
            const endDateInput = document.getElementById('planEndDateInput');
            const notesInput = document.getElementById('planNotes');

            if (!startDateInput || !endDateInput) { console.error("Campi data mancanti nel DOM."); showToast('Errore Modulo', 'Campi data mancanti.', 'danger'); return; }

            const startDate = startDateInput.value;
            const endDate = endDateInput.value;
            const notes = notesInput ? notesInput.value : (plan.notes || '');

            if (!startDate || !endDate) { showToast('Errore', 'Date obbligatorie.', 'danger'); return; }
            if (new Date(startDate) > new Date(endDate)) { showToast('Errore', 'Data inizio successiva a data fine.', 'danger'); return; }

            const updateData = { planId, startDate, endDate, notes, checklist: plan.checklist, completionPercentage: plan.completionPercentage };
            console.log("Dati inviati al server per updatePlanDetails:", JSON.stringify(updateData));

            showLoadingOverlay('Salvataggio...');
            fetch('/DreamMap?handler=UpdatePlan', {
                method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getAntiForgeryToken() }, body: JSON.stringify(updateData)
            })
                .then(response => {
                    if (!response.ok) return response.text().then(text => { throw new Error(JSON.parse(text).message || `Errore HTTP: ${response.status}`); });
                    return response.json();
                })
                .then(data => {
                    hideLoadingOverlay();
                    if (data.success) {
                        plan.startDate = new Date(startDate);
                        plan.endDate = new Date(endDate);
                        plan.notes = notes;
                        if (data.updatedPlan) { // Se il backend restituisce il piano aggiornato (es. con ID checklist)
                            plan.checklist = data.updatedPlan.checklist || plan.checklist;
                            plan.completionPercentage = data.updatedPlan.completionPercentage !== undefined ? data.updatedPlan.completionPercentage : plan.completionPercentage;
                        }
                        sincronizzaStatoApp();
                        const planDateRangeDisplay = document.getElementById('planDateRange')?.querySelector('span');
                        if (planDateRangeDisplay) planDateRangeDisplay.textContent = `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;
                        showToast('Successo', 'Modifiche salvate!', 'success');
                    } else { showToast('Errore', data.message || 'Salvataggio fallito.', 'danger'); }
                })
                .catch(error => { hideLoadingOverlay(); console.error('Errore aggiornamento:', error); showToast('Errore', `Errore connessione: ${error.message}`, 'danger'); });
        }

        function removeChecklistItem(planId, itemId) {
            if (!confirm('Rimuovere elemento checklist?')) return;
            const planIndex = destinations.plannedTrips.findIndex(p => p.id.toString() === planId);
            if (planIndex === -1) { showToast('Errore', 'Piano non trovato.', 'danger'); return; }
            const plan = destinations.plannedTrips[planIndex];
            plan.checklist = plan.checklist.filter(item => item.id.toString() !== itemId.toString());
            renderChecklistInModal(planId);
            updateCompletionPercentage(planId);
            showToast('Info', 'Elemento rimosso. Salva per confermare.', 'info');
        }

        function setupChecklistSubModalSave() {
            const saveBtn = document.getElementById('saveChecklistItemBtn');
            if (saveBtn) {
                saveBtn.onclick = function () {
                    const addModalEl = document.getElementById('addChecklistItemModal');
                    const planId = addModalEl.getAttribute('data-current-plan-id');
                    const title = document.getElementById('checklistItemTitle').value.trim();
                    const category = document.getElementById('checklistItemCategory').value;
                    const dueDate = document.getElementById('checklistItemDueDate').value;

                    if (!title) { showToast('Errore', 'Titolo obbligatorio.', 'danger'); return; }
                    if (!planId) { showToast('Errore', 'ID piano non trovato.', 'danger'); return; }

                    const planIndex = destinations.plannedTrips.findIndex(p => p.id.toString() === planId);
                    if (planIndex === -1) { showToast('Errore', 'Piano non trovato.', 'danger'); return; }
                    const plan = destinations.plannedTrips[planIndex];

                    const newItem = { id: 'client-' + Date.now(), title, category, dueDate: dueDate || null, isCompleted: false };
                    plan.checklist = plan.checklist || [];
                    plan.checklist.push(newItem);

                    renderChecklistInModal(planId);
                    updateCompletionPercentage(planId);
                    bootstrap.Modal.getInstance(addModalEl)?.hide();
                    showToast('Info', 'Elemento aggiunto. Salva per confermare.', 'info');
                };
            }
        }

        function toggleChecklistItem(planId, itemId) {
            const planIndex = destinations.plannedTrips.findIndex(p => p.id.toString() === planId);
            if (planIndex === -1) return;
            const plan = destinations.plannedTrips[planIndex];
            const itemIndex = plan.checklist.findIndex(item => item.id.toString() === itemId.toString());
            if (itemIndex === -1) return;

            plan.checklist[itemIndex].isCompleted = !plan.checklist[itemIndex].isCompleted;

            const listItemElement = document.querySelector(`#planChecklist li[data-id="${itemId}"]`);
            if (listItemElement) {
                listItemElement.classList.toggle('completed', plan.checklist[itemIndex].isCompleted);
                listItemElement.querySelector('i:first-child').className = plan.checklist[itemIndex].isCompleted ? 'fas fa-check-circle' : 'far fa-circle';
            }
            updateCompletionPercentage(planId);
        }

        function showToast(title, message, type = 'info') { // Default type a info
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toastId = 'toast-' + Date.now();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`; // Bootstrap 5 classes
            toast.id = toastId;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            toast.innerHTML = `<div class="d-flex"><div class="toast-body"><strong>${title}</strong>: ${message}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 5000, autohide: true });
            bsToast.show();
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            container.style.zIndex = '1090'; // Higher than modals (Bootstrap modal z-index is 1055)
            document.body.appendChild(container);
            return container;
        }

        function updateCompletionPercentage(planId) {
            const planIndex = destinations.plannedTrips.findIndex(p => p.id.toString() === planId);
            if (planIndex === -1) { console.warn("updateCompletionPercentage: Piano non trovato", planId); return; }
            const plan = destinations.plannedTrips[planIndex];
            plan.checklist = plan.checklist || []; // Assicura che esista

            let percentage = 0;
            if (plan.checklist.length > 0) {
                const completedItemsCount = plan.checklist.filter(item => item.isCompleted).length;
                percentage = Math.round((completedItemsCount / plan.checklist.length) * 100);
            }
            plan.completionPercentage = percentage;

            const planProgressBar = document.getElementById('planProgressBar');
            if (planProgressBar) {
                planProgressBar.style.width = `${percentage}%`;
                planProgressBar.setAttribute('aria-valuenow', percentage);
            }
            const progressPercentageText = document.getElementById('progressPercentage');
            if (progressPercentageText) progressPercentageText.textContent = percentage;

            const sidebarPlanItem = document.querySelector(`.plan-item[data-id="${planId}"] .progress-bar`);
            if (sidebarPlanItem) sidebarPlanItem.style.width = `${percentage}%`;
            const sidebarProgressText = document.querySelector(`.plan-item[data-id="${planId}"] .plan-progress-text`);
            if (sidebarProgressText) sidebarProgressText.textContent = `${percentage}% completato`;
        }

        function moveToPlanningPhase(dreamId) {
            console.log('Sposta alla pianificazione:', dreamId);
            const dreamToMove = destinations.wishlist.find(dream => dream.id.toString() === dreamId);
            if (!dreamToMove) { showToast('Errore', 'Sogno non trovato.', 'danger'); return; }

            showLoadingOverlay('Spostamento...');
            fetch('/DreamMap?handler=MoveToPlanning', {
                method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getAntiForgeryToken() }, body: JSON.stringify({ dreamId })
            })
                .then(response => response.json())
                .then(data => {
                    hideLoadingOverlay();
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.getElementById('dreamDetailsModal'))?.hide();
                        const newPlan = { ...dreamToMove, startDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), endDate: new Date(Date.now() + 37 * 24 * 60 * 60 * 1000), completionPercentage: 0, checklist: [] };
                        if (!destinations.plannedTrips) destinations.plannedTrips = [];
                        destinations.plannedTrips.push(newPlan);
                        destinations.wishlist = destinations.wishlist.filter(dream => dream.id.toString() !== dreamId);
                        sincronizzaStatoApp();
                        document.getElementById('planning-tab')?.click();
                        showToast('Successo', 'Spostato in pianificazione!', 'success');
                    } else { showToast('Errore', data.message || 'Errore spostamento.', 'danger'); }
                })
                .catch(error => { hideLoadingOverlay(); console.error('Errore spostamento:', error); showToast('Errore', 'Errore connessione.', 'danger'); });
        }

        function populateCountryInfo(countryName) {
            const currencyInfoEl = document.getElementById('currencyInfo');
            const languageInfoEl = document.getElementById('languageInfo');
            const timeInfoEl = document.getElementById('timeInfo');
            if (!currencyInfoEl || !languageInfoEl || !timeInfoEl) { console.error('Elementi info paese mancanti.'); return; }

            let currencyText = '', languageText = '', timeText = '';
            switch (countryName) {
                case 'Francia':
                    currencyText = `<p><strong>Euro (€)</strong></p><p>Cambio: ~1 EUR = 1.09 USD</p>`;
                    languageText = `<p><strong>Francese</strong></p><p>Utili: Bonjour, Merci, Au revoir</p>`;
                    timeText = `<p><strong>CET/CEST (UTC+1/UTC+2)</strong></p><p>Stessa ora Italia</p>`;
                    break;
                case 'Giappone':
                    currencyText = `<p><strong>Yen (¥)</strong></p><p>Cambio: ~1 JPY = 0.0067 USD</p>`;
                    languageText = `<p><strong>Giapponese</strong></p><p>Utili: Konnichiwa, Arigatou</p>`;
                    timeText = `<p><strong>JST (UTC+9)</strong></p><p>+7/+8 ore da Italia</p>`;
                    break;
                // Aggiungi altri casi
                default:
                    currencyText = `<p>Info valuta per ${countryName} non disponibile.</p>`;
                    languageText = `<p>Info lingua per ${countryName} non disponibile.</p>`;
                    timeText = `<p>Info fuso orario per ${countryName} non disponibile.</p>`;
            }
            currencyInfoEl.innerHTML = currencyText;
            languageInfoEl.innerHTML = languageText;
            timeInfoEl.innerHTML = timeText;
        }

        function initializeSuggestionTabs() {
            document.querySelectorAll('.suggestion-tab').forEach(tab => {
                const newTab = tab.cloneNode(true);
                tab.parentNode.replaceChild(newTab, tab);
                newTab.addEventListener('click', function () {
                    const targetTab = this.getAttribute('data-tab');
                    if (!targetTab) return;
                    document.querySelectorAll('.suggestion-tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    document.querySelectorAll('.suggestion-pane').forEach(pane => pane.classList.remove('active'));
                    const targetPane = document.querySelector(`.suggestion-pane[data-pane="${targetTab}"]`);
                    if (targetPane) targetPane.classList.add('active');
                });
            });
            document.querySelector('.suggestion-tab[data-tab="attractions"]')?.click(); // Attiva il primo tab
        }

        function removeDream(dreamId) {
            if (!confirm('Rimuovere questa destinazione?')) return;
            showLoadingOverlay('Rimozione...');
            fetch('/DreamMap?handler=RemoveDream', {
                method: 'POST', headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': getAntiForgeryToken() }, body: JSON.stringify({ dreamId })
            })
                .then(response => response.json())
                .then(data => {
                    hideLoadingOverlay();
                    if (data.success) {
                        destinations.wishlist = destinations.wishlist.filter(d => d.id.toString() !== dreamId.toString());
                        sincronizzaStatoApp();
                        showToast('Successo', 'Destinazione rimossa!', 'success');
                    } else { showToast('Errore', data.message || 'Errore rimozione.', 'danger'); }
                })
                .catch(error => { hideLoadingOverlay(); console.error('Errore rimozione:', error); showToast('Errore', 'Errore connessione.', 'danger'); });
        }

        function validateDestinationsData() {
            if (!destinations) destinations = { wishlist: [], plannedTrips: [], visitedCities: [] };
            ['wishlist', 'plannedTrips', 'visitedCities'].forEach(key => {
                if (!destinations[key] || !Array.isArray(destinations[key])) {
                    console.warn(`destinations.${key} non era un array, inizializzato.`);
                    destinations[key] = [];
                }
            });
        }

        function initializeApp() {
            console.log('Initializing WanderGlobe app...');

            configuraPulsantiModal(); // CHIAMATA CRUCIALE
            setupChecklistSubModalSave();

            const cityDropdown = document.getElementById('WishlistForm_City');
            const countryField = document.getElementById('WishlistForm_Country');
            const countryHiddenField = document.getElementById('Country');
            const countryCodeHiddenField = document.getElementById('CountryCode');

            if (cityDropdown && countryField) {
                cityDropdown.addEventListener('change', function () {
                    const selectedOption = this.options[this.selectedIndex];
                    const country = selectedOption.getAttribute('data-country');
                    const countryCode = selectedOption.getAttribute('data-country-code');
                    countryField.value = country || '';
                    if (countryHiddenField) countryHiddenField.value = country || '';
                    if (countryCodeHiddenField) countryCodeHiddenField.value = countryCode || '';
                });
            }

            validateDestinationsData();
            initMap();
            setupEventListeners();
            setupCityValidation();
            loadMapMarkers();
            sincronizzaStatoApp();
            setupFormHandlers();

            console.log('App initialized successfully');
        }

        function setupCityValidation() {
            const submitButton = document.querySelector('#dreamForm button[type="submit"]');
            const cityField = document.getElementById('WishlistForm_City');
            if (submitButton && cityField) {
                submitButton.addEventListener('click', function (e) {
                    if (!cityField.value) { e.preventDefault(); showToast('Errore', 'Seleziona una città.', 'danger'); return false; }
                });
            }
            const form = document.getElementById('dreamForm');
            if (form) {
                form.addEventListener('submit', function (e) {
                    if (!cityField.value) { e.preventDefault(); showToast('Errore', 'Seleziona una città.', 'danger'); return false; }
                });
            }
        }

        function setupFormHandlers() {
            const dreamForm = document.getElementById('dreamForm');
            if (dreamForm) {
                dreamForm.addEventListener('submit', function (event) {
                    event.preventDefault();
                    showLoadingOverlay('Salvataggio...');
                    const formData = new FormData(dreamForm);
                    // Il token viene aggiunto automaticamente se il campo hidden è nel form, ma per fetch è meglio esplicitarlo
                    fetch('/DreamMap?handler=SaveToWishlist', {
                        method: 'POST', body: formData, headers: { 'RequestVerificationToken': getAntiForgeryToken() }
                    })
                        .then(response => response.json())
                        .then(data => {
                            hideLoadingOverlay();
                            if (data.success) {
                                if (!destinations.wishlist) destinations.wishlist = [];
                                destinations.wishlist.push(data.newItem);
                                sincronizzaStatoApp();
                                bootstrap.Modal.getInstance(document.getElementById('addDreamModal'))?.hide();
                                dreamForm.reset(); // Resetta i campi del form
                                document.getElementById('WishlistForm_Country').value = ''; // Pulisci campo paese readonly
                                showToast('Successo', 'Destinazione aggiunta!', 'success');
                            } else { showToast('Errore', data.message || 'Salvataggio fallito.', 'danger'); }
                        })
                        .catch(error => { hideLoadingOverlay(); console.error('Errore submit form:', error); showToast('Errore', `Errore salvataggio: ${error.message}`, 'danger'); });
                });
            }
        }

        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
}