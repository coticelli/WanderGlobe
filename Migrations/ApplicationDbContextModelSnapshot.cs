// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WanderGlobe.Data;

#nullable disable

namespace WanderGlobe.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WanderGlobe.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WanderGlobe.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("WanderGlobe.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlagUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IT",
                            Continent = "Europa",
                            Latitude = 41.902799999999999,
                            Longitude = 12.4964,
                            Name = "Italia"
                        },
                        new
                        {
                            Id = 2,
                            Code = "FR",
                            Continent = "Europa",
                            Latitude = 48.8566,
                            Longitude = 2.3521999999999998,
                            Name = "Francia"
                        },
                        new
                        {
                            Id = 3,
                            Code = "US",
                            Continent = "Nord America",
                            Latitude = 38.907200000000003,
                            Longitude = -77.036900000000003,
                            Name = "Stati Uniti"
                        },
                        new
                        {
                            Id = 4,
                            Code = "DE",
                            Continent = "Europa",
                            Latitude = 52.520000000000003,
                            Longitude = 13.404999999999999,
                            Name = "Germania"
                        },
                        new
                        {
                            Id = 5,
                            Code = "ES",
                            Continent = "Europa",
                            Latitude = 40.416800000000002,
                            Longitude = -3.7038000000000002,
                            Name = "Spagna"
                        },
                        new
                        {
                            Id = 6,
                            Code = "PT",
                            Continent = "Europa",
                            Latitude = 38.722299999999997,
                            Longitude = -9.1393000000000004,
                            Name = "Portogallo"
                        },
                        new
                        {
                            Id = 7,
                            Code = "CH",
                            Continent = "Europa",
                            Latitude = 46.948,
                            Longitude = 7.4474,
                            Name = "Svizzera"
                        },
                        new
                        {
                            Id = 8,
                            Code = "AT",
                            Continent = "Europa",
                            Latitude = 48.208199999999998,
                            Longitude = 16.373799999999999,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 9,
                            Code = "BE",
                            Continent = "Europa",
                            Latitude = 50.850299999999997,
                            Longitude = 4.3517000000000001,
                            Name = "Belgio"
                        },
                        new
                        {
                            Id = 10,
                            Code = "NL",
                            Continent = "Europa",
                            Latitude = 52.367600000000003,
                            Longitude = 4.9040999999999997,
                            Name = "Paesi Bassi"
                        },
                        new
                        {
                            Id = 11,
                            Code = "GB",
                            Continent = "Europa",
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278,
                            Name = "Regno Unito"
                        },
                        new
                        {
                            Id = 12,
                            Code = "CA",
                            Continent = "Nord America",
                            Latitude = 45.421500000000002,
                            Longitude = -75.697199999999995,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 13,
                            Code = "JP",
                            Continent = "Asia",
                            Latitude = 35.676200000000001,
                            Longitude = 139.65029999999999,
                            Name = "Giappone"
                        },
                        new
                        {
                            Id = 14,
                            Code = "CN",
                            Continent = "Asia",
                            Latitude = 39.904200000000003,
                            Longitude = 116.4074,
                            Name = "Cina"
                        },
                        new
                        {
                            Id = 15,
                            Code = "AU",
                            Continent = "Oceania",
                            Latitude = -35.280900000000003,
                            Longitude = 149.13,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 16,
                            Code = "RU",
                            Continent = "Europa/Asia",
                            Latitude = 55.755800000000001,
                            Longitude = 37.6173,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 17,
                            Code = "BR",
                            Continent = "Sud America",
                            Latitude = -15.780099999999999,
                            Longitude = -47.929200000000002,
                            Name = "Brasile"
                        },
                        new
                        {
                            Id = 18,
                            Code = "IN",
                            Continent = "Asia",
                            Latitude = 28.613900000000001,
                            Longitude = 77.209000000000003,
                            Name = "India"
                        },
                        new
                        {
                            Id = 19,
                            Code = "ZA",
                            Continent = "Africa",
                            Latitude = -25.746099999999998,
                            Longitude = 28.188099999999999,
                            Name = "Sud Africa"
                        },
                        new
                        {
                            Id = 20,
                            Code = "MX",
                            Continent = "Nord America",
                            Latitude = 19.432600000000001,
                            Longitude = -99.133200000000002,
                            Name = "Messico"
                        },
                        new
                        {
                            Id = 21,
                            Code = "AR",
                            Continent = "Sud America",
                            Latitude = -34.603700000000003,
                            Longitude = -58.381599999999999,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 22,
                            Code = "GR",
                            Continent = "Europa",
                            Latitude = 37.983800000000002,
                            Longitude = 23.727499999999999,
                            Name = "Grecia"
                        },
                        new
                        {
                            Id = 23,
                            Code = "EG",
                            Continent = "Africa",
                            Latitude = 30.0444,
                            Longitude = 31.235700000000001,
                            Name = "Egitto"
                        },
                        new
                        {
                            Id = 24,
                            Code = "SE",
                            Continent = "Europa",
                            Latitude = 59.329300000000003,
                            Longitude = 18.0686,
                            Name = "Svezia"
                        },
                        new
                        {
                            Id = 25,
                            Code = "NO",
                            Continent = "Europa",
                            Latitude = 59.913899999999998,
                            Longitude = 10.7522,
                            Name = "Norvegia"
                        });
                });

            modelBuilder.Entity("WanderGlobe.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelJournalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TravelJournalId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("WanderGlobe.Models.TravelJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("TravelJournals");
                });

            modelBuilder.Entity("WanderGlobe.Models.UserBadge", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("WanderGlobe.Models.VisitedCountry", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("VisitedCountries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WanderGlobe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WanderGlobe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderGlobe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WanderGlobe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderGlobe.Models.Photo", b =>
                {
                    b.HasOne("WanderGlobe.Models.TravelJournal", "TravelJournal")
                        .WithMany("Photos")
                        .HasForeignKey("TravelJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelJournal");
                });

            modelBuilder.Entity("WanderGlobe.Models.TravelJournal", b =>
                {
                    b.HasOne("WanderGlobe.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderGlobe.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WanderGlobe.Models.UserBadge", b =>
                {
                    b.HasOne("WanderGlobe.Models.Badge", "Badge")
                        .WithMany("Users")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderGlobe.Models.ApplicationUser", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WanderGlobe.Models.VisitedCountry", b =>
                {
                    b.HasOne("WanderGlobe.Models.Country", "Country")
                        .WithMany("VisitedByUsers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderGlobe.Models.ApplicationUser", "User")
                        .WithMany("VisitedCountries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WanderGlobe.Models.ApplicationUser", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("VisitedCountries");
                });

            modelBuilder.Entity("WanderGlobe.Models.Badge", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WanderGlobe.Models.Country", b =>
                {
                    b.Navigation("VisitedByUsers");
                });

            modelBuilder.Entity("WanderGlobe.Models.TravelJournal", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
